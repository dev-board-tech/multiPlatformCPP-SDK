
ExampleFeatherAdaloggerM0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002370  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000012c  20000000  00002370  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c4  20000130  000024a0  0002012c  2**3
                  ALLOC
  3 .stack        00000004  200001f4  00002564  0002012c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
  6 .debug_info   00044e2f  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006bc9  00000000  00000000  00064fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a63d  00000000  00000000  0006bba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009c0  00000000  00000000  000761e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bb8  00000000  00000000  00076ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000abb1  00000000  00000000  0007775a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014e9e  00000000  00000000  0008230b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00091877  00000000  00000000  000971a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001d2c  00000000  00000000  00128a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 80 00 20 b9 03 00 00 b5 03 00 00 b5 03 00 00     ... ............
	...
      2c:	b5 03 00 00 00 00 00 00 00 00 00 00 b5 03 00 00     ................
      3c:	b5 1d 00 00 b5 03 00 00 b5 03 00 00 b5 03 00 00     ................
      4c:	5d 03 00 00 b5 03 00 00 b5 03 00 00 b5 03 00 00     ]...............
      5c:	b5 03 00 00 b5 03 00 00 65 0e 00 00 75 0e 00 00     ........e...u...
      6c:	85 0e 00 00 95 0e 00 00 a5 0e 00 00 b5 0e 00 00     ................
      7c:	b5 03 00 00 b5 03 00 00 b5 03 00 00 b5 03 00 00     ................
      8c:	b5 03 00 00 b5 03 00 00 00 00 00 00 00 00 00 00     ................
      9c:	b5 03 00 00 b5 03 00 00 b5 03 00 00 b5 03 00 00     ................
      ac:	b5 03 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000130 	.word	0x20000130
      d4:	00000000 	.word	0x00000000
      d8:	00002370 	.word	0x00002370

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000134 	.word	0x20000134
     108:	00002370 	.word	0x00002370
     10c:	00002370 	.word	0x00002370
     110:	00000000 	.word	0x00000000

00000114 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     114:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     116:	7a98      	ldrb	r0, [r3, #10]
     118:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     11a:	4770      	bx	lr

0000011c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
     11c:	b570      	push	{r4, r5, r6, lr}
     11e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     120:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     122:	2208      	movs	r2, #8
     124:	4b05      	ldr	r3, [pc, #20]	; (13c <rtc_count_enable+0x20>)
     126:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     128:	4d05      	ldr	r5, [pc, #20]	; (140 <rtc_count_enable+0x24>)
     12a:	0020      	movs	r0, r4
     12c:	47a8      	blx	r5
     12e:	2800      	cmp	r0, #0
     130:	d1fb      	bne.n	12a <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     132:	8833      	ldrh	r3, [r6, #0]
     134:	2202      	movs	r2, #2
     136:	4313      	orrs	r3, r2
     138:	8033      	strh	r3, [r6, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	e000e100 	.word	0xe000e100
     140:	00000115 	.word	0x00000115

00000144 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
     144:	b570      	push	{r4, r5, r6, lr}
     146:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     148:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     14a:	2108      	movs	r1, #8
     14c:	2380      	movs	r3, #128	; 0x80
     14e:	4a06      	ldr	r2, [pc, #24]	; (168 <rtc_count_disable+0x24>)
     150:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
     152:	4d06      	ldr	r5, [pc, #24]	; (16c <rtc_count_disable+0x28>)
     154:	0020      	movs	r0, r4
     156:	47a8      	blx	r5
     158:	2800      	cmp	r0, #0
     15a:	d1fb      	bne.n	154 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
     15c:	8833      	ldrh	r3, [r6, #0]
     15e:	2202      	movs	r2, #2
     160:	4393      	bics	r3, r2
     162:	8033      	strh	r3, [r6, #0]
}
     164:	bd70      	pop	{r4, r5, r6, pc}
     166:	46c0      	nop			; (mov r8, r8)
     168:	e000e100 	.word	0xe000e100
     16c:	00000115 	.word	0x00000115

00000170 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
     170:	b570      	push	{r4, r5, r6, lr}
     172:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     174:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
     176:	4b07      	ldr	r3, [pc, #28]	; (194 <rtc_count_reset+0x24>)
     178:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
     17a:	2300      	movs	r3, #0
     17c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
     17e:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
     180:	4d05      	ldr	r5, [pc, #20]	; (198 <rtc_count_reset+0x28>)
     182:	0020      	movs	r0, r4
     184:	47a8      	blx	r5
     186:	2800      	cmp	r0, #0
     188:	d1fb      	bne.n	182 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
     18a:	8833      	ldrh	r3, [r6, #0]
     18c:	2201      	movs	r2, #1
     18e:	4313      	orrs	r3, r2
     190:	8033      	strh	r3, [r6, #0]
}
     192:	bd70      	pop	{r4, r5, r6, pc}
     194:	00000145 	.word	0x00000145
     198:	00000115 	.word	0x00000115

0000019c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
     19c:	b5f0      	push	{r4, r5, r6, r7, lr}
     19e:	b083      	sub	sp, #12
     1a0:	0004      	movs	r4, r0
     1a2:	9101      	str	r1, [sp, #4]
     1a4:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     1a6:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
     1a8:	4f11      	ldr	r7, [pc, #68]	; (1f0 <rtc_count_set_compare+0x54>)
     1aa:	0020      	movs	r0, r4
     1ac:	47b8      	blx	r7
     1ae:	2800      	cmp	r0, #0
     1b0:	d1fb      	bne.n	1aa <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
     1b2:	7923      	ldrb	r3, [r4, #4]
     1b4:	2b00      	cmp	r3, #0
     1b6:	d00a      	beq.n	1ce <rtc_count_set_compare+0x32>
     1b8:	2b01      	cmp	r3, #1
     1ba:	d116      	bne.n	1ea <rtc_count_set_compare+0x4e>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
				return STATUS_ERR_INVALID_ARG;
     1bc:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
     1be:	2d01      	cmp	r5, #1
     1c0:	d814      	bhi.n	1ec <rtc_count_set_compare+0x50>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
     1c2:	3506      	adds	r5, #6
     1c4:	00ad      	lsls	r5, r5, #2
     1c6:	9b01      	ldr	r3, [sp, #4]
     1c8:	51ab      	str	r3, [r5, r6]
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
     1ca:	2000      	movs	r0, #0
			break;
     1cc:	e00e      	b.n	1ec <rtc_count_set_compare+0x50>
				return STATUS_ERR_INVALID_ARG;
     1ce:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
     1d0:	2d02      	cmp	r5, #2
     1d2:	d80b      	bhi.n	1ec <rtc_count_set_compare+0x50>
			if (comp_value > 0xffff) {
     1d4:	4b07      	ldr	r3, [pc, #28]	; (1f4 <rtc_count_set_compare+0x58>)
     1d6:	9a01      	ldr	r2, [sp, #4]
     1d8:	429a      	cmp	r2, r3
     1da:	d807      	bhi.n	1ec <rtc_count_set_compare+0x50>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
     1dc:	466b      	mov	r3, sp
     1de:	889b      	ldrh	r3, [r3, #4]
     1e0:	350c      	adds	r5, #12
     1e2:	006d      	lsls	r5, r5, #1
     1e4:	53ab      	strh	r3, [r5, r6]
	return STATUS_OK;
     1e6:	2000      	movs	r0, #0
			break;
     1e8:	e000      	b.n	1ec <rtc_count_set_compare+0x50>
			return STATUS_ERR_BAD_FORMAT;
     1ea:	201a      	movs	r0, #26
}
     1ec:	b003      	add	sp, #12
     1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1f0:	00000115 	.word	0x00000115
     1f4:	0000ffff 	.word	0x0000ffff

000001f8 <rtc_count_init>:
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	b083      	sub	sp, #12
     1fc:	0004      	movs	r4, r0
     1fe:	0016      	movs	r6, r2
	module->hw = hw;
     200:	6001      	str	r1, [r0, #0]
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     202:	4a2e      	ldr	r2, [pc, #184]	; (2bc <rtc_count_init+0xc4>)
     204:	6993      	ldr	r3, [r2, #24]
     206:	2120      	movs	r1, #32
     208:	430b      	orrs	r3, r1
     20a:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     20c:	a901      	add	r1, sp, #4
     20e:	2302      	movs	r3, #2
     210:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     212:	2004      	movs	r0, #4
     214:	4b2a      	ldr	r3, [pc, #168]	; (2c0 <rtc_count_init+0xc8>)
     216:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     218:	2004      	movs	r0, #4
     21a:	4b2a      	ldr	r3, [pc, #168]	; (2c4 <rtc_count_init+0xcc>)
     21c:	4798      	blx	r3
	rtc_count_reset(module);
     21e:	0020      	movs	r0, r4
     220:	4b29      	ldr	r3, [pc, #164]	; (2c8 <rtc_count_init+0xd0>)
     222:	4798      	blx	r3
	module->mode                = config->mode;
     224:	78b3      	ldrb	r3, [r6, #2]
     226:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
     228:	7933      	ldrb	r3, [r6, #4]
     22a:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
     22c:	4b27      	ldr	r3, [pc, #156]	; (2cc <rtc_count_init+0xd4>)
     22e:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
     230:	6827      	ldr	r7, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
     232:	8833      	ldrh	r3, [r6, #0]
     234:	803b      	strh	r3, [r7, #0]
	switch (config->mode) {
     236:	78b3      	ldrb	r3, [r6, #2]
     238:	2b00      	cmp	r3, #0
     23a:	d021      	beq.n	280 <rtc_count_init+0x88>
			return STATUS_ERR_INVALID_ARG;
     23c:	2017      	movs	r0, #23
	switch (config->mode) {
     23e:	2b01      	cmp	r3, #1
     240:	d11c      	bne.n	27c <rtc_count_init+0x84>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
     242:	883b      	ldrh	r3, [r7, #0]
     244:	b29b      	uxth	r3, r3
     246:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     248:	78f3      	ldrb	r3, [r6, #3]
     24a:	2b00      	cmp	r3, #0
     24c:	d003      	beq.n	256 <rtc_count_init+0x5e>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
     24e:	883b      	ldrh	r3, [r7, #0]
     250:	2280      	movs	r2, #128	; 0x80
     252:	4313      	orrs	r3, r2
     254:	803b      	strh	r3, [r7, #0]
				while (rtc_count_is_syncing(module)) {
     256:	4d1e      	ldr	r5, [pc, #120]	; (2d0 <rtc_count_init+0xd8>)
     258:	0020      	movs	r0, r4
     25a:	47a8      	blx	r5
     25c:	2800      	cmp	r0, #0
     25e:	d1fb      	bne.n	258 <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
     260:	2200      	movs	r2, #0
     262:	68b1      	ldr	r1, [r6, #8]
     264:	0020      	movs	r0, r4
     266:	4b1b      	ldr	r3, [pc, #108]	; (2d4 <rtc_count_init+0xdc>)
     268:	4798      	blx	r3
	if (config->continuously_update) {
     26a:	7933      	ldrb	r3, [r6, #4]
	return STATUS_OK;
     26c:	2000      	movs	r0, #0
	if (config->continuously_update) {
     26e:	2b00      	cmp	r3, #0
     270:	d004      	beq.n	27c <rtc_count_init+0x84>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
     272:	887b      	ldrh	r3, [r7, #2]
     274:	2280      	movs	r2, #128	; 0x80
     276:	01d2      	lsls	r2, r2, #7
     278:	4313      	orrs	r3, r2
     27a:	807b      	strh	r3, [r7, #2]
}
     27c:	b003      	add	sp, #12
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
     280:	883b      	ldrh	r3, [r7, #0]
     282:	2204      	movs	r2, #4
     284:	4313      	orrs	r3, r2
     286:	803b      	strh	r3, [r7, #0]
			if (config->clear_on_match) {
     288:	78f3      	ldrb	r3, [r6, #3]
				return STATUS_ERR_INVALID_ARG;
     28a:	2017      	movs	r0, #23
			if (config->clear_on_match) {
     28c:	2b00      	cmp	r3, #0
     28e:	d1f5      	bne.n	27c <rtc_count_init+0x84>
				while (rtc_count_is_syncing(module)) {
     290:	4d0f      	ldr	r5, [pc, #60]	; (2d0 <rtc_count_init+0xd8>)
     292:	0020      	movs	r0, r4
     294:	47a8      	blx	r5
     296:	2800      	cmp	r0, #0
     298:	d1fb      	bne.n	292 <rtc_count_init+0x9a>
				rtc_count_set_compare(module, config->compare_values[i],
     29a:	2200      	movs	r2, #0
     29c:	68b1      	ldr	r1, [r6, #8]
     29e:	0020      	movs	r0, r4
     2a0:	4b0c      	ldr	r3, [pc, #48]	; (2d4 <rtc_count_init+0xdc>)
     2a2:	4798      	blx	r3
				while (rtc_count_is_syncing(module)) {
     2a4:	4d0a      	ldr	r5, [pc, #40]	; (2d0 <rtc_count_init+0xd8>)
     2a6:	0020      	movs	r0, r4
     2a8:	47a8      	blx	r5
     2aa:	2800      	cmp	r0, #0
     2ac:	d1fb      	bne.n	2a6 <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
     2ae:	2201      	movs	r2, #1
     2b0:	68f1      	ldr	r1, [r6, #12]
     2b2:	0020      	movs	r0, r4
     2b4:	4b07      	ldr	r3, [pc, #28]	; (2d4 <rtc_count_init+0xdc>)
     2b6:	4798      	blx	r3
     2b8:	e7d7      	b.n	26a <rtc_count_init+0x72>
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	40000400 	.word	0x40000400
     2c0:	0000085d 	.word	0x0000085d
     2c4:	000007d1 	.word	0x000007d1
     2c8:	00000171 	.word	0x00000171
     2cc:	200001d4 	.word	0x200001d4
     2d0:	00000115 	.word	0x00000115
     2d4:	0000019d 	.word	0x0000019d

000002d8 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode.
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
     2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     2da:	0004      	movs	r4, r0
     2dc:	000e      	movs	r6, r1
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     2de:	7903      	ldrb	r3, [r0, #4]
		return STATUS_ERR_UNSUPPORTED_DEV;
     2e0:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
     2e2:	2b00      	cmp	r3, #0
     2e4:	d000      	beq.n	2e8 <rtc_count_set_period+0x10>

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;

	return STATUS_OK;
}
     2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     2e8:	6827      	ldr	r7, [r4, #0]
	while (rtc_count_is_syncing(module)) {
     2ea:	4d03      	ldr	r5, [pc, #12]	; (2f8 <rtc_count_set_period+0x20>)
     2ec:	0020      	movs	r0, r4
     2ee:	47a8      	blx	r5
     2f0:	2800      	cmp	r0, #0
     2f2:	d1fb      	bne.n	2ec <rtc_count_set_period+0x14>
	rtc_module->MODE1.PER.reg = period_value;
     2f4:	82be      	strh	r6, [r7, #20]
	return STATUS_OK;
     2f6:	e7f6      	b.n	2e6 <rtc_count_set_period+0xe>
     2f8:	00000115 	.word	0x00000115

000002fc <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     2fc:	2a02      	cmp	r2, #2
     2fe:	d00b      	beq.n	318 <rtc_count_register_callback+0x1c>
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
     300:	7903      	ldrb	r3, [r0, #4]
     302:	2b00      	cmp	r3, #0
     304:	d005      	beq.n	312 <rtc_count_register_callback+0x16>
     306:	2b01      	cmp	r3, #1
     308:	d112      	bne.n	330 <rtc_count_register_callback+0x34>
     30a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP32) {
     30c:	2a01      	cmp	r2, #1
     30e:	d80d      	bhi.n	32c <rtc_count_register_callback+0x30>
     310:	e002      	b.n	318 <rtc_count_register_callback+0x1c>
     312:	2317      	movs	r3, #23
			}

			break;
		case RTC_COUNT_MODE_16BIT:
			/* Check sanity for 16-bit mode. */
			if (callback_type > RTC_NUM_OF_COMP16) {
     314:	2a02      	cmp	r2, #2
     316:	d809      	bhi.n	32c <rtc_count_register_callback+0x30>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
     318:	1c93      	adds	r3, r2, #2
     31a:	009b      	lsls	r3, r3, #2
     31c:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
     31e:	8a83      	ldrh	r3, [r0, #20]
     320:	2101      	movs	r1, #1
     322:	4091      	lsls	r1, r2
     324:	430b      	orrs	r3, r1
     326:	b29b      	uxth	r3, r3
     328:	8283      	strh	r3, [r0, #20]
     32a:	2300      	movs	r3, #0
	}

	return status;
}
     32c:	0018      	movs	r0, r3
     32e:	4770      	bx	lr
			status = STATUS_ERR_INVALID_ARG;
     330:	2317      	movs	r3, #23
     332:	e7fb      	b.n	32c <rtc_count_register_callback+0x30>

00000334 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
     334:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     336:	6804      	ldr	r4, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
     338:	2902      	cmp	r1, #2
     33a:	d00b      	beq.n	354 <rtc_count_enable_callback+0x20>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
	} else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << callback_type);
     33c:	2201      	movs	r2, #1
     33e:	408a      	lsls	r2, r1
     340:	2303      	movs	r3, #3
     342:	4013      	ands	r3, r2
     344:	71e3      	strb	r3, [r4, #7]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     346:	8ac3      	ldrh	r3, [r0, #22]
     348:	2201      	movs	r2, #1
     34a:	408a      	lsls	r2, r1
     34c:	4313      	orrs	r3, r2
     34e:	b29b      	uxth	r3, r3
     350:	82c3      	strh	r3, [r0, #22]
}
     352:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
     354:	2380      	movs	r3, #128	; 0x80
     356:	71e3      	strb	r3, [r4, #7]
     358:	e7f5      	b.n	346 <rtc_count_enable_callback+0x12>
	...

0000035c <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     35c:	b510      	push	{r4, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     35e:	4b14      	ldr	r3, [pc, #80]	; (3b0 <RTC_Handler+0x54>)
     360:	681a      	ldr	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     362:	6814      	ldr	r4, [r2, #0]
	uint16_t callback_mask = module->enabled_callback;
     364:	8ad1      	ldrh	r1, [r2, #22]
	callback_mask &= module->registered_callback;
     366:	8a93      	ldrh	r3, [r2, #20]
     368:	4019      	ands	r1, r3
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
     36a:	7a20      	ldrb	r0, [r4, #8]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
     36c:	79e3      	ldrb	r3, [r4, #7]
     36e:	4003      	ands	r3, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
     370:	b258      	sxtb	r0, r3
     372:	2800      	cmp	r0, #0
     374:	db06      	blt.n	384 <RTC_Handler+0x28>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
     376:	07d8      	lsls	r0, r3, #31
     378:	d50f      	bpl.n	39a <RTC_Handler+0x3e>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
     37a:	07cb      	lsls	r3, r1, #31
     37c:	d40a      	bmi.n	394 <RTC_Handler+0x38>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
     37e:	2301      	movs	r3, #1
     380:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     382:	bd10      	pop	{r4, pc}
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
     384:	074b      	lsls	r3, r1, #29
     386:	d402      	bmi.n	38e <RTC_Handler+0x32>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
     388:	2380      	movs	r3, #128	; 0x80
     38a:	7223      	strb	r3, [r4, #8]
     38c:	e7f9      	b.n	382 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
     38e:	6913      	ldr	r3, [r2, #16]
     390:	4798      	blx	r3
     392:	e7f9      	b.n	388 <RTC_Handler+0x2c>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
     394:	6893      	ldr	r3, [r2, #8]
     396:	4798      	blx	r3
     398:	e7f1      	b.n	37e <RTC_Handler+0x22>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
     39a:	079b      	lsls	r3, r3, #30
     39c:	d5f1      	bpl.n	382 <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
     39e:	078b      	lsls	r3, r1, #30
     3a0:	d402      	bmi.n	3a8 <RTC_Handler+0x4c>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
     3a2:	2302      	movs	r3, #2
     3a4:	7223      	strb	r3, [r4, #8]
}
     3a6:	e7ec      	b.n	382 <RTC_Handler+0x26>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
     3a8:	68d3      	ldr	r3, [r2, #12]
     3aa:	4798      	blx	r3
     3ac:	e7f9      	b.n	3a2 <RTC_Handler+0x46>
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	200001d4 	.word	0x200001d4

000003b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     3b4:	e7fe      	b.n	3b4 <Dummy_Handler>
	...

000003b8 <Reset_Handler>:
{
     3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     3ba:	4a2a      	ldr	r2, [pc, #168]	; (464 <Reset_Handler+0xac>)
     3bc:	4b2a      	ldr	r3, [pc, #168]	; (468 <Reset_Handler+0xb0>)
     3be:	429a      	cmp	r2, r3
     3c0:	d011      	beq.n	3e6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     3c2:	001a      	movs	r2, r3
     3c4:	4b29      	ldr	r3, [pc, #164]	; (46c <Reset_Handler+0xb4>)
     3c6:	429a      	cmp	r2, r3
     3c8:	d20d      	bcs.n	3e6 <Reset_Handler+0x2e>
     3ca:	4a29      	ldr	r2, [pc, #164]	; (470 <Reset_Handler+0xb8>)
     3cc:	3303      	adds	r3, #3
     3ce:	1a9b      	subs	r3, r3, r2
     3d0:	089b      	lsrs	r3, r3, #2
     3d2:	3301      	adds	r3, #1
     3d4:	009b      	lsls	r3, r3, #2
     3d6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     3d8:	4823      	ldr	r0, [pc, #140]	; (468 <Reset_Handler+0xb0>)
     3da:	4922      	ldr	r1, [pc, #136]	; (464 <Reset_Handler+0xac>)
     3dc:	588c      	ldr	r4, [r1, r2]
     3de:	5084      	str	r4, [r0, r2]
     3e0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     3e2:	429a      	cmp	r2, r3
     3e4:	d1fa      	bne.n	3dc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     3e6:	4a23      	ldr	r2, [pc, #140]	; (474 <Reset_Handler+0xbc>)
     3e8:	4b23      	ldr	r3, [pc, #140]	; (478 <Reset_Handler+0xc0>)
     3ea:	429a      	cmp	r2, r3
     3ec:	d20a      	bcs.n	404 <Reset_Handler+0x4c>
     3ee:	43d3      	mvns	r3, r2
     3f0:	4921      	ldr	r1, [pc, #132]	; (478 <Reset_Handler+0xc0>)
     3f2:	185b      	adds	r3, r3, r1
     3f4:	2103      	movs	r1, #3
     3f6:	438b      	bics	r3, r1
     3f8:	3304      	adds	r3, #4
     3fa:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     3fc:	2100      	movs	r1, #0
     3fe:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     400:	4293      	cmp	r3, r2
     402:	d1fc      	bne.n	3fe <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     404:	4a1d      	ldr	r2, [pc, #116]	; (47c <Reset_Handler+0xc4>)
     406:	21ff      	movs	r1, #255	; 0xff
     408:	4b1d      	ldr	r3, [pc, #116]	; (480 <Reset_Handler+0xc8>)
     40a:	438b      	bics	r3, r1
     40c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     40e:	39fd      	subs	r1, #253	; 0xfd
     410:	2390      	movs	r3, #144	; 0x90
     412:	005b      	lsls	r3, r3, #1
     414:	4a1b      	ldr	r2, [pc, #108]	; (484 <Reset_Handler+0xcc>)
     416:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     418:	4a1b      	ldr	r2, [pc, #108]	; (488 <Reset_Handler+0xd0>)
     41a:	78d3      	ldrb	r3, [r2, #3]
     41c:	2503      	movs	r5, #3
     41e:	43ab      	bics	r3, r5
     420:	2402      	movs	r4, #2
     422:	4323      	orrs	r3, r4
     424:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     426:	78d3      	ldrb	r3, [r2, #3]
     428:	270c      	movs	r7, #12
     42a:	43bb      	bics	r3, r7
     42c:	2608      	movs	r6, #8
     42e:	4333      	orrs	r3, r6
     430:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     432:	4b16      	ldr	r3, [pc, #88]	; (48c <Reset_Handler+0xd4>)
     434:	7b98      	ldrb	r0, [r3, #14]
     436:	2230      	movs	r2, #48	; 0x30
     438:	4390      	bics	r0, r2
     43a:	2220      	movs	r2, #32
     43c:	4310      	orrs	r0, r2
     43e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     440:	7b99      	ldrb	r1, [r3, #14]
     442:	43b9      	bics	r1, r7
     444:	4331      	orrs	r1, r6
     446:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     448:	7b9a      	ldrb	r2, [r3, #14]
     44a:	43aa      	bics	r2, r5
     44c:	4322      	orrs	r2, r4
     44e:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     450:	4a0f      	ldr	r2, [pc, #60]	; (490 <Reset_Handler+0xd8>)
     452:	6853      	ldr	r3, [r2, #4]
     454:	2180      	movs	r1, #128	; 0x80
     456:	430b      	orrs	r3, r1
     458:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     45a:	4b0e      	ldr	r3, [pc, #56]	; (494 <Reset_Handler+0xdc>)
     45c:	4798      	blx	r3
        main();
     45e:	4b0e      	ldr	r3, [pc, #56]	; (498 <Reset_Handler+0xe0>)
     460:	4798      	blx	r3
     462:	e7fe      	b.n	462 <Reset_Handler+0xaa>
     464:	00002370 	.word	0x00002370
     468:	20000000 	.word	0x20000000
     46c:	2000012c 	.word	0x2000012c
     470:	20000004 	.word	0x20000004
     474:	20000130 	.word	0x20000130
     478:	200001f4 	.word	0x200001f4
     47c:	e000ed00 	.word	0xe000ed00
     480:	00000000 	.word	0x00000000
     484:	41007000 	.word	0x41007000
     488:	41005000 	.word	0x41005000
     48c:	41004800 	.word	0x41004800
     490:	41004000 	.word	0x41004000
     494:	0000201d 	.word	0x0000201d
     498:	00001401 	.word	0x00001401

0000049c <system_clock_source_get_hz>:
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     49c:	2807      	cmp	r0, #7
     49e:	d803      	bhi.n	4a8 <system_clock_source_get_hz+0xc>
     4a0:	0080      	lsls	r0, r0, #2
     4a2:	4b0f      	ldr	r3, [pc, #60]	; (4e0 <system_clock_source_get_hz+0x44>)
     4a4:	581b      	ldr	r3, [r3, r0]
     4a6:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     4a8:	2000      	movs	r0, #0
     4aa:	e017      	b.n	4dc <system_clock_source_get_hz+0x40>
		return _system_clock_inst.xosc.frequency;
     4ac:	4b0d      	ldr	r3, [pc, #52]	; (4e4 <system_clock_source_get_hz+0x48>)
     4ae:	6918      	ldr	r0, [r3, #16]
     4b0:	e014      	b.n	4dc <system_clock_source_get_hz+0x40>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     4b2:	4b0d      	ldr	r3, [pc, #52]	; (4e8 <system_clock_source_get_hz+0x4c>)
     4b4:	6a1b      	ldr	r3, [r3, #32]
     4b6:	059b      	lsls	r3, r3, #22
     4b8:	0f9b      	lsrs	r3, r3, #30
     4ba:	480c      	ldr	r0, [pc, #48]	; (4ec <system_clock_source_get_hz+0x50>)
     4bc:	40d8      	lsrs	r0, r3
     4be:	e00d      	b.n	4dc <system_clock_source_get_hz+0x40>
		return _system_clock_inst.xosc32k.frequency;
     4c0:	4b08      	ldr	r3, [pc, #32]	; (4e4 <system_clock_source_get_hz+0x48>)
     4c2:	6958      	ldr	r0, [r3, #20]
     4c4:	e00a      	b.n	4dc <system_clock_source_get_hz+0x40>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     4c6:	2350      	movs	r3, #80	; 0x50
     4c8:	4a07      	ldr	r2, [pc, #28]	; (4e8 <system_clock_source_get_hz+0x4c>)
     4ca:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     4cc:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     4ce:	075b      	lsls	r3, r3, #29
     4d0:	d504      	bpl.n	4dc <system_clock_source_get_hz+0x40>
		return _system_clock_inst.dpll.frequency;
     4d2:	4b04      	ldr	r3, [pc, #16]	; (4e4 <system_clock_source_get_hz+0x48>)
     4d4:	68d8      	ldr	r0, [r3, #12]
     4d6:	e001      	b.n	4dc <system_clock_source_get_hz+0x40>
		return 32768UL;
     4d8:	2080      	movs	r0, #128	; 0x80
     4da:	0200      	lsls	r0, r0, #8
	}
}
     4dc:	4770      	bx	lr
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	00002254 	.word	0x00002254
     4e4:	2000014c 	.word	0x2000014c
     4e8:	40000800 	.word	0x40000800
     4ec:	007a1200 	.word	0x007a1200

000004f0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     4f0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     4f2:	490c      	ldr	r1, [pc, #48]	; (524 <system_clock_source_osc8m_set_config+0x34>)
     4f4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     4f6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     4f8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     4fa:	7840      	ldrb	r0, [r0, #1]
     4fc:	2201      	movs	r2, #1
     4fe:	4010      	ands	r0, r2
     500:	0180      	lsls	r0, r0, #6
     502:	2640      	movs	r6, #64	; 0x40
     504:	43b3      	bics	r3, r6
     506:	4303      	orrs	r3, r0
     508:	402a      	ands	r2, r5
     50a:	01d2      	lsls	r2, r2, #7
     50c:	2080      	movs	r0, #128	; 0x80
     50e:	4383      	bics	r3, r0
     510:	4313      	orrs	r3, r2
     512:	2203      	movs	r2, #3
     514:	4022      	ands	r2, r4
     516:	0212      	lsls	r2, r2, #8
     518:	4803      	ldr	r0, [pc, #12]	; (528 <system_clock_source_osc8m_set_config+0x38>)
     51a:	4003      	ands	r3, r0
     51c:	4313      	orrs	r3, r2
     51e:	620b      	str	r3, [r1, #32]
}
     520:	bd70      	pop	{r4, r5, r6, pc}
     522:	46c0      	nop			; (mov r8, r8)
     524:	40000800 	.word	0x40000800
     528:	fffffcff 	.word	0xfffffcff

0000052c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     52c:	2807      	cmp	r0, #7
     52e:	d803      	bhi.n	538 <system_clock_source_enable+0xc>
     530:	0080      	lsls	r0, r0, #2
     532:	4b15      	ldr	r3, [pc, #84]	; (588 <system_clock_source_enable+0x5c>)
     534:	581b      	ldr	r3, [r3, r0]
     536:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     538:	2017      	movs	r0, #23
     53a:	e024      	b.n	586 <system_clock_source_enable+0x5a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     53c:	4a13      	ldr	r2, [pc, #76]	; (58c <system_clock_source_enable+0x60>)
     53e:	6a13      	ldr	r3, [r2, #32]
     540:	2102      	movs	r1, #2
     542:	430b      	orrs	r3, r1
     544:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     546:	2000      	movs	r0, #0
     548:	e01d      	b.n	586 <system_clock_source_enable+0x5a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     54a:	4a10      	ldr	r2, [pc, #64]	; (58c <system_clock_source_enable+0x60>)
     54c:	6993      	ldr	r3, [r2, #24]
     54e:	2102      	movs	r1, #2
     550:	430b      	orrs	r3, r1
     552:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     554:	2000      	movs	r0, #0
		break;
     556:	e016      	b.n	586 <system_clock_source_enable+0x5a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     558:	4a0c      	ldr	r2, [pc, #48]	; (58c <system_clock_source_enable+0x60>)
     55a:	8a13      	ldrh	r3, [r2, #16]
     55c:	2102      	movs	r1, #2
     55e:	430b      	orrs	r3, r1
     560:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     562:	2000      	movs	r0, #0
		break;
     564:	e00f      	b.n	586 <system_clock_source_enable+0x5a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     566:	4a09      	ldr	r2, [pc, #36]	; (58c <system_clock_source_enable+0x60>)
     568:	8a93      	ldrh	r3, [r2, #20]
     56a:	2102      	movs	r1, #2
     56c:	430b      	orrs	r3, r1
     56e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     570:	2000      	movs	r0, #0
		break;
     572:	e008      	b.n	586 <system_clock_source_enable+0x5a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     574:	4905      	ldr	r1, [pc, #20]	; (58c <system_clock_source_enable+0x60>)
     576:	2244      	movs	r2, #68	; 0x44
     578:	5c8b      	ldrb	r3, [r1, r2]
     57a:	2002      	movs	r0, #2
     57c:	4303      	orrs	r3, r0
     57e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     580:	2000      	movs	r0, #0
		break;
     582:	e000      	b.n	586 <system_clock_source_enable+0x5a>
		return STATUS_OK;
     584:	2000      	movs	r0, #0
}
     586:	4770      	bx	lr
     588:	00002274 	.word	0x00002274
     58c:	40000800 	.word	0x40000800

00000590 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     590:	b530      	push	{r4, r5, lr}
     592:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     594:	22c2      	movs	r2, #194	; 0xc2
     596:	00d2      	lsls	r2, r2, #3
     598:	4b19      	ldr	r3, [pc, #100]	; (600 <system_clock_init+0x70>)
     59a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     59c:	4a19      	ldr	r2, [pc, #100]	; (604 <system_clock_init+0x74>)
     59e:	6853      	ldr	r3, [r2, #4]
     5a0:	211e      	movs	r1, #30
     5a2:	438b      	bics	r3, r1
     5a4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     5a6:	2301      	movs	r3, #1
     5a8:	466a      	mov	r2, sp
     5aa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     5ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     5ae:	4d16      	ldr	r5, [pc, #88]	; (608 <system_clock_init+0x78>)
     5b0:	b2e0      	uxtb	r0, r4
     5b2:	4669      	mov	r1, sp
     5b4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     5b6:	3401      	adds	r4, #1
     5b8:	2c25      	cmp	r4, #37	; 0x25
     5ba:	d1f9      	bne.n	5b0 <system_clock_init+0x20>
	config->run_in_standby  = false;
     5bc:	a803      	add	r0, sp, #12
     5be:	2400      	movs	r4, #0
     5c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     5c2:	2501      	movs	r5, #1
     5c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     5c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     5c8:	4b10      	ldr	r3, [pc, #64]	; (60c <system_clock_init+0x7c>)
     5ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     5cc:	2006      	movs	r0, #6
     5ce:	4b10      	ldr	r3, [pc, #64]	; (610 <system_clock_init+0x80>)
     5d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     5d2:	4b10      	ldr	r3, [pc, #64]	; (614 <system_clock_init+0x84>)
     5d4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     5d6:	4b10      	ldr	r3, [pc, #64]	; (618 <system_clock_init+0x88>)
     5d8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     5da:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     5dc:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     5de:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     5e0:	466b      	mov	r3, sp
     5e2:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     5e4:	2306      	movs	r3, #6
     5e6:	466a      	mov	r2, sp
     5e8:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     5ea:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     5ec:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     5ee:	4669      	mov	r1, sp
     5f0:	2000      	movs	r0, #0
     5f2:	4b0a      	ldr	r3, [pc, #40]	; (61c <system_clock_init+0x8c>)
     5f4:	4798      	blx	r3
     5f6:	2000      	movs	r0, #0
     5f8:	4b09      	ldr	r3, [pc, #36]	; (620 <system_clock_init+0x90>)
     5fa:	4798      	blx	r3
#endif
}
     5fc:	b005      	add	sp, #20
     5fe:	bd30      	pop	{r4, r5, pc}
     600:	40000800 	.word	0x40000800
     604:	41004000 	.word	0x41004000
     608:	0000085d 	.word	0x0000085d
     60c:	000004f1 	.word	0x000004f1
     610:	0000052d 	.word	0x0000052d
     614:	00000625 	.word	0x00000625
     618:	40000400 	.word	0x40000400
     61c:	00000649 	.word	0x00000649
     620:	00000701 	.word	0x00000701

00000624 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     624:	4a06      	ldr	r2, [pc, #24]	; (640 <system_gclk_init+0x1c>)
     626:	6993      	ldr	r3, [r2, #24]
     628:	2108      	movs	r1, #8
     62a:	430b      	orrs	r3, r1
     62c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     62e:	2201      	movs	r2, #1
     630:	4b04      	ldr	r3, [pc, #16]	; (644 <system_gclk_init+0x20>)
     632:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     634:	0019      	movs	r1, r3
     636:	780b      	ldrb	r3, [r1, #0]
     638:	4213      	tst	r3, r2
     63a:	d1fc      	bne.n	636 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     63c:	4770      	bx	lr
     63e:	46c0      	nop			; (mov r8, r8)
     640:	40000400 	.word	0x40000400
     644:	40000c00 	.word	0x40000c00

00000648 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     648:	b570      	push	{r4, r5, r6, lr}
     64a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     64c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     64e:	780d      	ldrb	r5, [r1, #0]
     650:	022d      	lsls	r5, r5, #8
     652:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     654:	784b      	ldrb	r3, [r1, #1]
     656:	2b00      	cmp	r3, #0
     658:	d002      	beq.n	660 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     65a:	2380      	movs	r3, #128	; 0x80
     65c:	02db      	lsls	r3, r3, #11
     65e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     660:	7a4b      	ldrb	r3, [r1, #9]
     662:	2b00      	cmp	r3, #0
     664:	d002      	beq.n	66c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     666:	2380      	movs	r3, #128	; 0x80
     668:	031b      	lsls	r3, r3, #12
     66a:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     66c:	6848      	ldr	r0, [r1, #4]
     66e:	2801      	cmp	r0, #1
     670:	d910      	bls.n	694 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     672:	1e43      	subs	r3, r0, #1
     674:	4218      	tst	r0, r3
     676:	d134      	bne.n	6e2 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     678:	2802      	cmp	r0, #2
     67a:	d930      	bls.n	6de <system_gclk_gen_set_config+0x96>
     67c:	2302      	movs	r3, #2
     67e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     680:	3201      	adds	r2, #1
						mask <<= 1) {
     682:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     684:	4298      	cmp	r0, r3
     686:	d8fb      	bhi.n	680 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     688:	0212      	lsls	r2, r2, #8
     68a:	4332      	orrs	r2, r6
     68c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     68e:	2380      	movs	r3, #128	; 0x80
     690:	035b      	lsls	r3, r3, #13
     692:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     694:	7a0b      	ldrb	r3, [r1, #8]
     696:	2b00      	cmp	r3, #0
     698:	d002      	beq.n	6a0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     69a:	2380      	movs	r3, #128	; 0x80
     69c:	039b      	lsls	r3, r3, #14
     69e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6a0:	4a13      	ldr	r2, [pc, #76]	; (6f0 <system_gclk_gen_set_config+0xa8>)
     6a2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     6a4:	b25b      	sxtb	r3, r3
     6a6:	2b00      	cmp	r3, #0
     6a8:	dbfb      	blt.n	6a2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
     6aa:	4b12      	ldr	r3, [pc, #72]	; (6f4 <system_gclk_gen_set_config+0xac>)
     6ac:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     6ae:	4b12      	ldr	r3, [pc, #72]	; (6f8 <system_gclk_gen_set_config+0xb0>)
     6b0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6b2:	4a0f      	ldr	r2, [pc, #60]	; (6f0 <system_gclk_gen_set_config+0xa8>)
     6b4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     6b6:	b25b      	sxtb	r3, r3
     6b8:	2b00      	cmp	r3, #0
     6ba:	dbfb      	blt.n	6b4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     6bc:	4b0c      	ldr	r3, [pc, #48]	; (6f0 <system_gclk_gen_set_config+0xa8>)
     6be:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     6c0:	001a      	movs	r2, r3
     6c2:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     6c4:	b25b      	sxtb	r3, r3
     6c6:	2b00      	cmp	r3, #0
     6c8:	dbfb      	blt.n	6c2 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     6ca:	4a09      	ldr	r2, [pc, #36]	; (6f0 <system_gclk_gen_set_config+0xa8>)
     6cc:	6853      	ldr	r3, [r2, #4]
     6ce:	2180      	movs	r1, #128	; 0x80
     6d0:	0249      	lsls	r1, r1, #9
     6d2:	400b      	ands	r3, r1
     6d4:	431d      	orrs	r5, r3
     6d6:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
     6d8:	4b08      	ldr	r3, [pc, #32]	; (6fc <system_gclk_gen_set_config+0xb4>)
     6da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     6dc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     6de:	2200      	movs	r2, #0
     6e0:	e7d2      	b.n	688 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     6e2:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     6e4:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     6e6:	2380      	movs	r3, #128	; 0x80
     6e8:	029b      	lsls	r3, r3, #10
     6ea:	431d      	orrs	r5, r3
     6ec:	e7d2      	b.n	694 <system_gclk_gen_set_config+0x4c>
     6ee:	46c0      	nop			; (mov r8, r8)
     6f0:	40000c00 	.word	0x40000c00
     6f4:	00000991 	.word	0x00000991
     6f8:	40000c08 	.word	0x40000c08
     6fc:	000009d1 	.word	0x000009d1

00000700 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     700:	b510      	push	{r4, lr}
     702:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     704:	4a0b      	ldr	r2, [pc, #44]	; (734 <system_gclk_gen_enable+0x34>)
     706:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     708:	b25b      	sxtb	r3, r3
     70a:	2b00      	cmp	r3, #0
     70c:	dbfb      	blt.n	706 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     70e:	4b0a      	ldr	r3, [pc, #40]	; (738 <system_gclk_gen_enable+0x38>)
     710:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     712:	4b0a      	ldr	r3, [pc, #40]	; (73c <system_gclk_gen_enable+0x3c>)
     714:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     716:	4a07      	ldr	r2, [pc, #28]	; (734 <system_gclk_gen_enable+0x34>)
     718:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     71a:	b25b      	sxtb	r3, r3
     71c:	2b00      	cmp	r3, #0
     71e:	dbfb      	blt.n	718 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     720:	4a04      	ldr	r2, [pc, #16]	; (734 <system_gclk_gen_enable+0x34>)
     722:	6851      	ldr	r1, [r2, #4]
     724:	2380      	movs	r3, #128	; 0x80
     726:	025b      	lsls	r3, r3, #9
     728:	430b      	orrs	r3, r1
     72a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     72c:	4b04      	ldr	r3, [pc, #16]	; (740 <system_gclk_gen_enable+0x40>)
     72e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     730:	bd10      	pop	{r4, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	40000c00 	.word	0x40000c00
     738:	00000991 	.word	0x00000991
     73c:	40000c04 	.word	0x40000c04
     740:	000009d1 	.word	0x000009d1

00000744 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     744:	b570      	push	{r4, r5, r6, lr}
     746:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     748:	4a1a      	ldr	r2, [pc, #104]	; (7b4 <system_gclk_gen_get_hz+0x70>)
     74a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     74c:	b25b      	sxtb	r3, r3
     74e:	2b00      	cmp	r3, #0
     750:	dbfb      	blt.n	74a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     752:	4b19      	ldr	r3, [pc, #100]	; (7b8 <system_gclk_gen_get_hz+0x74>)
     754:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     756:	4b19      	ldr	r3, [pc, #100]	; (7bc <system_gclk_gen_get_hz+0x78>)
     758:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     75a:	4a16      	ldr	r2, [pc, #88]	; (7b4 <system_gclk_gen_get_hz+0x70>)
     75c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     75e:	b25b      	sxtb	r3, r3
     760:	2b00      	cmp	r3, #0
     762:	dbfb      	blt.n	75c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     764:	4e13      	ldr	r6, [pc, #76]	; (7b4 <system_gclk_gen_get_hz+0x70>)
     766:	6870      	ldr	r0, [r6, #4]
     768:	04c0      	lsls	r0, r0, #19
     76a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     76c:	4b14      	ldr	r3, [pc, #80]	; (7c0 <system_gclk_gen_get_hz+0x7c>)
     76e:	4798      	blx	r3
     770:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     772:	4b12      	ldr	r3, [pc, #72]	; (7bc <system_gclk_gen_get_hz+0x78>)
     774:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
     776:	6876      	ldr	r6, [r6, #4]
     778:	02f6      	lsls	r6, r6, #11
     77a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     77c:	4b11      	ldr	r3, [pc, #68]	; (7c4 <system_gclk_gen_get_hz+0x80>)
     77e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     780:	4a0c      	ldr	r2, [pc, #48]	; (7b4 <system_gclk_gen_get_hz+0x70>)
     782:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     784:	b25b      	sxtb	r3, r3
     786:	2b00      	cmp	r3, #0
     788:	dbfb      	blt.n	782 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
     78a:	4b0a      	ldr	r3, [pc, #40]	; (7b4 <system_gclk_gen_get_hz+0x70>)
     78c:	689c      	ldr	r4, [r3, #8]
     78e:	0224      	lsls	r4, r4, #8
     790:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
     792:	4b0d      	ldr	r3, [pc, #52]	; (7c8 <system_gclk_gen_get_hz+0x84>)
     794:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
     796:	2e00      	cmp	r6, #0
     798:	d107      	bne.n	7aa <system_gclk_gen_get_hz+0x66>
     79a:	2c01      	cmp	r4, #1
     79c:	d907      	bls.n	7ae <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
     79e:	0021      	movs	r1, r4
     7a0:	0028      	movs	r0, r5
     7a2:	4b0a      	ldr	r3, [pc, #40]	; (7cc <system_gclk_gen_get_hz+0x88>)
     7a4:	4798      	blx	r3
     7a6:	0005      	movs	r5, r0
     7a8:	e001      	b.n	7ae <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
     7aa:	3401      	adds	r4, #1
     7ac:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
     7ae:	0028      	movs	r0, r5
     7b0:	bd70      	pop	{r4, r5, r6, pc}
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	40000c00 	.word	0x40000c00
     7b8:	00000991 	.word	0x00000991
     7bc:	40000c04 	.word	0x40000c04
     7c0:	0000049d 	.word	0x0000049d
     7c4:	40000c08 	.word	0x40000c08
     7c8:	000009d1 	.word	0x000009d1
     7cc:	00001e81 	.word	0x00001e81

000007d0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     7d0:	b510      	push	{r4, lr}
     7d2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     7d4:	4b06      	ldr	r3, [pc, #24]	; (7f0 <system_gclk_chan_enable+0x20>)
     7d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     7d8:	4b06      	ldr	r3, [pc, #24]	; (7f4 <system_gclk_chan_enable+0x24>)
     7da:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     7dc:	4a06      	ldr	r2, [pc, #24]	; (7f8 <system_gclk_chan_enable+0x28>)
     7de:	8853      	ldrh	r3, [r2, #2]
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	01c9      	lsls	r1, r1, #7
     7e4:	430b      	orrs	r3, r1
     7e6:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
     7e8:	4b04      	ldr	r3, [pc, #16]	; (7fc <system_gclk_chan_enable+0x2c>)
     7ea:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     7ec:	bd10      	pop	{r4, pc}
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	00000991 	.word	0x00000991
     7f4:	40000c02 	.word	0x40000c02
     7f8:	40000c00 	.word	0x40000c00
     7fc:	000009d1 	.word	0x000009d1

00000800 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     800:	b510      	push	{r4, lr}
     802:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <system_gclk_chan_disable+0x44>)
     806:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     808:	4b0f      	ldr	r3, [pc, #60]	; (848 <system_gclk_chan_disable+0x48>)
     80a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     80c:	4a0f      	ldr	r2, [pc, #60]	; (84c <system_gclk_chan_disable+0x4c>)
     80e:	8853      	ldrh	r3, [r2, #2]
     810:	051b      	lsls	r3, r3, #20
     812:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     814:	8853      	ldrh	r3, [r2, #2]
     816:	490e      	ldr	r1, [pc, #56]	; (850 <system_gclk_chan_disable+0x50>)
     818:	400b      	ands	r3, r1
     81a:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     81c:	8853      	ldrh	r3, [r2, #2]
     81e:	490d      	ldr	r1, [pc, #52]	; (854 <system_gclk_chan_disable+0x54>)
     820:	400b      	ands	r3, r1
     822:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     824:	0011      	movs	r1, r2
     826:	2280      	movs	r2, #128	; 0x80
     828:	01d2      	lsls	r2, r2, #7
     82a:	884b      	ldrh	r3, [r1, #2]
     82c:	4213      	tst	r3, r2
     82e:	d1fc      	bne.n	82a <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     830:	4906      	ldr	r1, [pc, #24]	; (84c <system_gclk_chan_disable+0x4c>)
     832:	884a      	ldrh	r2, [r1, #2]
     834:	0203      	lsls	r3, r0, #8
     836:	4806      	ldr	r0, [pc, #24]	; (850 <system_gclk_chan_disable+0x50>)
     838:	4002      	ands	r2, r0
     83a:	4313      	orrs	r3, r2
     83c:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
     83e:	4b06      	ldr	r3, [pc, #24]	; (858 <system_gclk_chan_disable+0x58>)
     840:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     842:	bd10      	pop	{r4, pc}
     844:	00000991 	.word	0x00000991
     848:	40000c02 	.word	0x40000c02
     84c:	40000c00 	.word	0x40000c00
     850:	fffff0ff 	.word	0xfffff0ff
     854:	ffffbfff 	.word	0xffffbfff
     858:	000009d1 	.word	0x000009d1

0000085c <system_gclk_chan_set_config>:
{
     85c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     85e:	780c      	ldrb	r4, [r1, #0]
     860:	0224      	lsls	r4, r4, #8
     862:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
     864:	4b02      	ldr	r3, [pc, #8]	; (870 <system_gclk_chan_set_config+0x14>)
     866:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     868:	b2a4      	uxth	r4, r4
     86a:	4b02      	ldr	r3, [pc, #8]	; (874 <system_gclk_chan_set_config+0x18>)
     86c:	805c      	strh	r4, [r3, #2]
}
     86e:	bd10      	pop	{r4, pc}
     870:	00000801 	.word	0x00000801
     874:	40000c00 	.word	0x40000c00

00000878 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
     878:	b510      	push	{r4, lr}
     87a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
     87c:	4b06      	ldr	r3, [pc, #24]	; (898 <system_gclk_chan_get_hz+0x20>)
     87e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     880:	4b06      	ldr	r3, [pc, #24]	; (89c <system_gclk_chan_get_hz+0x24>)
     882:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
     884:	4b06      	ldr	r3, [pc, #24]	; (8a0 <system_gclk_chan_get_hz+0x28>)
     886:	885c      	ldrh	r4, [r3, #2]
     888:	0524      	lsls	r4, r4, #20
     88a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
     88c:	4b05      	ldr	r3, [pc, #20]	; (8a4 <system_gclk_chan_get_hz+0x2c>)
     88e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
     890:	0020      	movs	r0, r4
     892:	4b05      	ldr	r3, [pc, #20]	; (8a8 <system_gclk_chan_get_hz+0x30>)
     894:	4798      	blx	r3
}
     896:	bd10      	pop	{r4, pc}
     898:	00000991 	.word	0x00000991
     89c:	40000c02 	.word	0x40000c02
     8a0:	40000c00 	.word	0x40000c00
     8a4:	000009d1 	.word	0x000009d1
     8a8:	00000745 	.word	0x00000745

000008ac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
     8ac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
     8ae:	78d3      	ldrb	r3, [r2, #3]
     8b0:	2b00      	cmp	r3, #0
     8b2:	d135      	bne.n	920 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
     8b4:	7813      	ldrb	r3, [r2, #0]
     8b6:	2b80      	cmp	r3, #128	; 0x80
     8b8:	d029      	beq.n	90e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
     8ba:	061b      	lsls	r3, r3, #24
     8bc:	2480      	movs	r4, #128	; 0x80
     8be:	0264      	lsls	r4, r4, #9
     8c0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
     8c2:	7854      	ldrb	r4, [r2, #1]
     8c4:	2502      	movs	r5, #2
     8c6:	43ac      	bics	r4, r5
     8c8:	d106      	bne.n	8d8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
     8ca:	7894      	ldrb	r4, [r2, #2]
     8cc:	2c00      	cmp	r4, #0
     8ce:	d120      	bne.n	912 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
     8d0:	2480      	movs	r4, #128	; 0x80
     8d2:	02a4      	lsls	r4, r4, #10
     8d4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
     8d6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     8d8:	7854      	ldrb	r4, [r2, #1]
     8da:	3c01      	subs	r4, #1
     8dc:	2c01      	cmp	r4, #1
     8de:	d91c      	bls.n	91a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     8e0:	040d      	lsls	r5, r1, #16
     8e2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     8e4:	24a0      	movs	r4, #160	; 0xa0
     8e6:	05e4      	lsls	r4, r4, #23
     8e8:	432c      	orrs	r4, r5
     8ea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     8ec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     8ee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     8f0:	24d0      	movs	r4, #208	; 0xd0
     8f2:	0624      	lsls	r4, r4, #24
     8f4:	432c      	orrs	r4, r5
     8f6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     8f8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
     8fa:	78d4      	ldrb	r4, [r2, #3]
     8fc:	2c00      	cmp	r4, #0
     8fe:	d122      	bne.n	946 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
     900:	035b      	lsls	r3, r3, #13
     902:	d51c      	bpl.n	93e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
     904:	7893      	ldrb	r3, [r2, #2]
     906:	2b01      	cmp	r3, #1
     908:	d01e      	beq.n	948 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
     90a:	6141      	str	r1, [r0, #20]
     90c:	e017      	b.n	93e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
     90e:	2300      	movs	r3, #0
     910:	e7d7      	b.n	8c2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
     912:	24c0      	movs	r4, #192	; 0xc0
     914:	02e4      	lsls	r4, r4, #11
     916:	4323      	orrs	r3, r4
     918:	e7dd      	b.n	8d6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
     91a:	4c0d      	ldr	r4, [pc, #52]	; (950 <_system_pinmux_config+0xa4>)
     91c:	4023      	ands	r3, r4
     91e:	e7df      	b.n	8e0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
     920:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
     922:	040c      	lsls	r4, r1, #16
     924:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
     926:	23a0      	movs	r3, #160	; 0xa0
     928:	05db      	lsls	r3, r3, #23
     92a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     92c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
     92e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
     930:	23d0      	movs	r3, #208	; 0xd0
     932:	061b      	lsls	r3, r3, #24
     934:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
     936:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
     938:	78d3      	ldrb	r3, [r2, #3]
     93a:	2b00      	cmp	r3, #0
     93c:	d103      	bne.n	946 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
     93e:	7853      	ldrb	r3, [r2, #1]
     940:	3b01      	subs	r3, #1
     942:	2b01      	cmp	r3, #1
     944:	d902      	bls.n	94c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
     946:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
     948:	6181      	str	r1, [r0, #24]
     94a:	e7f8      	b.n	93e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
     94c:	6081      	str	r1, [r0, #8]
}
     94e:	e7fa      	b.n	946 <_system_pinmux_config+0x9a>
     950:	fffbffff 	.word	0xfffbffff

00000954 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
     954:	b510      	push	{r4, lr}
     956:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     958:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     95a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     95c:	2900      	cmp	r1, #0
     95e:	d104      	bne.n	96a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
     960:	0943      	lsrs	r3, r0, #5
     962:	01db      	lsls	r3, r3, #7
     964:	4905      	ldr	r1, [pc, #20]	; (97c <system_pinmux_pin_set_config+0x28>)
     966:	468c      	mov	ip, r1
     968:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
     96a:	241f      	movs	r4, #31
     96c:	4020      	ands	r0, r4
     96e:	2101      	movs	r1, #1
     970:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
     972:	0018      	movs	r0, r3
     974:	4b02      	ldr	r3, [pc, #8]	; (980 <system_pinmux_pin_set_config+0x2c>)
     976:	4798      	blx	r3
}
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	41004400 	.word	0x41004400
     980:	000008ad 	.word	0x000008ad

00000984 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     984:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     986:	4b01      	ldr	r3, [pc, #4]	; (98c <system_init+0x8>)
     988:	4798      	blx	r3
}
     98a:	bd10      	pop	{r4, pc}
     98c:	00000591 	.word	0x00000591

00000990 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     990:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <cpu_irq_enter_critical+0x34>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	2b00      	cmp	r3, #0
     996:	d106      	bne.n	9a6 <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     998:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     99c:	2b00      	cmp	r3, #0
     99e:	d007      	beq.n	9b0 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     9a0:	2200      	movs	r2, #0
     9a2:	4b09      	ldr	r3, [pc, #36]	; (9c8 <cpu_irq_enter_critical+0x38>)
     9a4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     9a6:	4a07      	ldr	r2, [pc, #28]	; (9c4 <cpu_irq_enter_critical+0x34>)
     9a8:	6813      	ldr	r3, [r2, #0]
     9aa:	3301      	adds	r3, #1
     9ac:	6013      	str	r3, [r2, #0]
}
     9ae:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     9b0:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     9b2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     9b6:	2200      	movs	r2, #0
     9b8:	4b04      	ldr	r3, [pc, #16]	; (9cc <cpu_irq_enter_critical+0x3c>)
     9ba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     9bc:	3201      	adds	r2, #1
     9be:	4b02      	ldr	r3, [pc, #8]	; (9c8 <cpu_irq_enter_critical+0x38>)
     9c0:	701a      	strb	r2, [r3, #0]
     9c2:	e7f0      	b.n	9a6 <cpu_irq_enter_critical+0x16>
     9c4:	20000164 	.word	0x20000164
     9c8:	20000168 	.word	0x20000168
     9cc:	20000004 	.word	0x20000004

000009d0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     9d0:	4b08      	ldr	r3, [pc, #32]	; (9f4 <cpu_irq_leave_critical+0x24>)
     9d2:	681a      	ldr	r2, [r3, #0]
     9d4:	3a01      	subs	r2, #1
     9d6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     9d8:	681b      	ldr	r3, [r3, #0]
     9da:	2b00      	cmp	r3, #0
     9dc:	d109      	bne.n	9f2 <cpu_irq_leave_critical+0x22>
     9de:	4b06      	ldr	r3, [pc, #24]	; (9f8 <cpu_irq_leave_critical+0x28>)
     9e0:	781b      	ldrb	r3, [r3, #0]
     9e2:	2b00      	cmp	r3, #0
     9e4:	d005      	beq.n	9f2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     9e6:	2201      	movs	r2, #1
     9e8:	4b04      	ldr	r3, [pc, #16]	; (9fc <cpu_irq_leave_critical+0x2c>)
     9ea:	701a      	strb	r2, [r3, #0]
     9ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     9f0:	b662      	cpsie	i
	}
}
     9f2:	4770      	bx	lr
     9f4:	20000164 	.word	0x20000164
     9f8:	20000168 	.word	0x20000168
     9fc:	20000004 	.word	0x20000004

00000a00 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     a00:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     a02:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a04:	2340      	movs	r3, #64	; 0x40
     a06:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     a08:	4281      	cmp	r1, r0
     a0a:	d202      	bcs.n	a12 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     a0c:	0018      	movs	r0, r3
     a0e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     a10:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     a12:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     a14:	1c63      	adds	r3, r4, #1
     a16:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     a18:	4288      	cmp	r0, r1
     a1a:	d9f9      	bls.n	a10 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a1c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     a1e:	2cff      	cmp	r4, #255	; 0xff
     a20:	d8f4      	bhi.n	a0c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     a22:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     a24:	2300      	movs	r3, #0
     a26:	e7f1      	b.n	a0c <_sercom_get_sync_baud_val+0xc>

00000a28 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     a28:	b5f0      	push	{r4, r5, r6, r7, lr}
     a2a:	46de      	mov	lr, fp
     a2c:	4657      	mov	r7, sl
     a2e:	464e      	mov	r6, r9
     a30:	4645      	mov	r5, r8
     a32:	b5e0      	push	{r5, r6, r7, lr}
     a34:	b089      	sub	sp, #36	; 0x24
     a36:	000c      	movs	r4, r1
     a38:	9205      	str	r2, [sp, #20]
     a3a:	aa12      	add	r2, sp, #72	; 0x48
     a3c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     a3e:	0005      	movs	r5, r0
     a40:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     a42:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     a44:	42a5      	cmp	r5, r4
     a46:	d907      	bls.n	a58 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     a48:	0010      	movs	r0, r2
     a4a:	b009      	add	sp, #36	; 0x24
     a4c:	bc3c      	pop	{r2, r3, r4, r5}
     a4e:	4690      	mov	r8, r2
     a50:	4699      	mov	r9, r3
     a52:	46a2      	mov	sl, r4
     a54:	46ab      	mov	fp, r5
     a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     a58:	2b00      	cmp	r3, #0
     a5a:	d155      	bne.n	b08 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     a5c:	0002      	movs	r2, r0
     a5e:	0008      	movs	r0, r1
     a60:	2100      	movs	r1, #0
     a62:	4d63      	ldr	r5, [pc, #396]	; (bf0 <_sercom_get_async_baud_val+0x1c8>)
     a64:	47a8      	blx	r5
     a66:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     a68:	0026      	movs	r6, r4
     a6a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     a6c:	2300      	movs	r3, #0
     a6e:	2400      	movs	r4, #0
     a70:	9300      	str	r3, [sp, #0]
     a72:	9401      	str	r4, [sp, #4]
     a74:	2200      	movs	r2, #0
     a76:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     a78:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     a7a:	2120      	movs	r1, #32
     a7c:	468c      	mov	ip, r1
     a7e:	391f      	subs	r1, #31
     a80:	9602      	str	r6, [sp, #8]
     a82:	9703      	str	r7, [sp, #12]
     a84:	e014      	b.n	ab0 <_sercom_get_async_baud_val+0x88>
     a86:	4664      	mov	r4, ip
     a88:	1a24      	subs	r4, r4, r0
     a8a:	000d      	movs	r5, r1
     a8c:	40e5      	lsrs	r5, r4
     a8e:	46a8      	mov	r8, r5
     a90:	e015      	b.n	abe <_sercom_get_async_baud_val+0x96>
			r = r - d;
     a92:	9c02      	ldr	r4, [sp, #8]
     a94:	9d03      	ldr	r5, [sp, #12]
     a96:	1b12      	subs	r2, r2, r4
     a98:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     a9a:	464d      	mov	r5, r9
     a9c:	9e00      	ldr	r6, [sp, #0]
     a9e:	9f01      	ldr	r7, [sp, #4]
     aa0:	4335      	orrs	r5, r6
     aa2:	003c      	movs	r4, r7
     aa4:	4646      	mov	r6, r8
     aa6:	4334      	orrs	r4, r6
     aa8:	9500      	str	r5, [sp, #0]
     aaa:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     aac:	3801      	subs	r0, #1
     aae:	d31d      	bcc.n	aec <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     ab0:	2420      	movs	r4, #32
     ab2:	4264      	negs	r4, r4
     ab4:	1904      	adds	r4, r0, r4
     ab6:	d4e6      	bmi.n	a86 <_sercom_get_async_baud_val+0x5e>
     ab8:	000d      	movs	r5, r1
     aba:	40a5      	lsls	r5, r4
     abc:	46a8      	mov	r8, r5
     abe:	000c      	movs	r4, r1
     ac0:	4084      	lsls	r4, r0
     ac2:	46a1      	mov	r9, r4
		r = r << 1;
     ac4:	1892      	adds	r2, r2, r2
     ac6:	415b      	adcs	r3, r3
     ac8:	0014      	movs	r4, r2
     aca:	001d      	movs	r5, r3
		if (n & bit_shift) {
     acc:	4646      	mov	r6, r8
     ace:	465f      	mov	r7, fp
     ad0:	423e      	tst	r6, r7
     ad2:	d003      	beq.n	adc <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     ad4:	000e      	movs	r6, r1
     ad6:	4326      	orrs	r6, r4
     ad8:	0032      	movs	r2, r6
     ada:	002b      	movs	r3, r5
		if (r >= d) {
     adc:	9c02      	ldr	r4, [sp, #8]
     ade:	9d03      	ldr	r5, [sp, #12]
     ae0:	429d      	cmp	r5, r3
     ae2:	d8e3      	bhi.n	aac <_sercom_get_async_baud_val+0x84>
     ae4:	d1d5      	bne.n	a92 <_sercom_get_async_baud_val+0x6a>
     ae6:	4294      	cmp	r4, r2
     ae8:	d8e0      	bhi.n	aac <_sercom_get_async_baud_val+0x84>
     aea:	e7d2      	b.n	a92 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     aec:	2200      	movs	r2, #0
     aee:	2301      	movs	r3, #1
     af0:	9800      	ldr	r0, [sp, #0]
     af2:	9901      	ldr	r1, [sp, #4]
     af4:	1a12      	subs	r2, r2, r0
     af6:	418b      	sbcs	r3, r1
     af8:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     afa:	0c13      	lsrs	r3, r2, #16
     afc:	040a      	lsls	r2, r1, #16
     afe:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     b00:	9b05      	ldr	r3, [sp, #20]
     b02:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     b04:	2200      	movs	r2, #0
     b06:	e79f      	b.n	a48 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     b08:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     b0a:	2b01      	cmp	r3, #1
     b0c:	d1f8      	bne.n	b00 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     b0e:	0f63      	lsrs	r3, r4, #29
     b10:	9304      	str	r3, [sp, #16]
     b12:	00e3      	lsls	r3, r4, #3
     b14:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     b16:	000a      	movs	r2, r1
     b18:	2300      	movs	r3, #0
     b1a:	2100      	movs	r1, #0
     b1c:	4c34      	ldr	r4, [pc, #208]	; (bf0 <_sercom_get_async_baud_val+0x1c8>)
     b1e:	47a0      	blx	r4
     b20:	0004      	movs	r4, r0
     b22:	000d      	movs	r5, r1
     b24:	2300      	movs	r3, #0
     b26:	469c      	mov	ip, r3
     b28:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     b2a:	3320      	adds	r3, #32
     b2c:	469b      	mov	fp, r3
     b2e:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     b30:	4663      	mov	r3, ip
     b32:	9307      	str	r3, [sp, #28]
     b34:	e048      	b.n	bc8 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     b36:	4659      	mov	r1, fp
     b38:	1bc9      	subs	r1, r1, r7
     b3a:	0030      	movs	r0, r6
     b3c:	40c8      	lsrs	r0, r1
     b3e:	4682      	mov	sl, r0
     b40:	e010      	b.n	b64 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     b42:	9800      	ldr	r0, [sp, #0]
     b44:	9901      	ldr	r1, [sp, #4]
     b46:	1a12      	subs	r2, r2, r0
     b48:	418b      	sbcs	r3, r1
			q |= bit_shift;
     b4a:	9902      	ldr	r1, [sp, #8]
     b4c:	4648      	mov	r0, r9
     b4e:	4301      	orrs	r1, r0
     b50:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     b52:	3f01      	subs	r7, #1
     b54:	d325      	bcc.n	ba2 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     b56:	2120      	movs	r1, #32
     b58:	4249      	negs	r1, r1
     b5a:	1879      	adds	r1, r7, r1
     b5c:	d4eb      	bmi.n	b36 <_sercom_get_async_baud_val+0x10e>
     b5e:	0030      	movs	r0, r6
     b60:	4088      	lsls	r0, r1
     b62:	4682      	mov	sl, r0
     b64:	0031      	movs	r1, r6
     b66:	40b9      	lsls	r1, r7
     b68:	4689      	mov	r9, r1
		r = r << 1;
     b6a:	1892      	adds	r2, r2, r2
     b6c:	415b      	adcs	r3, r3
     b6e:	0010      	movs	r0, r2
     b70:	0019      	movs	r1, r3
		if (n & bit_shift) {
     b72:	4644      	mov	r4, r8
     b74:	464d      	mov	r5, r9
     b76:	402c      	ands	r4, r5
     b78:	46a4      	mov	ip, r4
     b7a:	4654      	mov	r4, sl
     b7c:	9d04      	ldr	r5, [sp, #16]
     b7e:	402c      	ands	r4, r5
     b80:	46a2      	mov	sl, r4
     b82:	4664      	mov	r4, ip
     b84:	4655      	mov	r5, sl
     b86:	432c      	orrs	r4, r5
     b88:	d003      	beq.n	b92 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     b8a:	0034      	movs	r4, r6
     b8c:	4304      	orrs	r4, r0
     b8e:	0022      	movs	r2, r4
     b90:	000b      	movs	r3, r1
		if (r >= d) {
     b92:	9800      	ldr	r0, [sp, #0]
     b94:	9901      	ldr	r1, [sp, #4]
     b96:	4299      	cmp	r1, r3
     b98:	d8db      	bhi.n	b52 <_sercom_get_async_baud_val+0x12a>
     b9a:	d1d2      	bne.n	b42 <_sercom_get_async_baud_val+0x11a>
     b9c:	4290      	cmp	r0, r2
     b9e:	d8d8      	bhi.n	b52 <_sercom_get_async_baud_val+0x12a>
     ba0:	e7cf      	b.n	b42 <_sercom_get_async_baud_val+0x11a>
     ba2:	9c00      	ldr	r4, [sp, #0]
     ba4:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     ba6:	9902      	ldr	r1, [sp, #8]
     ba8:	9a07      	ldr	r2, [sp, #28]
     baa:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     bac:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     bae:	4911      	ldr	r1, [pc, #68]	; (bf4 <_sercom_get_async_baud_val+0x1cc>)
     bb0:	428b      	cmp	r3, r1
     bb2:	d914      	bls.n	bde <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     bb4:	9b06      	ldr	r3, [sp, #24]
     bb6:	3301      	adds	r3, #1
     bb8:	b2db      	uxtb	r3, r3
     bba:	0019      	movs	r1, r3
     bbc:	9306      	str	r3, [sp, #24]
     bbe:	0013      	movs	r3, r2
     bc0:	3301      	adds	r3, #1
     bc2:	9307      	str	r3, [sp, #28]
     bc4:	2908      	cmp	r1, #8
     bc6:	d008      	beq.n	bda <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     bc8:	2300      	movs	r3, #0
     bca:	9302      	str	r3, [sp, #8]
     bcc:	2200      	movs	r2, #0
     bce:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     bd0:	213f      	movs	r1, #63	; 0x3f
     bd2:	9400      	str	r4, [sp, #0]
     bd4:	9501      	str	r5, [sp, #4]
     bd6:	000f      	movs	r7, r1
     bd8:	e7bd      	b.n	b56 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     bda:	2240      	movs	r2, #64	; 0x40
     bdc:	e734      	b.n	a48 <_sercom_get_async_baud_val+0x20>
     bde:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     be0:	9906      	ldr	r1, [sp, #24]
     be2:	2908      	cmp	r1, #8
     be4:	d100      	bne.n	be8 <_sercom_get_async_baud_val+0x1c0>
     be6:	e72f      	b.n	a48 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     be8:	034a      	lsls	r2, r1, #13
     bea:	431a      	orrs	r2, r3
     bec:	e788      	b.n	b00 <_sercom_get_async_baud_val+0xd8>
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	00001f99 	.word	0x00001f99
     bf4:	00001fff 	.word	0x00001fff

00000bf8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     bf8:	b510      	push	{r4, lr}
     bfa:	b082      	sub	sp, #8
     bfc:	0004      	movs	r4, r0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     bfe:	4b0e      	ldr	r3, [pc, #56]	; (c38 <sercom_set_gclk_generator+0x40>)
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	2b00      	cmp	r3, #0
     c04:	d007      	beq.n	c16 <sercom_set_gclk_generator+0x1e>
     c06:	2900      	cmp	r1, #0
     c08:	d105      	bne.n	c16 <sercom_set_gclk_generator+0x1e>
		/* Save config. */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     c0a:	4b0b      	ldr	r3, [pc, #44]	; (c38 <sercom_set_gclk_generator+0x40>)
     c0c:	785b      	ldrb	r3, [r3, #1]
     c0e:	4283      	cmp	r3, r0
     c10:	d010      	beq.n	c34 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     c12:	201d      	movs	r0, #29
     c14:	e00c      	b.n	c30 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     c16:	a901      	add	r1, sp, #4
     c18:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     c1a:	2013      	movs	r0, #19
     c1c:	4b07      	ldr	r3, [pc, #28]	; (c3c <sercom_set_gclk_generator+0x44>)
     c1e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     c20:	2013      	movs	r0, #19
     c22:	4b07      	ldr	r3, [pc, #28]	; (c40 <sercom_set_gclk_generator+0x48>)
     c24:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     c26:	4b04      	ldr	r3, [pc, #16]	; (c38 <sercom_set_gclk_generator+0x40>)
     c28:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     c2a:	2201      	movs	r2, #1
     c2c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     c2e:	2000      	movs	r0, #0
}
     c30:	b002      	add	sp, #8
     c32:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     c34:	2000      	movs	r0, #0
     c36:	e7fb      	b.n	c30 <sercom_set_gclk_generator+0x38>
     c38:	2000016c 	.word	0x2000016c
     c3c:	0000085d 	.word	0x0000085d
     c40:	000007d1 	.word	0x000007d1

00000c44 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     c44:	4b40      	ldr	r3, [pc, #256]	; (d48 <_sercom_get_default_pad+0x104>)
     c46:	4298      	cmp	r0, r3
     c48:	d031      	beq.n	cae <_sercom_get_default_pad+0x6a>
     c4a:	d90a      	bls.n	c62 <_sercom_get_default_pad+0x1e>
     c4c:	4b3f      	ldr	r3, [pc, #252]	; (d4c <_sercom_get_default_pad+0x108>)
     c4e:	4298      	cmp	r0, r3
     c50:	d04d      	beq.n	cee <_sercom_get_default_pad+0xaa>
     c52:	4b3f      	ldr	r3, [pc, #252]	; (d50 <_sercom_get_default_pad+0x10c>)
     c54:	4298      	cmp	r0, r3
     c56:	d05a      	beq.n	d0e <_sercom_get_default_pad+0xca>
     c58:	4b3e      	ldr	r3, [pc, #248]	; (d54 <_sercom_get_default_pad+0x110>)
     c5a:	4298      	cmp	r0, r3
     c5c:	d037      	beq.n	cce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     c5e:	2000      	movs	r0, #0
}
     c60:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     c62:	4b3d      	ldr	r3, [pc, #244]	; (d58 <_sercom_get_default_pad+0x114>)
     c64:	4298      	cmp	r0, r3
     c66:	d00c      	beq.n	c82 <_sercom_get_default_pad+0x3e>
     c68:	4b3c      	ldr	r3, [pc, #240]	; (d5c <_sercom_get_default_pad+0x118>)
     c6a:	4298      	cmp	r0, r3
     c6c:	d1f7      	bne.n	c5e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c6e:	2901      	cmp	r1, #1
     c70:	d017      	beq.n	ca2 <_sercom_get_default_pad+0x5e>
     c72:	2900      	cmp	r1, #0
     c74:	d05d      	beq.n	d32 <_sercom_get_default_pad+0xee>
     c76:	2902      	cmp	r1, #2
     c78:	d015      	beq.n	ca6 <_sercom_get_default_pad+0x62>
     c7a:	2903      	cmp	r1, #3
     c7c:	d015      	beq.n	caa <_sercom_get_default_pad+0x66>
	return 0;
     c7e:	2000      	movs	r0, #0
     c80:	e7ee      	b.n	c60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c82:	2901      	cmp	r1, #1
     c84:	d007      	beq.n	c96 <_sercom_get_default_pad+0x52>
     c86:	2900      	cmp	r1, #0
     c88:	d051      	beq.n	d2e <_sercom_get_default_pad+0xea>
     c8a:	2902      	cmp	r1, #2
     c8c:	d005      	beq.n	c9a <_sercom_get_default_pad+0x56>
     c8e:	2903      	cmp	r1, #3
     c90:	d005      	beq.n	c9e <_sercom_get_default_pad+0x5a>
	return 0;
     c92:	2000      	movs	r0, #0
     c94:	e7e4      	b.n	c60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     c96:	4832      	ldr	r0, [pc, #200]	; (d60 <_sercom_get_default_pad+0x11c>)
     c98:	e7e2      	b.n	c60 <_sercom_get_default_pad+0x1c>
     c9a:	4832      	ldr	r0, [pc, #200]	; (d64 <_sercom_get_default_pad+0x120>)
     c9c:	e7e0      	b.n	c60 <_sercom_get_default_pad+0x1c>
     c9e:	4832      	ldr	r0, [pc, #200]	; (d68 <_sercom_get_default_pad+0x124>)
     ca0:	e7de      	b.n	c60 <_sercom_get_default_pad+0x1c>
     ca2:	4832      	ldr	r0, [pc, #200]	; (d6c <_sercom_get_default_pad+0x128>)
     ca4:	e7dc      	b.n	c60 <_sercom_get_default_pad+0x1c>
     ca6:	4832      	ldr	r0, [pc, #200]	; (d70 <_sercom_get_default_pad+0x12c>)
     ca8:	e7da      	b.n	c60 <_sercom_get_default_pad+0x1c>
     caa:	4832      	ldr	r0, [pc, #200]	; (d74 <_sercom_get_default_pad+0x130>)
     cac:	e7d8      	b.n	c60 <_sercom_get_default_pad+0x1c>
     cae:	2901      	cmp	r1, #1
     cb0:	d007      	beq.n	cc2 <_sercom_get_default_pad+0x7e>
     cb2:	2900      	cmp	r1, #0
     cb4:	d03f      	beq.n	d36 <_sercom_get_default_pad+0xf2>
     cb6:	2902      	cmp	r1, #2
     cb8:	d005      	beq.n	cc6 <_sercom_get_default_pad+0x82>
     cba:	2903      	cmp	r1, #3
     cbc:	d005      	beq.n	cca <_sercom_get_default_pad+0x86>
	return 0;
     cbe:	2000      	movs	r0, #0
     cc0:	e7ce      	b.n	c60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     cc2:	482d      	ldr	r0, [pc, #180]	; (d78 <_sercom_get_default_pad+0x134>)
     cc4:	e7cc      	b.n	c60 <_sercom_get_default_pad+0x1c>
     cc6:	482d      	ldr	r0, [pc, #180]	; (d7c <_sercom_get_default_pad+0x138>)
     cc8:	e7ca      	b.n	c60 <_sercom_get_default_pad+0x1c>
     cca:	482d      	ldr	r0, [pc, #180]	; (d80 <_sercom_get_default_pad+0x13c>)
     ccc:	e7c8      	b.n	c60 <_sercom_get_default_pad+0x1c>
     cce:	2901      	cmp	r1, #1
     cd0:	d007      	beq.n	ce2 <_sercom_get_default_pad+0x9e>
     cd2:	2900      	cmp	r1, #0
     cd4:	d031      	beq.n	d3a <_sercom_get_default_pad+0xf6>
     cd6:	2902      	cmp	r1, #2
     cd8:	d005      	beq.n	ce6 <_sercom_get_default_pad+0xa2>
     cda:	2903      	cmp	r1, #3
     cdc:	d005      	beq.n	cea <_sercom_get_default_pad+0xa6>
	return 0;
     cde:	2000      	movs	r0, #0
     ce0:	e7be      	b.n	c60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     ce2:	4828      	ldr	r0, [pc, #160]	; (d84 <_sercom_get_default_pad+0x140>)
     ce4:	e7bc      	b.n	c60 <_sercom_get_default_pad+0x1c>
     ce6:	4828      	ldr	r0, [pc, #160]	; (d88 <_sercom_get_default_pad+0x144>)
     ce8:	e7ba      	b.n	c60 <_sercom_get_default_pad+0x1c>
     cea:	4828      	ldr	r0, [pc, #160]	; (d8c <_sercom_get_default_pad+0x148>)
     cec:	e7b8      	b.n	c60 <_sercom_get_default_pad+0x1c>
     cee:	2901      	cmp	r1, #1
     cf0:	d007      	beq.n	d02 <_sercom_get_default_pad+0xbe>
     cf2:	2900      	cmp	r1, #0
     cf4:	d023      	beq.n	d3e <_sercom_get_default_pad+0xfa>
     cf6:	2902      	cmp	r1, #2
     cf8:	d005      	beq.n	d06 <_sercom_get_default_pad+0xc2>
     cfa:	2903      	cmp	r1, #3
     cfc:	d005      	beq.n	d0a <_sercom_get_default_pad+0xc6>
	return 0;
     cfe:	2000      	movs	r0, #0
     d00:	e7ae      	b.n	c60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d02:	4823      	ldr	r0, [pc, #140]	; (d90 <_sercom_get_default_pad+0x14c>)
     d04:	e7ac      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d06:	4823      	ldr	r0, [pc, #140]	; (d94 <_sercom_get_default_pad+0x150>)
     d08:	e7aa      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d0a:	4823      	ldr	r0, [pc, #140]	; (d98 <_sercom_get_default_pad+0x154>)
     d0c:	e7a8      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d0e:	2901      	cmp	r1, #1
     d10:	d007      	beq.n	d22 <_sercom_get_default_pad+0xde>
     d12:	2900      	cmp	r1, #0
     d14:	d015      	beq.n	d42 <_sercom_get_default_pad+0xfe>
     d16:	2902      	cmp	r1, #2
     d18:	d005      	beq.n	d26 <_sercom_get_default_pad+0xe2>
     d1a:	2903      	cmp	r1, #3
     d1c:	d005      	beq.n	d2a <_sercom_get_default_pad+0xe6>
	return 0;
     d1e:	2000      	movs	r0, #0
     d20:	e79e      	b.n	c60 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     d22:	481e      	ldr	r0, [pc, #120]	; (d9c <_sercom_get_default_pad+0x158>)
     d24:	e79c      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d26:	481e      	ldr	r0, [pc, #120]	; (da0 <_sercom_get_default_pad+0x15c>)
     d28:	e79a      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d2a:	481e      	ldr	r0, [pc, #120]	; (da4 <_sercom_get_default_pad+0x160>)
     d2c:	e798      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d2e:	481e      	ldr	r0, [pc, #120]	; (da8 <_sercom_get_default_pad+0x164>)
     d30:	e796      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d32:	2003      	movs	r0, #3
     d34:	e794      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d36:	481d      	ldr	r0, [pc, #116]	; (dac <_sercom_get_default_pad+0x168>)
     d38:	e792      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d3a:	481d      	ldr	r0, [pc, #116]	; (db0 <_sercom_get_default_pad+0x16c>)
     d3c:	e790      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d3e:	481d      	ldr	r0, [pc, #116]	; (db4 <_sercom_get_default_pad+0x170>)
     d40:	e78e      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d42:	481d      	ldr	r0, [pc, #116]	; (db8 <_sercom_get_default_pad+0x174>)
     d44:	e78c      	b.n	c60 <_sercom_get_default_pad+0x1c>
     d46:	46c0      	nop			; (mov r8, r8)
     d48:	42001000 	.word	0x42001000
     d4c:	42001800 	.word	0x42001800
     d50:	42001c00 	.word	0x42001c00
     d54:	42001400 	.word	0x42001400
     d58:	42000800 	.word	0x42000800
     d5c:	42000c00 	.word	0x42000c00
     d60:	00050003 	.word	0x00050003
     d64:	00060003 	.word	0x00060003
     d68:	00070003 	.word	0x00070003
     d6c:	00010003 	.word	0x00010003
     d70:	001e0003 	.word	0x001e0003
     d74:	001f0003 	.word	0x001f0003
     d78:	00090003 	.word	0x00090003
     d7c:	000a0003 	.word	0x000a0003
     d80:	000b0003 	.word	0x000b0003
     d84:	00110003 	.word	0x00110003
     d88:	00120003 	.word	0x00120003
     d8c:	00130003 	.word	0x00130003
     d90:	000d0003 	.word	0x000d0003
     d94:	000e0003 	.word	0x000e0003
     d98:	000f0003 	.word	0x000f0003
     d9c:	00170003 	.word	0x00170003
     da0:	00180003 	.word	0x00180003
     da4:	00190003 	.word	0x00190003
     da8:	00040003 	.word	0x00040003
     dac:	00080003 	.word	0x00080003
     db0:	00100003 	.word	0x00100003
     db4:	000c0003 	.word	0x000c0003
     db8:	00160003 	.word	0x00160003

00000dbc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     dbc:	b530      	push	{r4, r5, lr}
     dbe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     dc0:	4b0b      	ldr	r3, [pc, #44]	; (df0 <_sercom_get_sercom_inst_index+0x34>)
     dc2:	466a      	mov	r2, sp
     dc4:	cb32      	ldmia	r3!, {r1, r4, r5}
     dc6:	c232      	stmia	r2!, {r1, r4, r5}
     dc8:	cb32      	ldmia	r3!, {r1, r4, r5}
     dca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     dcc:	9b00      	ldr	r3, [sp, #0]
     dce:	4283      	cmp	r3, r0
     dd0:	d00b      	beq.n	dea <_sercom_get_sercom_inst_index+0x2e>
     dd2:	2301      	movs	r3, #1
     dd4:	009a      	lsls	r2, r3, #2
     dd6:	4669      	mov	r1, sp
     dd8:	5852      	ldr	r2, [r2, r1]
     dda:	4282      	cmp	r2, r0
     ddc:	d006      	beq.n	dec <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dde:	3301      	adds	r3, #1
     de0:	2b06      	cmp	r3, #6
     de2:	d1f7      	bne.n	dd4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     de4:	2000      	movs	r0, #0
}
     de6:	b007      	add	sp, #28
     de8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     dea:	2300      	movs	r3, #0
			return i;
     dec:	b2d8      	uxtb	r0, r3
     dee:	e7fa      	b.n	de6 <_sercom_get_sercom_inst_index+0x2a>
     df0:	00002294 	.word	0x00002294

00000df4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     df4:	4770      	bx	lr
	...

00000df8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     dfa:	4b0a      	ldr	r3, [pc, #40]	; (e24 <_sercom_set_handler+0x2c>)
     dfc:	781b      	ldrb	r3, [r3, #0]
     dfe:	2b00      	cmp	r3, #0
     e00:	d10c      	bne.n	e1c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e02:	4f09      	ldr	r7, [pc, #36]	; (e28 <_sercom_set_handler+0x30>)
     e04:	4e09      	ldr	r6, [pc, #36]	; (e2c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     e06:	4d0a      	ldr	r5, [pc, #40]	; (e30 <_sercom_set_handler+0x38>)
     e08:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     e0a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     e0c:	195a      	adds	r2, r3, r5
     e0e:	6014      	str	r4, [r2, #0]
     e10:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     e12:	2b18      	cmp	r3, #24
     e14:	d1f9      	bne.n	e0a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     e16:	2201      	movs	r2, #1
     e18:	4b02      	ldr	r3, [pc, #8]	; (e24 <_sercom_set_handler+0x2c>)
     e1a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     e1c:	0080      	lsls	r0, r0, #2
     e1e:	4b02      	ldr	r3, [pc, #8]	; (e28 <_sercom_set_handler+0x30>)
     e20:	50c1      	str	r1, [r0, r3]
}
     e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e24:	2000016e 	.word	0x2000016e
     e28:	20000170 	.word	0x20000170
     e2c:	00000df5 	.word	0x00000df5
     e30:	200001d8 	.word	0x200001d8

00000e34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     e34:	b500      	push	{lr}
     e36:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     e38:	2309      	movs	r3, #9
     e3a:	466a      	mov	r2, sp
     e3c:	7013      	strb	r3, [r2, #0]
     e3e:	3301      	adds	r3, #1
     e40:	7053      	strb	r3, [r2, #1]
     e42:	3301      	adds	r3, #1
     e44:	7093      	strb	r3, [r2, #2]
     e46:	3301      	adds	r3, #1
     e48:	70d3      	strb	r3, [r2, #3]
     e4a:	3301      	adds	r3, #1
     e4c:	7113      	strb	r3, [r2, #4]
     e4e:	3301      	adds	r3, #1
     e50:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     e52:	4b03      	ldr	r3, [pc, #12]	; (e60 <_sercom_get_interrupt_vector+0x2c>)
     e54:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     e56:	466b      	mov	r3, sp
     e58:	5618      	ldrsb	r0, [r3, r0]
}
     e5a:	b003      	add	sp, #12
     e5c:	bd00      	pop	{pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	00000dbd 	.word	0x00000dbd

00000e64 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e64:	b510      	push	{r4, lr}
     e66:	4b02      	ldr	r3, [pc, #8]	; (e70 <SERCOM0_Handler+0xc>)
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	2000      	movs	r0, #0
     e6c:	4798      	blx	r3
     e6e:	bd10      	pop	{r4, pc}
     e70:	20000170 	.word	0x20000170

00000e74 <SERCOM1_Handler>:
     e74:	b510      	push	{r4, lr}
     e76:	4b02      	ldr	r3, [pc, #8]	; (e80 <SERCOM1_Handler+0xc>)
     e78:	685b      	ldr	r3, [r3, #4]
     e7a:	2001      	movs	r0, #1
     e7c:	4798      	blx	r3
     e7e:	bd10      	pop	{r4, pc}
     e80:	20000170 	.word	0x20000170

00000e84 <SERCOM2_Handler>:
     e84:	b510      	push	{r4, lr}
     e86:	4b02      	ldr	r3, [pc, #8]	; (e90 <SERCOM2_Handler+0xc>)
     e88:	689b      	ldr	r3, [r3, #8]
     e8a:	2002      	movs	r0, #2
     e8c:	4798      	blx	r3
     e8e:	bd10      	pop	{r4, pc}
     e90:	20000170 	.word	0x20000170

00000e94 <SERCOM3_Handler>:
     e94:	b510      	push	{r4, lr}
     e96:	4b02      	ldr	r3, [pc, #8]	; (ea0 <SERCOM3_Handler+0xc>)
     e98:	68db      	ldr	r3, [r3, #12]
     e9a:	2003      	movs	r0, #3
     e9c:	4798      	blx	r3
     e9e:	bd10      	pop	{r4, pc}
     ea0:	20000170 	.word	0x20000170

00000ea4 <SERCOM4_Handler>:
     ea4:	b510      	push	{r4, lr}
     ea6:	4b02      	ldr	r3, [pc, #8]	; (eb0 <SERCOM4_Handler+0xc>)
     ea8:	691b      	ldr	r3, [r3, #16]
     eaa:	2004      	movs	r0, #4
     eac:	4798      	blx	r3
     eae:	bd10      	pop	{r4, pc}
     eb0:	20000170 	.word	0x20000170

00000eb4 <SERCOM5_Handler>:
     eb4:	b510      	push	{r4, lr}
     eb6:	4b02      	ldr	r3, [pc, #8]	; (ec0 <SERCOM5_Handler+0xc>)
     eb8:	695b      	ldr	r3, [r3, #20]
     eba:	2005      	movs	r0, #5
     ebc:	4798      	blx	r3
     ebe:	bd10      	pop	{r4, pc}
     ec0:	20000170 	.word	0x20000170

00000ec4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ec6:	46de      	mov	lr, fp
     ec8:	4657      	mov	r7, sl
     eca:	464e      	mov	r6, r9
     ecc:	4645      	mov	r5, r8
     ece:	b5e0      	push	{r5, r6, r7, lr}
     ed0:	b091      	sub	sp, #68	; 0x44
     ed2:	0005      	movs	r5, r0
     ed4:	000c      	movs	r4, r1
     ed6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     ed8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     eda:	0008      	movs	r0, r1
     edc:	4bbe      	ldr	r3, [pc, #760]	; (11d8 <usart_init+0x314>)
     ede:	4798      	blx	r3
     ee0:	0002      	movs	r2, r0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ee2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     ee4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     ee6:	07db      	lsls	r3, r3, #31
     ee8:	d506      	bpl.n	ef8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     eea:	b011      	add	sp, #68	; 0x44
     eec:	bc3c      	pop	{r2, r3, r4, r5}
     eee:	4690      	mov	r8, r2
     ef0:	4699      	mov	r9, r3
     ef2:	46a2      	mov	sl, r4
     ef4:	46ab      	mov	fp, r5
     ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     ef8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     efa:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     efc:	079b      	lsls	r3, r3, #30
     efe:	d4f4      	bmi.n	eea <usart_init+0x26>
			PM->APBCMASK.reg |= mask;
     f00:	49b6      	ldr	r1, [pc, #728]	; (11dc <usart_init+0x318>)
     f02:	6a08      	ldr	r0, [r1, #32]
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     f04:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     f06:	2301      	movs	r3, #1
     f08:	40bb      	lsls	r3, r7
     f0a:	4303      	orrs	r3, r0
     f0c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     f0e:	a90f      	add	r1, sp, #60	; 0x3c
     f10:	272d      	movs	r7, #45	; 0x2d
     f12:	5df3      	ldrb	r3, [r6, r7]
     f14:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f16:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     f18:	b2d3      	uxtb	r3, r2
     f1a:	9303      	str	r3, [sp, #12]
     f1c:	0018      	movs	r0, r3
     f1e:	4bb0      	ldr	r3, [pc, #704]	; (11e0 <usart_init+0x31c>)
     f20:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     f22:	9803      	ldr	r0, [sp, #12]
     f24:	4baf      	ldr	r3, [pc, #700]	; (11e4 <usart_init+0x320>)
     f26:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     f28:	5df0      	ldrb	r0, [r6, r7]
     f2a:	2100      	movs	r1, #0
     f2c:	4bae      	ldr	r3, [pc, #696]	; (11e8 <usart_init+0x324>)
     f2e:	4798      	blx	r3
	module->character_size = config->character_size;
     f30:	7af3      	ldrb	r3, [r6, #11]
     f32:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     f34:	2324      	movs	r3, #36	; 0x24
     f36:	5cf3      	ldrb	r3, [r6, r3]
     f38:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     f3a:	2325      	movs	r3, #37	; 0x25
     f3c:	5cf3      	ldrb	r3, [r6, r3]
     f3e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     f40:	7ef3      	ldrb	r3, [r6, #27]
     f42:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     f44:	7f33      	ldrb	r3, [r6, #28]
     f46:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     f48:	682b      	ldr	r3, [r5, #0]
     f4a:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     f4c:	0018      	movs	r0, r3
     f4e:	4ba2      	ldr	r3, [pc, #648]	; (11d8 <usart_init+0x314>)
     f50:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     f52:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     f54:	2200      	movs	r2, #0
     f56:	230e      	movs	r3, #14
     f58:	a906      	add	r1, sp, #24
     f5a:	468c      	mov	ip, r1
     f5c:	4463      	add	r3, ip
     f5e:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     f60:	8a33      	ldrh	r3, [r6, #16]
     f62:	4698      	mov	r8, r3
     f64:	2380      	movs	r3, #128	; 0x80
     f66:	01db      	lsls	r3, r3, #7
     f68:	4598      	cmp	r8, r3
     f6a:	d100      	bne.n	f6e <usart_init+0xaa>
     f6c:	e09f      	b.n	10ae <usart_init+0x1ea>
     f6e:	d90e      	bls.n	f8e <usart_init+0xca>
     f70:	23c0      	movs	r3, #192	; 0xc0
     f72:	01db      	lsls	r3, r3, #7
     f74:	4598      	cmp	r8, r3
     f76:	d100      	bne.n	f7a <usart_init+0xb6>
     f78:	e094      	b.n	10a4 <usart_init+0x1e0>
     f7a:	2380      	movs	r3, #128	; 0x80
     f7c:	021b      	lsls	r3, r3, #8
     f7e:	4598      	cmp	r8, r3
     f80:	d000      	beq.n	f84 <usart_init+0xc0>
     f82:	e124      	b.n	11ce <usart_init+0x30a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     f84:	2303      	movs	r3, #3
     f86:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     f88:	2300      	movs	r3, #0
     f8a:	9307      	str	r3, [sp, #28]
     f8c:	e008      	b.n	fa0 <usart_init+0xdc>
	switch (config->sample_rate) {
     f8e:	2380      	movs	r3, #128	; 0x80
     f90:	019b      	lsls	r3, r3, #6
     f92:	4598      	cmp	r8, r3
     f94:	d000      	beq.n	f98 <usart_init+0xd4>
     f96:	e11a      	b.n	11ce <usart_init+0x30a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     f98:	2310      	movs	r3, #16
     f9a:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     f9c:	3b0f      	subs	r3, #15
     f9e:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     fa0:	6833      	ldr	r3, [r6, #0]
     fa2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     fa4:	68f3      	ldr	r3, [r6, #12]
     fa6:	4699      	mov	r9, r3
		config->sample_adjustment |
     fa8:	6973      	ldr	r3, [r6, #20]
     faa:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     fac:	7e33      	ldrb	r3, [r6, #24]
     fae:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     fb0:	2326      	movs	r3, #38	; 0x26
     fb2:	5cf3      	ldrb	r3, [r6, r3]
     fb4:	469a      	mov	sl, r3
	switch (config->transfer_mode)
     fb6:	6873      	ldr	r3, [r6, #4]
     fb8:	2b00      	cmp	r3, #0
     fba:	d100      	bne.n	fbe <usart_init+0xfa>
     fbc:	e0a2      	b.n	1104 <usart_init+0x240>
     fbe:	2280      	movs	r2, #128	; 0x80
     fc0:	0552      	lsls	r2, r2, #21
     fc2:	4293      	cmp	r3, r2
     fc4:	d100      	bne.n	fc8 <usart_init+0x104>
     fc6:	e086      	b.n	10d6 <usart_init+0x212>
	if(config->encoding_format_enable) {
     fc8:	7e73      	ldrb	r3, [r6, #25]
     fca:	2b00      	cmp	r3, #0
     fcc:	d002      	beq.n	fd4 <usart_init+0x110>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     fce:	7eb3      	ldrb	r3, [r6, #26]
     fd0:	9a03      	ldr	r2, [sp, #12]
     fd2:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     fd4:	682a      	ldr	r2, [r5, #0]
     fd6:	9f03      	ldr	r7, [sp, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     fd8:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     fda:	2b00      	cmp	r3, #0
     fdc:	d1fc      	bne.n	fd8 <usart_init+0x114>
     fde:	9703      	str	r7, [sp, #12]
	usart_hw->BAUD.reg = baud;
     fe0:	330e      	adds	r3, #14
     fe2:	a906      	add	r1, sp, #24
     fe4:	468c      	mov	ip, r1
     fe6:	4463      	add	r3, ip
     fe8:	881b      	ldrh	r3, [r3, #0]
     fea:	81bb      	strh	r3, [r7, #12]
	ctrla |= config->transfer_mode;
     fec:	9a05      	ldr	r2, [sp, #20]
     fee:	464b      	mov	r3, r9
     ff0:	431a      	orrs	r2, r3
     ff2:	465b      	mov	r3, fp
     ff4:	431a      	orrs	r2, r3
     ff6:	6873      	ldr	r3, [r6, #4]
     ff8:	431a      	orrs	r2, r3
     ffa:	4643      	mov	r3, r8
     ffc:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     ffe:	9b04      	ldr	r3, [sp, #16]
    1000:	021b      	lsls	r3, r3, #8
	ctrla |= config->transfer_mode;
    1002:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1004:	4653      	mov	r3, sl
    1006:	075b      	lsls	r3, r3, #29
	ctrla |= config->transfer_mode;
    1008:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    100a:	2327      	movs	r3, #39	; 0x27
    100c:	5cf3      	ldrb	r3, [r6, r3]
    100e:	2b00      	cmp	r3, #0
    1010:	d101      	bne.n	1016 <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1012:	3304      	adds	r3, #4
    1014:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1016:	7e71      	ldrb	r1, [r6, #25]
    1018:	0289      	lsls	r1, r1, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    101a:	7f33      	ldrb	r3, [r6, #28]
    101c:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    101e:	4319      	orrs	r1, r3
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1020:	7ab3      	ldrb	r3, [r6, #10]
    1022:	7af0      	ldrb	r0, [r6, #11]
    1024:	4303      	orrs	r3, r0
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1026:	4319      	orrs	r1, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1028:	7f73      	ldrb	r3, [r6, #29]
    102a:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    102c:	4319      	orrs	r1, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    102e:	2324      	movs	r3, #36	; 0x24
    1030:	5cf3      	ldrb	r3, [r6, r3]
    1032:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1034:	4319      	orrs	r1, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1036:	2325      	movs	r3, #37	; 0x25
    1038:	5cf3      	ldrb	r3, [r6, r3]
    103a:	041b      	lsls	r3, r3, #16
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    103c:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    103e:	8933      	ldrh	r3, [r6, #8]
    1040:	2bff      	cmp	r3, #255	; 0xff
    1042:	d100      	bne.n	1046 <usart_init+0x182>
    1044:	e086      	b.n	1154 <usart_init+0x290>
		if(config->lin_slave_enable) {
    1046:	7ef0      	ldrb	r0, [r6, #27]
    1048:	2800      	cmp	r0, #0
    104a:	d07f      	beq.n	114c <usart_init+0x288>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    104c:	20a0      	movs	r0, #160	; 0xa0
    104e:	04c0      	lsls	r0, r0, #19
    1050:	4302      	orrs	r2, r0
		ctrlb |= config->parity;
    1052:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1054:	232c      	movs	r3, #44	; 0x2c
    1056:	5cf3      	ldrb	r3, [r6, r3]
    1058:	2b00      	cmp	r3, #0
    105a:	d103      	bne.n	1064 <usart_init+0x1a0>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    105c:	4b63      	ldr	r3, [pc, #396]	; (11ec <usart_init+0x328>)
    105e:	789b      	ldrb	r3, [r3, #2]
    1060:	079b      	lsls	r3, r3, #30
    1062:	d501      	bpl.n	1068 <usart_init+0x1a4>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1064:	2380      	movs	r3, #128	; 0x80
    1066:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1068:	6828      	ldr	r0, [r5, #0]
    106a:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->SYNCBUSY.reg);
    106c:	69c3      	ldr	r3, [r0, #28]
	while (usart_is_syncing(module)) {
    106e:	2b00      	cmp	r3, #0
    1070:	d1fc      	bne.n	106c <usart_init+0x1a8>
	usart_hw->CTRLB.reg = ctrlb;
    1072:	6079      	str	r1, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1074:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1076:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1078:	2b00      	cmp	r3, #0
    107a:	d1fc      	bne.n	1076 <usart_init+0x1b2>
	usart_hw->CTRLA.reg = ctrla;
    107c:	603a      	str	r2, [r7, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    107e:	ab0e      	add	r3, sp, #56	; 0x38
    1080:	2280      	movs	r2, #128	; 0x80
    1082:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1084:	2200      	movs	r2, #0
    1086:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1088:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    108a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    108c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    108e:	930a      	str	r3, [sp, #40]	; 0x28
    1090:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1092:	930b      	str	r3, [sp, #44]	; 0x2c
    1094:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1096:	930c      	str	r3, [sp, #48]	; 0x30
    1098:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    109a:	9303      	str	r3, [sp, #12]
    109c:	930d      	str	r3, [sp, #52]	; 0x34
    109e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    10a0:	ae0a      	add	r6, sp, #40	; 0x28
    10a2:	e066      	b.n	1172 <usart_init+0x2ae>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10a4:	2308      	movs	r3, #8
    10a6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    10a8:	3b07      	subs	r3, #7
    10aa:	9307      	str	r3, [sp, #28]
    10ac:	e778      	b.n	fa0 <usart_init+0xdc>
	ctrla = (uint32_t)config->data_order |
    10ae:	6833      	ldr	r3, [r6, #0]
    10b0:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    10b2:	68f3      	ldr	r3, [r6, #12]
    10b4:	4699      	mov	r9, r3
		config->sample_adjustment |
    10b6:	6973      	ldr	r3, [r6, #20]
    10b8:	469b      	mov	fp, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    10ba:	7e33      	ldrb	r3, [r6, #24]
    10bc:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    10be:	2326      	movs	r3, #38	; 0x26
    10c0:	5cf3      	ldrb	r3, [r6, r3]
    10c2:	469a      	mov	sl, r3
	switch (config->transfer_mode)
    10c4:	6873      	ldr	r3, [r6, #4]
    10c6:	2b00      	cmp	r3, #0
    10c8:	d018      	beq.n	10fc <usart_init+0x238>
    10ca:	2280      	movs	r2, #128	; 0x80
    10cc:	0552      	lsls	r2, r2, #21
    10ce:	4293      	cmp	r3, r2
    10d0:	d001      	beq.n	10d6 <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    10d2:	2000      	movs	r0, #0
    10d4:	e025      	b.n	1122 <usart_init+0x25e>
			if (!config->use_external_clock) {
    10d6:	2327      	movs	r3, #39	; 0x27
    10d8:	5cf3      	ldrb	r3, [r6, r3]
    10da:	2b00      	cmp	r3, #0
    10dc:	d000      	beq.n	10e0 <usart_init+0x21c>
    10de:	e773      	b.n	fc8 <usart_init+0x104>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    10e0:	6a33      	ldr	r3, [r6, #32]
    10e2:	001f      	movs	r7, r3
    10e4:	b2c0      	uxtb	r0, r0
    10e6:	4b42      	ldr	r3, [pc, #264]	; (11f0 <usart_init+0x32c>)
    10e8:	4798      	blx	r3
    10ea:	0001      	movs	r1, r0
    10ec:	220e      	movs	r2, #14
    10ee:	ab06      	add	r3, sp, #24
    10f0:	469c      	mov	ip, r3
    10f2:	4462      	add	r2, ip
    10f4:	0038      	movs	r0, r7
    10f6:	4b3f      	ldr	r3, [pc, #252]	; (11f4 <usart_init+0x330>)
    10f8:	4798      	blx	r3
    10fa:	e012      	b.n	1122 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    10fc:	2308      	movs	r3, #8
    10fe:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1100:	2300      	movs	r3, #0
    1102:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1104:	2327      	movs	r3, #39	; 0x27
    1106:	5cf3      	ldrb	r3, [r6, r3]
    1108:	2b00      	cmp	r3, #0
    110a:	d00e      	beq.n	112a <usart_init+0x266>
				status_code =
    110c:	9b06      	ldr	r3, [sp, #24]
    110e:	9300      	str	r3, [sp, #0]
    1110:	9b07      	ldr	r3, [sp, #28]
    1112:	220e      	movs	r2, #14
    1114:	a906      	add	r1, sp, #24
    1116:	468c      	mov	ip, r1
    1118:	4462      	add	r2, ip
    111a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    111c:	6a30      	ldr	r0, [r6, #32]
    111e:	4f36      	ldr	r7, [pc, #216]	; (11f8 <usart_init+0x334>)
    1120:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    1122:	2800      	cmp	r0, #0
    1124:	d000      	beq.n	1128 <usart_init+0x264>
    1126:	e6e0      	b.n	eea <usart_init+0x26>
    1128:	e74e      	b.n	fc8 <usart_init+0x104>
						_sercom_get_async_baud_val(config->baudrate,
    112a:	6a33      	ldr	r3, [r6, #32]
    112c:	001f      	movs	r7, r3
    112e:	b2c0      	uxtb	r0, r0
    1130:	4b2f      	ldr	r3, [pc, #188]	; (11f0 <usart_init+0x32c>)
    1132:	4798      	blx	r3
    1134:	0001      	movs	r1, r0
				status_code =
    1136:	9b06      	ldr	r3, [sp, #24]
    1138:	9300      	str	r3, [sp, #0]
    113a:	9b07      	ldr	r3, [sp, #28]
    113c:	220e      	movs	r2, #14
    113e:	a806      	add	r0, sp, #24
    1140:	4684      	mov	ip, r0
    1142:	4462      	add	r2, ip
    1144:	0038      	movs	r0, r7
    1146:	4f2c      	ldr	r7, [pc, #176]	; (11f8 <usart_init+0x334>)
    1148:	47b8      	blx	r7
    114a:	e7ea      	b.n	1122 <usart_init+0x25e>
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    114c:	2080      	movs	r0, #128	; 0x80
    114e:	0440      	lsls	r0, r0, #17
    1150:	4302      	orrs	r2, r0
    1152:	e77e      	b.n	1052 <usart_init+0x18e>
		if(config->lin_slave_enable) {
    1154:	7ef3      	ldrb	r3, [r6, #27]
    1156:	2b00      	cmp	r3, #0
    1158:	d100      	bne.n	115c <usart_init+0x298>
    115a:	e77b      	b.n	1054 <usart_init+0x190>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    115c:	2380      	movs	r3, #128	; 0x80
    115e:	04db      	lsls	r3, r3, #19
    1160:	431a      	orrs	r2, r3
    1162:	e777      	b.n	1054 <usart_init+0x190>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1164:	0020      	movs	r0, r4
    1166:	4b25      	ldr	r3, [pc, #148]	; (11fc <usart_init+0x338>)
    1168:	4798      	blx	r3
    116a:	e007      	b.n	117c <usart_init+0x2b8>
    116c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    116e:	2f04      	cmp	r7, #4
    1170:	d00d      	beq.n	118e <usart_init+0x2ca>
    1172:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1174:	00bb      	lsls	r3, r7, #2
    1176:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1178:	2800      	cmp	r0, #0
    117a:	d0f3      	beq.n	1164 <usart_init+0x2a0>
		if (current_pinmux != PINMUX_UNUSED) {
    117c:	1c43      	adds	r3, r0, #1
    117e:	d0f5      	beq.n	116c <usart_init+0x2a8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1180:	a90e      	add	r1, sp, #56	; 0x38
    1182:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1184:	0c00      	lsrs	r0, r0, #16
    1186:	b2c0      	uxtb	r0, r0
    1188:	4b1d      	ldr	r3, [pc, #116]	; (1200 <usart_init+0x33c>)
    118a:	4798      	blx	r3
    118c:	e7ee      	b.n	116c <usart_init+0x2a8>
		module->callback[i]            = NULL;
    118e:	2300      	movs	r3, #0
    1190:	60eb      	str	r3, [r5, #12]
    1192:	612b      	str	r3, [r5, #16]
    1194:	616b      	str	r3, [r5, #20]
    1196:	61ab      	str	r3, [r5, #24]
    1198:	61eb      	str	r3, [r5, #28]
    119a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    119c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    119e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    11a0:	2200      	movs	r2, #0
    11a2:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    11a4:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    11a6:	3330      	adds	r3, #48	; 0x30
    11a8:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    11aa:	3301      	adds	r3, #1
    11ac:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    11ae:	3301      	adds	r3, #1
    11b0:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    11b2:	3301      	adds	r3, #1
    11b4:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    11b6:	6828      	ldr	r0, [r5, #0]
    11b8:	4b07      	ldr	r3, [pc, #28]	; (11d8 <usart_init+0x314>)
    11ba:	4798      	blx	r3
    11bc:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    11be:	4911      	ldr	r1, [pc, #68]	; (1204 <usart_init+0x340>)
    11c0:	4b11      	ldr	r3, [pc, #68]	; (1208 <usart_init+0x344>)
    11c2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    11c4:	00a4      	lsls	r4, r4, #2
    11c6:	4b11      	ldr	r3, [pc, #68]	; (120c <usart_init+0x348>)
    11c8:	50e5      	str	r5, [r4, r3]
	return status_code;
    11ca:	2000      	movs	r0, #0
    11cc:	e68d      	b.n	eea <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    11ce:	2310      	movs	r3, #16
    11d0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    11d2:	2300      	movs	r3, #0
    11d4:	9307      	str	r3, [sp, #28]
    11d6:	e6e3      	b.n	fa0 <usart_init+0xdc>
    11d8:	00000dbd 	.word	0x00000dbd
    11dc:	40000400 	.word	0x40000400
    11e0:	0000085d 	.word	0x0000085d
    11e4:	000007d1 	.word	0x000007d1
    11e8:	00000bf9 	.word	0x00000bf9
    11ec:	41002000 	.word	0x41002000
    11f0:	00000879 	.word	0x00000879
    11f4:	00000a01 	.word	0x00000a01
    11f8:	00000a29 	.word	0x00000a29
    11fc:	00000c45 	.word	0x00000c45
    1200:	00000955 	.word	0x00000955
    1204:	00001211 	.word	0x00001211
    1208:	00000df9 	.word	0x00000df9
    120c:	200001d8 	.word	0x200001d8

00001210 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1212:	0080      	lsls	r0, r0, #2
    1214:	4b67      	ldr	r3, [pc, #412]	; (13b4 <_usart_interrupt_handler+0x1a4>)
    1216:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1218:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    121a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    121c:	2b00      	cmp	r3, #0
    121e:	d1fc      	bne.n	121a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1220:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1222:	7da6      	ldrb	r6, [r4, #22]
    1224:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1226:	2330      	movs	r3, #48	; 0x30
    1228:	5ceb      	ldrb	r3, [r5, r3]
    122a:	2231      	movs	r2, #49	; 0x31
    122c:	5caf      	ldrb	r7, [r5, r2]
    122e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1230:	07f3      	lsls	r3, r6, #31
    1232:	d522      	bpl.n	127a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1234:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1236:	b29b      	uxth	r3, r3
    1238:	2b00      	cmp	r3, #0
    123a:	d01c      	beq.n	1276 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    123c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    123e:	7813      	ldrb	r3, [r2, #0]
    1240:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1242:	1c51      	adds	r1, r2, #1
    1244:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1246:	7969      	ldrb	r1, [r5, #5]
    1248:	2901      	cmp	r1, #1
    124a:	d00e      	beq.n	126a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    124c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    124e:	05db      	lsls	r3, r3, #23
    1250:	0ddb      	lsrs	r3, r3, #23
    1252:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1254:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1256:	3b01      	subs	r3, #1
    1258:	b29b      	uxth	r3, r3
    125a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    125c:	2b00      	cmp	r3, #0
    125e:	d10c      	bne.n	127a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1260:	3301      	adds	r3, #1
    1262:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1264:	3301      	adds	r3, #1
    1266:	75a3      	strb	r3, [r4, #22]
    1268:	e007      	b.n	127a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    126a:	7851      	ldrb	r1, [r2, #1]
    126c:	0209      	lsls	r1, r1, #8
    126e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1270:	3202      	adds	r2, #2
    1272:	62aa      	str	r2, [r5, #40]	; 0x28
    1274:	e7eb      	b.n	124e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1276:	2301      	movs	r3, #1
    1278:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    127a:	07b3      	lsls	r3, r6, #30
    127c:	d506      	bpl.n	128c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    127e:	2302      	movs	r3, #2
    1280:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1282:	2200      	movs	r2, #0
    1284:	3331      	adds	r3, #49	; 0x31
    1286:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1288:	07fb      	lsls	r3, r7, #31
    128a:	d41c      	bmi.n	12c6 <_usart_interrupt_handler+0xb6>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    128c:	0773      	lsls	r3, r6, #29
    128e:	d56f      	bpl.n	1370 <_usart_interrupt_handler+0x160>

		if (module->remaining_rx_buffer_length) {
    1290:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1292:	b29b      	uxth	r3, r3
    1294:	2b00      	cmp	r3, #0
    1296:	d069      	beq.n	136c <_usart_interrupt_handler+0x15c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1298:	8b63      	ldrh	r3, [r4, #26]
    129a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    129c:	071a      	lsls	r2, r3, #28
    129e:	d416      	bmi.n	12ce <_usart_interrupt_handler+0xbe>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    12a0:	223f      	movs	r2, #63	; 0x3f
    12a2:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    12a4:	2b00      	cmp	r3, #0
    12a6:	d03e      	beq.n	1326 <_usart_interrupt_handler+0x116>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    12a8:	079a      	lsls	r2, r3, #30
    12aa:	d513      	bpl.n	12d4 <_usart_interrupt_handler+0xc4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    12ac:	221a      	movs	r2, #26
    12ae:	2332      	movs	r3, #50	; 0x32
    12b0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    12b2:	8b63      	ldrh	r3, [r4, #26]
    12b4:	3a18      	subs	r2, #24
    12b6:	4313      	orrs	r3, r2
    12b8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    12ba:	077b      	lsls	r3, r7, #29
    12bc:	d558      	bpl.n	1370 <_usart_interrupt_handler+0x160>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    12be:	0028      	movs	r0, r5
    12c0:	696b      	ldr	r3, [r5, #20]
    12c2:	4798      	blx	r3
    12c4:	e054      	b.n	1370 <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    12c6:	0028      	movs	r0, r5
    12c8:	68eb      	ldr	r3, [r5, #12]
    12ca:	4798      	blx	r3
    12cc:	e7de      	b.n	128c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    12ce:	2237      	movs	r2, #55	; 0x37
    12d0:	4013      	ands	r3, r2
    12d2:	e7e7      	b.n	12a4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    12d4:	075a      	lsls	r2, r3, #29
    12d6:	d507      	bpl.n	12e8 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    12d8:	221e      	movs	r2, #30
    12da:	2332      	movs	r3, #50	; 0x32
    12dc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    12de:	8b63      	ldrh	r3, [r4, #26]
    12e0:	3a1a      	subs	r2, #26
    12e2:	4313      	orrs	r3, r2
    12e4:	8363      	strh	r3, [r4, #26]
    12e6:	e7e8      	b.n	12ba <_usart_interrupt_handler+0xaa>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    12e8:	07da      	lsls	r2, r3, #31
    12ea:	d507      	bpl.n	12fc <_usart_interrupt_handler+0xec>
					module->rx_status = STATUS_ERR_BAD_DATA;
    12ec:	2213      	movs	r2, #19
    12ee:	2332      	movs	r3, #50	; 0x32
    12f0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    12f2:	8b63      	ldrh	r3, [r4, #26]
    12f4:	3a12      	subs	r2, #18
    12f6:	4313      	orrs	r3, r2
    12f8:	8363      	strh	r3, [r4, #26]
    12fa:	e7de      	b.n	12ba <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    12fc:	06da      	lsls	r2, r3, #27
    12fe:	d507      	bpl.n	1310 <_usart_interrupt_handler+0x100>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1300:	2242      	movs	r2, #66	; 0x42
    1302:	2332      	movs	r3, #50	; 0x32
    1304:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1306:	8b63      	ldrh	r3, [r4, #26]
    1308:	3a32      	subs	r2, #50	; 0x32
    130a:	4313      	orrs	r3, r2
    130c:	8363      	strh	r3, [r4, #26]
    130e:	e7d4      	b.n	12ba <_usart_interrupt_handler+0xaa>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1310:	2220      	movs	r2, #32
    1312:	421a      	tst	r2, r3
    1314:	d0d1      	beq.n	12ba <_usart_interrupt_handler+0xaa>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1316:	3221      	adds	r2, #33	; 0x21
    1318:	2332      	movs	r3, #50	; 0x32
    131a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    131c:	8b63      	ldrh	r3, [r4, #26]
    131e:	3a21      	subs	r2, #33	; 0x21
    1320:	4313      	orrs	r3, r2
    1322:	8363      	strh	r3, [r4, #26]
    1324:	e7c9      	b.n	12ba <_usart_interrupt_handler+0xaa>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1326:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1328:	05db      	lsls	r3, r3, #23
    132a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    132c:	b2da      	uxtb	r2, r3
    132e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1330:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1332:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1334:	1c51      	adds	r1, r2, #1
    1336:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1338:	7969      	ldrb	r1, [r5, #5]
    133a:	2901      	cmp	r1, #1
    133c:	d010      	beq.n	1360 <_usart_interrupt_handler+0x150>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    133e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1340:	3b01      	subs	r3, #1
    1342:	b29b      	uxth	r3, r3
    1344:	85ab      	strh	r3, [r5, #44]	; 0x2c
    1346:	2b00      	cmp	r3, #0
    1348:	d112      	bne.n	1370 <_usart_interrupt_handler+0x160>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    134a:	3304      	adds	r3, #4
    134c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    134e:	2200      	movs	r2, #0
    1350:	332e      	adds	r3, #46	; 0x2e
    1352:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1354:	07bb      	lsls	r3, r7, #30
    1356:	d50b      	bpl.n	1370 <_usart_interrupt_handler+0x160>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    1358:	0028      	movs	r0, r5
    135a:	692b      	ldr	r3, [r5, #16]
    135c:	4798      	blx	r3
    135e:	e007      	b.n	1370 <_usart_interrupt_handler+0x160>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1360:	0a1b      	lsrs	r3, r3, #8
    1362:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1364:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    1366:	3301      	adds	r3, #1
    1368:	626b      	str	r3, [r5, #36]	; 0x24
    136a:	e7e8      	b.n	133e <_usart_interrupt_handler+0x12e>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    136c:	2304      	movs	r3, #4
    136e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1370:	06f3      	lsls	r3, r6, #27
    1372:	d504      	bpl.n	137e <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1374:	2310      	movs	r3, #16
    1376:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    1378:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    137a:	06fb      	lsls	r3, r7, #27
    137c:	d40e      	bmi.n	139c <_usart_interrupt_handler+0x18c>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    137e:	06b3      	lsls	r3, r6, #26
    1380:	d504      	bpl.n	138c <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1382:	2320      	movs	r3, #32
    1384:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    1386:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    1388:	073b      	lsls	r3, r7, #28
    138a:	d40b      	bmi.n	13a4 <_usart_interrupt_handler+0x194>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    138c:	0733      	lsls	r3, r6, #28
    138e:	d504      	bpl.n	139a <_usart_interrupt_handler+0x18a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1390:	2308      	movs	r3, #8
    1392:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1394:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    1396:	06bb      	lsls	r3, r7, #26
    1398:	d408      	bmi.n	13ac <_usart_interrupt_handler+0x19c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    139c:	0028      	movs	r0, r5
    139e:	69eb      	ldr	r3, [r5, #28]
    13a0:	4798      	blx	r3
    13a2:	e7ec      	b.n	137e <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    13a4:	0028      	movs	r0, r5
    13a6:	69ab      	ldr	r3, [r5, #24]
    13a8:	4798      	blx	r3
    13aa:	e7ef      	b.n	138c <_usart_interrupt_handler+0x17c>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    13ac:	6a2b      	ldr	r3, [r5, #32]
    13ae:	0028      	movs	r0, r5
    13b0:	4798      	blx	r3
}
    13b2:	e7f2      	b.n	139a <_usart_interrupt_handler+0x18a>
    13b4:	200001d8 	.word	0x200001d8

000013b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    13b8:	b500      	push	{lr}
    13ba:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    13bc:	ab01      	add	r3, sp, #4
    13be:	2280      	movs	r2, #128	; 0x80
    13c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    13c2:	780a      	ldrb	r2, [r1, #0]
    13c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    13c6:	784a      	ldrb	r2, [r1, #1]
    13c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    13ca:	788a      	ldrb	r2, [r1, #2]
    13cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    13ce:	0019      	movs	r1, r3
    13d0:	4b01      	ldr	r3, [pc, #4]	; (13d8 <port_pin_set_config+0x20>)
    13d2:	4798      	blx	r3
}
    13d4:	b003      	add	sp, #12
    13d6:	bd00      	pop	{pc}
    13d8:	00000955 	.word	0x00000955

000013dc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    13dc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    13de:	4a06      	ldr	r2, [pc, #24]	; (13f8 <_sbrk+0x1c>)
    13e0:	6812      	ldr	r2, [r2, #0]
    13e2:	2a00      	cmp	r2, #0
    13e4:	d004      	beq.n	13f0 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    13e6:	4a04      	ldr	r2, [pc, #16]	; (13f8 <_sbrk+0x1c>)
    13e8:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    13ea:	18c3      	adds	r3, r0, r3
    13ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    13ee:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    13f0:	4902      	ldr	r1, [pc, #8]	; (13fc <_sbrk+0x20>)
    13f2:	4a01      	ldr	r2, [pc, #4]	; (13f8 <_sbrk+0x1c>)
    13f4:	6011      	str	r1, [r2, #0]
    13f6:	e7f6      	b.n	13e6 <_sbrk+0xa>
    13f8:	20000188 	.word	0x20000188
    13fc:	200001f8 	.word	0x200001f8

00001400 <main>:
#include "sam.h"

#include <main_app.h>

int main(void)
{
    1400:	b510      	push	{r4, lr}
	main_app();
    1402:	4b02      	ldr	r3, [pc, #8]	; (140c <main+0xc>)
    1404:	4798      	blx	r3
}
    1406:	2000      	movs	r0, #0
    1408:	bd10      	pop	{r4, pc}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	00001411 	.word	0x00001411

00001410 <_Z8main_appv>:
	term_cmd->parse(data);
}
#endif

void main_app(void)
{
    1410:	b5f0      	push	{r4, r5, r6, r7, lr}
    1412:	46c6      	mov	lr, r8
    1414:	b500      	push	{lr}
    1416:	b08c      	sub	sp, #48	; 0x30
	GI::Sys::Timer timer_touch = GI::Sys::Timer(20);
    1418:	2214      	movs	r2, #20
    141a:	2300      	movs	r3, #0
    141c:	a808      	add	r0, sp, #32
    141e:	4c20      	ldr	r4, [pc, #128]	; (14a0 <_Z8main_appv+0x90>)
    1420:	47a0      	blx	r4
	GI::Sys::Timer blink_timer = GI::Sys::Timer(100);
    1422:	2264      	movs	r2, #100	; 0x64
    1424:	2300      	movs	r3, #0
    1426:	a804      	add	r0, sp, #16
    1428:	47a0      	blx	r4
	/*GI::Sys::Clock::changeCoreClk(25000000);
	unsigned long baud = 1200;
	terminal.ctl(GI::IO::IO_CTL_SET_SPEED, &baud);*/

#if (SHOW_SENSORS_RESULT_ON_SCREEN == 0)
	GI::IO terminal = GI::IO((char *)CONSOLE_UART_OUT);
    142a:	491e      	ldr	r1, [pc, #120]	; (14a4 <_Z8main_appv+0x94>)
    142c:	a801      	add	r0, sp, #4
    142e:	4b1e      	ldr	r3, [pc, #120]	; (14a8 <_Z8main_appv+0x98>)
    1430:	4798      	blx	r3
	bool led_state = false;
    1432:	2300      	movs	r3, #0
    1434:	4698      	mov	r8, r3
	bool state_hbtn_0 = false;
	bool state_hbtn_0_old = true;
	while(1)
	{
		//GI::Sys::Clock::sleep();
		dev.idle();
    1436:	4e1d      	ldr	r6, [pc, #116]	; (14ac <_Z8main_appv+0x9c>)
    1438:	4d1d      	ldr	r5, [pc, #116]	; (14b0 <_Z8main_appv+0xa0>)
#endif
		/*
		 * Call every 20ms the idle function of touch screen interface
		 * 	and idle function of parent window.
		 */
		if(timer_touch.tick())
    143a:	4c1e      	ldr	r4, [pc, #120]	; (14b4 <_Z8main_appv+0xa4>)
    143c:	e009      	b.n	1452 <_Z8main_appv+0x42>
					blink_timer.interval(780);
					led_state = false;
				}
				else
				{
					blink_timer.interval(180);
    143e:	22b4      	movs	r2, #180	; 0xb4
    1440:	2300      	movs	r3, #0
    1442:	a804      	add	r0, sp, #16
    1444:	491c      	ldr	r1, [pc, #112]	; (14b8 <_Z8main_appv+0xa8>)
    1446:	4788      	blx	r1
					led_state = true;
    1448:	46b8      	mov	r8, r7
				}
				GI::IO::write((char *)"led-0", false);
    144a:	2100      	movs	r1, #0
    144c:	481b      	ldr	r0, [pc, #108]	; (14bc <_Z8main_appv+0xac>)
    144e:	4b1c      	ldr	r3, [pc, #112]	; (14c0 <_Z8main_appv+0xb0>)
    1450:	4798      	blx	r3
		dev.idle();
    1452:	0030      	movs	r0, r6
    1454:	47a8      	blx	r5
		if(timer_touch.tick())
    1456:	a808      	add	r0, sp, #32
    1458:	47a0      	blx	r4
		if(blink_timer.tick())
    145a:	a804      	add	r0, sp, #16
    145c:	47a0      	blx	r4
    145e:	2800      	cmp	r0, #0
    1460:	d0f7      	beq.n	1452 <_Z8main_appv+0x42>
			GI::IO::read((char *)"led-0", &state);
    1462:	466b      	mov	r3, sp
    1464:	1cdf      	adds	r7, r3, #3
    1466:	0039      	movs	r1, r7
    1468:	4814      	ldr	r0, [pc, #80]	; (14bc <_Z8main_appv+0xac>)
    146a:	4b16      	ldr	r3, [pc, #88]	; (14c4 <_Z8main_appv+0xb4>)
    146c:	4798      	blx	r3
			if(state)
    146e:	783f      	ldrb	r7, [r7, #0]
    1470:	2f00      	cmp	r7, #0
    1472:	d00b      	beq.n	148c <_Z8main_appv+0x7c>
				if(led_state)
    1474:	4643      	mov	r3, r8
    1476:	2b00      	cmp	r3, #0
    1478:	d0e1      	beq.n	143e <_Z8main_appv+0x2e>
					blink_timer.interval(780);
    147a:	22c3      	movs	r2, #195	; 0xc3
    147c:	0092      	lsls	r2, r2, #2
    147e:	2300      	movs	r3, #0
    1480:	a804      	add	r0, sp, #16
    1482:	490d      	ldr	r1, [pc, #52]	; (14b8 <_Z8main_appv+0xa8>)
    1484:	4788      	blx	r1
					led_state = false;
    1486:	2300      	movs	r3, #0
    1488:	4698      	mov	r8, r3
    148a:	e7de      	b.n	144a <_Z8main_appv+0x3a>
				dev.SCREEN[0]->drawRectangle(96, 24, 5, 5, true, Color::Black);
#endif
			}
			else
			{
				blink_timer.interval(20);
    148c:	2214      	movs	r2, #20
    148e:	2300      	movs	r3, #0
    1490:	a804      	add	r0, sp, #16
    1492:	4909      	ldr	r1, [pc, #36]	; (14b8 <_Z8main_appv+0xa8>)
    1494:	4788      	blx	r1
				GI::IO::write((char *)"led-0", true);
    1496:	2101      	movs	r1, #1
    1498:	4808      	ldr	r0, [pc, #32]	; (14bc <_Z8main_appv+0xac>)
    149a:	4b09      	ldr	r3, [pc, #36]	; (14c0 <_Z8main_appv+0xb0>)
    149c:	4798      	blx	r3
    149e:	e7d8      	b.n	1452 <_Z8main_appv+0x42>
    14a0:	0000187d 	.word	0x0000187d
    14a4:	000022ac 	.word	0x000022ac
    14a8:	00001705 	.word	0x00001705
    14ac:	20000190 	.word	0x20000190
    14b0:	000016b9 	.word	0x000016b9
    14b4:	000018c1 	.word	0x000018c1
    14b8:	000018a9 	.word	0x000018a9
    14bc:	000022b4 	.word	0x000022b4
    14c0:	000017bd 	.word	0x000017bd
    14c4:	00001829 	.word	0x00001829

000014c8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE>:

extern ioSettings *ioSetCfg[];


SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Gpio **device)
{
    14c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ca:	b083      	sub	sp, #12
    14cc:	9001      	str	r0, [sp, #4]
    14ce:	000e      	movs	r6, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    14d0:	4b11      	ldr	r3, [pc, #68]	; (1518 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x50>)
    14d2:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    14d4:	2c00      	cmp	r4, #0
    14d6:	d005      	beq.n	14e4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x1c>
    14d8:	6923      	ldr	r3, [r4, #16]
    14da:	2b00      	cmp	r3, #0
    14dc:	d002      	beq.n	14e4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x1c>
    14de:	4d0e      	ldr	r5, [pc, #56]	; (1518 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x50>)
		{
			*device = NULL;
			return SYS_ERR_INVALID_PATH;
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_GPIO && !strcmp(io_item->info.name, path))
    14e0:	4f0e      	ldr	r7, [pc, #56]	; (151c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x54>)
    14e2:	e00c      	b.n	14fe <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x36>
			*device = NULL;
    14e4:	2300      	movs	r3, #0
    14e6:	6033      	str	r3, [r6, #0]
			return SYS_ERR_INVALID_PATH;
    14e8:	200b      	movs	r0, #11
    14ea:	4240      	negs	r0, r0
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Gpio *)ioSetCfg[dev_nr]->ioConstruct;
	return SYS_ERR_OK;
}
    14ec:	b003      	add	sp, #12
    14ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ioSettings *io_item = ioSetCfg[dev_nr];
    14f0:	686c      	ldr	r4, [r5, #4]
		if(!io_item || !io_item->cfg)
    14f2:	2c00      	cmp	r4, #0
    14f4:	d0f6      	beq.n	14e4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x1c>
    14f6:	3504      	adds	r5, #4
    14f8:	6923      	ldr	r3, [r4, #16]
    14fa:	2b00      	cmp	r3, #0
    14fc:	d0f2      	beq.n	14e4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x1c>
		if(io_item->info.ioType == ioSettings::info_s::ioType_GPIO && !strcmp(io_item->info.name, path))
    14fe:	7823      	ldrb	r3, [r4, #0]
    1500:	2b01      	cmp	r3, #1
    1502:	d1f5      	bne.n	14f0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x28>
    1504:	1c60      	adds	r0, r4, #1
    1506:	9901      	ldr	r1, [sp, #4]
    1508:	47b8      	blx	r7
    150a:	2800      	cmp	r0, #0
    150c:	d1f0      	bne.n	14f0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x28>
	*device = (GI::Dev::Gpio *)ioSetCfg[dev_nr]->ioConstruct;
    150e:	6963      	ldr	r3, [r4, #20]
    1510:	6033      	str	r3, [r6, #0]
	return SYS_ERR_OK;
    1512:	2000      	movs	r0, #0
    1514:	e7ea      	b.n	14ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4GpioE+0x24>
    1516:	46c0      	nop			; (mov r8, r8)
    1518:	20000008 	.word	0x20000008
    151c:	00002219 	.word	0x00002219

00001520 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::I2c **device)
{
    1520:	b5f0      	push	{r4, r5, r6, r7, lr}
    1522:	b083      	sub	sp, #12
    1524:	9001      	str	r0, [sp, #4]
    1526:	000e      	movs	r6, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    1528:	4b11      	ldr	r3, [pc, #68]	; (1570 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x50>)
    152a:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    152c:	2c00      	cmp	r4, #0
    152e:	d005      	beq.n	153c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x1c>
    1530:	6923      	ldr	r3, [r4, #16]
    1532:	2b00      	cmp	r3, #0
    1534:	d002      	beq.n	153c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x1c>
    1536:	4d0e      	ldr	r5, [pc, #56]	; (1570 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x50>)
		{
			*device = NULL;
			return SYS_ERR_INVALID_PATH;
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_I2C && !strcmp(io_item->info.name, path))
    1538:	4f0e      	ldr	r7, [pc, #56]	; (1574 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x54>)
    153a:	e00c      	b.n	1556 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x36>
			*device = NULL;
    153c:	2300      	movs	r3, #0
    153e:	6033      	str	r3, [r6, #0]
			return SYS_ERR_INVALID_PATH;
    1540:	200b      	movs	r0, #11
    1542:	4240      	negs	r0, r0
			break;
		dev_nr++;
	}
	*device = (GI::Dev::I2c *)ioSetCfg[dev_nr]->ioConstruct;
	return SYS_ERR_OK;
}
    1544:	b003      	add	sp, #12
    1546:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ioSettings *io_item = ioSetCfg[dev_nr];
    1548:	686c      	ldr	r4, [r5, #4]
		if(!io_item || !io_item->cfg)
    154a:	2c00      	cmp	r4, #0
    154c:	d0f6      	beq.n	153c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x1c>
    154e:	3504      	adds	r5, #4
    1550:	6923      	ldr	r3, [r4, #16]
    1552:	2b00      	cmp	r3, #0
    1554:	d0f2      	beq.n	153c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x1c>
		if(io_item->info.ioType == ioSettings::info_s::ioType_I2C && !strcmp(io_item->info.name, path))
    1556:	7823      	ldrb	r3, [r4, #0]
    1558:	2b03      	cmp	r3, #3
    155a:	d1f5      	bne.n	1548 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x28>
    155c:	1c60      	adds	r0, r4, #1
    155e:	9901      	ldr	r1, [sp, #4]
    1560:	47b8      	blx	r7
    1562:	2800      	cmp	r0, #0
    1564:	d1f0      	bne.n	1548 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x28>
	*device = (GI::Dev::I2c *)ioSetCfg[dev_nr]->ioConstruct;
    1566:	6963      	ldr	r3, [r4, #20]
    1568:	6033      	str	r3, [r6, #0]
	return SYS_ERR_OK;
    156a:	2000      	movs	r0, #0
    156c:	e7ea      	b.n	1544 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3I2cE+0x24>
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	20000008 	.word	0x20000008
    1574:	00002219 	.word	0x00002219

00001578 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Spi **device)
{
    1578:	b5f0      	push	{r4, r5, r6, r7, lr}
    157a:	b083      	sub	sp, #12
    157c:	9001      	str	r0, [sp, #4]
    157e:	000e      	movs	r6, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    1580:	4b11      	ldr	r3, [pc, #68]	; (15c8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x50>)
    1582:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    1584:	2c00      	cmp	r4, #0
    1586:	d005      	beq.n	1594 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x1c>
    1588:	6923      	ldr	r3, [r4, #16]
    158a:	2b00      	cmp	r3, #0
    158c:	d002      	beq.n	1594 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x1c>
    158e:	4d0e      	ldr	r5, [pc, #56]	; (15c8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x50>)
		{
			*device = NULL;
			return SYS_ERR_INVALID_PATH;
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_SPI && !strcmp(io_item->info.name, path))
    1590:	4f0e      	ldr	r7, [pc, #56]	; (15cc <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x54>)
    1592:	e00c      	b.n	15ae <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x36>
			*device = NULL;
    1594:	2300      	movs	r3, #0
    1596:	6033      	str	r3, [r6, #0]
			return SYS_ERR_INVALID_PATH;
    1598:	200b      	movs	r0, #11
    159a:	4240      	negs	r0, r0
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Spi *)ioSetCfg[dev_nr]->ioConstruct;
	return SYS_ERR_OK;
}
    159c:	b003      	add	sp, #12
    159e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ioSettings *io_item = ioSetCfg[dev_nr];
    15a0:	686c      	ldr	r4, [r5, #4]
		if(!io_item || !io_item->cfg)
    15a2:	2c00      	cmp	r4, #0
    15a4:	d0f6      	beq.n	1594 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x1c>
    15a6:	3504      	adds	r5, #4
    15a8:	6923      	ldr	r3, [r4, #16]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d0f2      	beq.n	1594 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x1c>
		if(io_item->info.ioType == ioSettings::info_s::ioType_SPI && !strcmp(io_item->info.name, path))
    15ae:	7823      	ldrb	r3, [r4, #0]
    15b0:	2b04      	cmp	r3, #4
    15b2:	d1f5      	bne.n	15a0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x28>
    15b4:	1c60      	adds	r0, r4, #1
    15b6:	9901      	ldr	r1, [sp, #4]
    15b8:	47b8      	blx	r7
    15ba:	2800      	cmp	r0, #0
    15bc:	d1f0      	bne.n	15a0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x28>
	*device = (GI::Dev::Spi *)ioSetCfg[dev_nr]->ioConstruct;
    15be:	6963      	ldr	r3, [r4, #20]
    15c0:	6033      	str	r3, [r6, #0]
	return SYS_ERR_OK;
    15c2:	2000      	movs	r0, #0
    15c4:	e7ea      	b.n	159c <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_3SpiE+0x24>
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	20000008 	.word	0x20000008
    15cc:	00002219 	.word	0x00002219

000015d0 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE>:

SysErr GI::Dev::DevRequest::request(char *path, GI::Dev::Uart **device)
{
    15d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    15d2:	b083      	sub	sp, #12
    15d4:	9001      	str	r0, [sp, #4]
    15d6:	000e      	movs	r6, r1
	unsigned int dev_nr = 0;
	while(1)
	{
		ioSettings *io_item = ioSetCfg[dev_nr];
    15d8:	4b11      	ldr	r3, [pc, #68]	; (1620 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x50>)
    15da:	681c      	ldr	r4, [r3, #0]
		if(!io_item || !io_item->cfg)
    15dc:	2c00      	cmp	r4, #0
    15de:	d005      	beq.n	15ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x1c>
    15e0:	6923      	ldr	r3, [r4, #16]
    15e2:	2b00      	cmp	r3, #0
    15e4:	d002      	beq.n	15ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x1c>
    15e6:	4d0e      	ldr	r5, [pc, #56]	; (1620 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x50>)
		{
			*device = NULL;
			return SYS_ERR_INVALID_PATH;
		}
		if(io_item->info.ioType == ioSettings::info_s::ioType_UART && !strcmp(io_item->info.name, path))
    15e8:	4f0e      	ldr	r7, [pc, #56]	; (1624 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x54>)
    15ea:	e00c      	b.n	1606 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x36>
			*device = NULL;
    15ec:	2300      	movs	r3, #0
    15ee:	6033      	str	r3, [r6, #0]
			return SYS_ERR_INVALID_PATH;
    15f0:	200b      	movs	r0, #11
    15f2:	4240      	negs	r0, r0
			break;
		dev_nr++;
	}
	*device = (GI::Dev::Uart *)ioSetCfg[dev_nr]->ioConstruct;
	return SYS_ERR_OK;
}
    15f4:	b003      	add	sp, #12
    15f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ioSettings *io_item = ioSetCfg[dev_nr];
    15f8:	686c      	ldr	r4, [r5, #4]
		if(!io_item || !io_item->cfg)
    15fa:	2c00      	cmp	r4, #0
    15fc:	d0f6      	beq.n	15ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x1c>
    15fe:	3504      	adds	r5, #4
    1600:	6923      	ldr	r3, [r4, #16]
    1602:	2b00      	cmp	r3, #0
    1604:	d0f2      	beq.n	15ec <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x1c>
		if(io_item->info.ioType == ioSettings::info_s::ioType_UART && !strcmp(io_item->info.name, path))
    1606:	7823      	ldrb	r3, [r4, #0]
    1608:	2b02      	cmp	r3, #2
    160a:	d1f5      	bne.n	15f8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x28>
    160c:	1c60      	adds	r0, r4, #1
    160e:	9901      	ldr	r1, [sp, #4]
    1610:	47b8      	blx	r7
    1612:	2800      	cmp	r0, #0
    1614:	d1f0      	bne.n	15f8 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x28>
	*device = (GI::Dev::Uart *)ioSetCfg[dev_nr]->ioConstruct;
    1616:	6963      	ldr	r3, [r4, #20]
    1618:	6033      	str	r3, [r6, #0]
	return SYS_ERR_OK;
    161a:	2000      	movs	r0, #0
    161c:	e7ea      	b.n	15f4 <_ZN2GI3Dev10DevRequest7requestEPcPPNS0_4UartE+0x24>
    161e:	46c0      	nop			; (mov r8, r8)
    1620:	20000008 	.word	0x20000008
    1624:	00002219 	.word	0x00002219

00001628 <_ZN2GI5Board4InitD1Ev>:
}

GI::Board::Init::~Init()
{

}
    1628:	4770      	bx	lr
	...

0000162c <_ZN2GI5Board4InitC1Ev>:
GI::Board::Init::Init()
    162c:	b5f0      	push	{r4, r5, r6, r7, lr}
    162e:	46ce      	mov	lr, r9
    1630:	4647      	mov	r7, r8
    1632:	b580      	push	{r7, lr}
    1634:	b083      	sub	sp, #12
    1636:	9001      	str	r0, [sp, #4]
    memset(this, 0, sizeof(*this));
    1638:	2210      	movs	r2, #16
    163a:	2100      	movs	r1, #0
    163c:	4b18      	ldr	r3, [pc, #96]	; (16a0 <_ZN2GI5Board4InitC1Ev+0x74>)
    163e:	4798      	blx	r3
		ioSettings *io_item = ioSetCfg[io_cnt];
    1640:	4b18      	ldr	r3, [pc, #96]	; (16a4 <_ZN2GI5Board4InitC1Ev+0x78>)
    1642:	681c      	ldr	r4, [r3, #0]
		if(io_item->cfg)
    1644:	6923      	ldr	r3, [r4, #16]
    1646:	2b00      	cmp	r3, #0
    1648:	d023      	beq.n	1692 <_ZN2GI5Board4InitC1Ev+0x66>
    164a:	4d16      	ldr	r5, [pc, #88]	; (16a4 <_ZN2GI5Board4InitC1Ev+0x78>)
    164c:	4b16      	ldr	r3, [pc, #88]	; (16a8 <_ZN2GI5Board4InitC1Ev+0x7c>)
    164e:	18ee      	adds	r6, r5, r3
				io_item->ioConstruct = (void *)new GI::Dev::Gpio(io_item);
    1650:	4b16      	ldr	r3, [pc, #88]	; (16ac <_ZN2GI5Board4InitC1Ev+0x80>)
    1652:	4699      	mov	r9, r3
				io_item->ioConstruct = (void *)new GI::Dev::Uart(io_item);
    1654:	4698      	mov	r8, r3
    1656:	e00e      	b.n	1676 <_ZN2GI5Board4InitC1Ev+0x4a>
				io_item->ioConstruct = (void *)new GI::Dev::Gpio(io_item);
    1658:	2034      	movs	r0, #52	; 0x34
    165a:	47c8      	blx	r9
    165c:	1e07      	subs	r7, r0, #0
    165e:	d002      	beq.n	1666 <_ZN2GI5Board4InitC1Ev+0x3a>
    1660:	0021      	movs	r1, r4
    1662:	4b13      	ldr	r3, [pc, #76]	; (16b0 <_ZN2GI5Board4InitC1Ev+0x84>)
    1664:	4798      	blx	r3
    1666:	6167      	str	r7, [r4, #20]
    for(; io_cnt < 1024; io_cnt++)
    1668:	42b5      	cmp	r5, r6
    166a:	d012      	beq.n	1692 <_ZN2GI5Board4InitC1Ev+0x66>
		ioSettings *io_item = ioSetCfg[io_cnt];
    166c:	686c      	ldr	r4, [r5, #4]
    166e:	3504      	adds	r5, #4
		if(io_item->cfg)
    1670:	6923      	ldr	r3, [r4, #16]
    1672:	2b00      	cmp	r3, #0
    1674:	d00d      	beq.n	1692 <_ZN2GI5Board4InitC1Ev+0x66>
			switch((unsigned int)io_item->info.ioType)
    1676:	7823      	ldrb	r3, [r4, #0]
    1678:	2b01      	cmp	r3, #1
    167a:	d0ed      	beq.n	1658 <_ZN2GI5Board4InitC1Ev+0x2c>
    167c:	2b02      	cmp	r3, #2
    167e:	d1f3      	bne.n	1668 <_ZN2GI5Board4InitC1Ev+0x3c>
				io_item->ioConstruct = (void *)new GI::Dev::Uart(io_item);
    1680:	2018      	movs	r0, #24
    1682:	47c0      	blx	r8
    1684:	1e07      	subs	r7, r0, #0
    1686:	d002      	beq.n	168e <_ZN2GI5Board4InitC1Ev+0x62>
    1688:	0021      	movs	r1, r4
    168a:	4b0a      	ldr	r3, [pc, #40]	; (16b4 <_ZN2GI5Board4InitC1Ev+0x88>)
    168c:	4798      	blx	r3
    168e:	6167      	str	r7, [r4, #20]
				break;
    1690:	e7ea      	b.n	1668 <_ZN2GI5Board4InitC1Ev+0x3c>
}
    1692:	9801      	ldr	r0, [sp, #4]
    1694:	b003      	add	sp, #12
    1696:	bc0c      	pop	{r2, r3}
    1698:	4690      	mov	r8, r2
    169a:	4699      	mov	r9, r3
    169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00002079 	.word	0x00002079
    16a4:	20000008 	.word	0x20000008
    16a8:	00000ffc 	.word	0x00000ffc
    16ac:	0000192d 	.word	0x0000192d
    16b0:	00001b41 	.word	0x00001b41
    16b4:	00001b7d 	.word	0x00001b7d

000016b8 <_ZN2GI5Board4Init4idleEv>:
    MMCSD[0]->idle();
#endif
#if (USE_LWIP == 1)
    LWIP[0]->idle(0);
#endif
}
    16b8:	4770      	bx	lr
	...

000016bc <_GLOBAL__sub_I_coreClk>:
    16bc:	b570      	push	{r4, r5, r6, lr}
GI::Sys::Clock coreClk = GI::Sys::Clock();
    16be:	4c09      	ldr	r4, [pc, #36]	; (16e4 <_GLOBAL__sub_I_coreClk+0x28>)
    16c0:	0020      	movs	r0, r4
    16c2:	4b09      	ldr	r3, [pc, #36]	; (16e8 <_GLOBAL__sub_I_coreClk+0x2c>)
    16c4:	4798      	blx	r3
    16c6:	4e09      	ldr	r6, [pc, #36]	; (16ec <_GLOBAL__sub_I_coreClk+0x30>)
    16c8:	0032      	movs	r2, r6
    16ca:	4909      	ldr	r1, [pc, #36]	; (16f0 <_GLOBAL__sub_I_coreClk+0x34>)
    16cc:	0020      	movs	r0, r4
    16ce:	4c09      	ldr	r4, [pc, #36]	; (16f4 <_GLOBAL__sub_I_coreClk+0x38>)
    16d0:	47a0      	blx	r4
GI::Board::Init dev = GI::Board::Init();
    16d2:	4d09      	ldr	r5, [pc, #36]	; (16f8 <_GLOBAL__sub_I_coreClk+0x3c>)
    16d4:	0028      	movs	r0, r5
    16d6:	4b09      	ldr	r3, [pc, #36]	; (16fc <_GLOBAL__sub_I_coreClk+0x40>)
    16d8:	4798      	blx	r3
    16da:	0032      	movs	r2, r6
    16dc:	4908      	ldr	r1, [pc, #32]	; (1700 <_GLOBAL__sub_I_coreClk+0x44>)
    16de:	0028      	movs	r0, r5
    16e0:	47a0      	blx	r4
}
    16e2:	bd70      	pop	{r4, r5, r6, pc}
    16e4:	2000018c 	.word	0x2000018c
    16e8:	00001da1 	.word	0x00001da1
    16ec:	20000000 	.word	0x20000000
    16f0:	00001db1 	.word	0x00001db1
    16f4:	00001e69 	.word	0x00001e69
    16f8:	20000190 	.word	0x20000190
    16fc:	0000162d 	.word	0x0000162d
    1700:	00001629 	.word	0x00001629

00001704 <_ZN2GI2IOC1EPc>:
#include <api/uart.h>

#include <api/dev_request.h>

/**********************************************************************************/
GI::IO::IO(char *path)
    1704:	b530      	push	{r4, r5, lr}
    1706:	b085      	sub	sp, #20
    1708:	0004      	movs	r4, r0
    170a:	000d      	movs	r5, r1
{
	memset(this, 0, sizeof(*this));
    170c:	220c      	movs	r2, #12
    170e:	2100      	movs	r1, #0
    1710:	4b19      	ldr	r3, [pc, #100]	; (1778 <_ZN2GI2IOC1EPc+0x74>)
    1712:	4798      	blx	r3
	GI::Dev::Gpio *gpioDev;
	GI::Dev::I2c *i2cdev;
	GI::Dev::Spi *spiDev;
	GI::Dev::Uart *uartDev;
	if(GI::Dev::DevRequest::request(path, &gpioDev) == SYS_ERR_OK)
    1714:	4669      	mov	r1, sp
    1716:	0028      	movs	r0, r5
    1718:	4b18      	ldr	r3, [pc, #96]	; (177c <_ZN2GI2IOC1EPc+0x78>)
    171a:	4798      	blx	r3
    171c:	2800      	cmp	r0, #0
    171e:	d106      	bne.n	172e <_ZN2GI2IOC1EPc+0x2a>
	{
		devHandler = (void *)gpioDev;
    1720:	9b00      	ldr	r3, [sp, #0]
    1722:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_GPIO;
    1724:	2301      	movs	r3, #1
    1726:	7063      	strb	r3, [r4, #1]
	else
	{
		ioDevType = IO_DEV_NULL;
		devHandler = NULL;
	}
}
    1728:	0020      	movs	r0, r4
    172a:	b005      	add	sp, #20
    172c:	bd30      	pop	{r4, r5, pc}
	else if(GI::Dev::DevRequest::request(path, &i2cdev) == SYS_ERR_OK)
    172e:	a901      	add	r1, sp, #4
    1730:	0028      	movs	r0, r5
    1732:	4b13      	ldr	r3, [pc, #76]	; (1780 <_ZN2GI2IOC1EPc+0x7c>)
    1734:	4798      	blx	r3
    1736:	2800      	cmp	r0, #0
    1738:	d104      	bne.n	1744 <_ZN2GI2IOC1EPc+0x40>
		devHandler = (void *)i2cdev;
    173a:	9b01      	ldr	r3, [sp, #4]
    173c:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_I2C;
    173e:	2303      	movs	r3, #3
    1740:	7063      	strb	r3, [r4, #1]
    1742:	e7f1      	b.n	1728 <_ZN2GI2IOC1EPc+0x24>
	else if(GI::Dev::DevRequest::request(path, &spiDev) == SYS_ERR_OK)
    1744:	a902      	add	r1, sp, #8
    1746:	0028      	movs	r0, r5
    1748:	4b0e      	ldr	r3, [pc, #56]	; (1784 <_ZN2GI2IOC1EPc+0x80>)
    174a:	4798      	blx	r3
    174c:	2800      	cmp	r0, #0
    174e:	d104      	bne.n	175a <_ZN2GI2IOC1EPc+0x56>
		devHandler = (void *)spiDev;
    1750:	9b02      	ldr	r3, [sp, #8]
    1752:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_SPI;
    1754:	2304      	movs	r3, #4
    1756:	7063      	strb	r3, [r4, #1]
    1758:	e7e6      	b.n	1728 <_ZN2GI2IOC1EPc+0x24>
	else if(GI::Dev::DevRequest::request(path, &uartDev) == SYS_ERR_OK)
    175a:	a903      	add	r1, sp, #12
    175c:	0028      	movs	r0, r5
    175e:	4b0a      	ldr	r3, [pc, #40]	; (1788 <_ZN2GI2IOC1EPc+0x84>)
    1760:	4798      	blx	r3
    1762:	2800      	cmp	r0, #0
    1764:	d003      	beq.n	176e <_ZN2GI2IOC1EPc+0x6a>
		ioDevType = IO_DEV_NULL;
    1766:	2300      	movs	r3, #0
    1768:	7063      	strb	r3, [r4, #1]
		devHandler = NULL;
    176a:	6063      	str	r3, [r4, #4]
    176c:	e7dc      	b.n	1728 <_ZN2GI2IOC1EPc+0x24>
		devHandler = (void *)uartDev;
    176e:	9b03      	ldr	r3, [sp, #12]
    1770:	6063      	str	r3, [r4, #4]
		ioDevType = IO_DEV_UART;
    1772:	2302      	movs	r3, #2
    1774:	7063      	strb	r3, [r4, #1]
    1776:	e7d7      	b.n	1728 <_ZN2GI2IOC1EPc+0x24>
    1778:	00002079 	.word	0x00002079
    177c:	000014c9 	.word	0x000014c9
    1780:	00001521 	.word	0x00001521
    1784:	00001579 	.word	0x00001579
    1788:	000015d1 	.word	0x000015d1

0000178c <_ZN2GI2IO5writeEb>:
    }
    return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::write(bool state)
{
    178c:	b510      	push	{r4, lr}
	if(!devHandler || !ioDevType)
    178e:	6842      	ldr	r2, [r0, #4]
    1790:	2a00      	cmp	r2, #0
    1792:	d008      	beq.n	17a6 <_ZN2GI2IO5writeEb+0x1a>
    1794:	7843      	ldrb	r3, [r0, #1]
    1796:	2b00      	cmp	r3, #0
    1798:	d008      	beq.n	17ac <_ZN2GI2IO5writeEb+0x20>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    179a:	2b01      	cmp	r3, #1
    179c:	d109      	bne.n	17b2 <_ZN2GI2IO5writeEb+0x26>
	{
	case IO_DEV_GPIO:
		return ((GI::Dev::Gpio *)devHandler)->setOut(state);
    179e:	0010      	movs	r0, r2
    17a0:	4b05      	ldr	r3, [pc, #20]	; (17b8 <_ZN2GI2IO5writeEb+0x2c>)
    17a2:	4798      	blx	r3
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}
    17a4:	bd10      	pop	{r4, pc}
		return SYS_ERR_NO_REGISTERED_DEVICE;
    17a6:	2011      	movs	r0, #17
    17a8:	4240      	negs	r0, r0
    17aa:	e7fb      	b.n	17a4 <_ZN2GI2IO5writeEb+0x18>
    17ac:	2011      	movs	r0, #17
    17ae:	4240      	negs	r0, r0
    17b0:	e7f8      	b.n	17a4 <_ZN2GI2IO5writeEb+0x18>
	return SYS_ERR_NOT_IMPLEMENTED;
    17b2:	2008      	movs	r0, #8
    17b4:	4240      	negs	r0, r0
    17b6:	e7f5      	b.n	17a4 <_ZN2GI2IO5writeEb+0x18>
    17b8:	000019e1 	.word	0x000019e1

000017bc <_ZN2GI2IO5writeEPcb>:
{
    17bc:	b510      	push	{r4, lr}
    17be:	b084      	sub	sp, #16
    17c0:	000c      	movs	r4, r1
	GI::IO tmp_io = GI::IO((char *)path);
    17c2:	0001      	movs	r1, r0
    17c4:	a801      	add	r0, sp, #4
    17c6:	4b04      	ldr	r3, [pc, #16]	; (17d8 <_ZN2GI2IO5writeEPcb+0x1c>)
    17c8:	4798      	blx	r3
	return tmp_io.write(state);
    17ca:	0021      	movs	r1, r4
    17cc:	a801      	add	r0, sp, #4
    17ce:	4b03      	ldr	r3, [pc, #12]	; (17dc <_ZN2GI2IO5writeEPcb+0x20>)
    17d0:	4798      	blx	r3
}
    17d2:	b004      	add	sp, #16
    17d4:	bd10      	pop	{r4, pc}
    17d6:	46c0      	nop			; (mov r8, r8)
    17d8:	00001705 	.word	0x00001705
    17dc:	0000178d 	.word	0x0000178d

000017e0 <_ZN2GI2IO4readEPb>:
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}

SysErr GI::IO::read(bool *state)
{
    17e0:	b510      	push	{r4, lr}
    17e2:	b082      	sub	sp, #8
    17e4:	000c      	movs	r4, r1
	if(!devHandler || !ioDevType)
    17e6:	6842      	ldr	r2, [r0, #4]
    17e8:	2a00      	cmp	r2, #0
    17ea:	d012      	beq.n	1812 <_ZN2GI2IO4readEPb+0x32>
    17ec:	7843      	ldrb	r3, [r0, #1]
    17ee:	2b00      	cmp	r3, #0
    17f0:	d012      	beq.n	1818 <_ZN2GI2IO4readEPb+0x38>
		return SYS_ERR_NO_REGISTERED_DEVICE;
	switch((int)ioDevType)
    17f2:	2b01      	cmp	r3, #1
    17f4:	d113      	bne.n	181e <_ZN2GI2IO4readEPb+0x3e>
	{
	case IO_DEV_GPIO:
		u32 data;
		SysErr res = ((GI::Dev::Gpio *)devHandler)->getIn(&data);
    17f6:	a901      	add	r1, sp, #4
    17f8:	0010      	movs	r0, r2
    17fa:	4b0a      	ldr	r3, [pc, #40]	; (1824 <_ZN2GI2IO4readEPb+0x44>)
    17fc:	4798      	blx	r3
		if(data)
    17fe:	9b01      	ldr	r3, [sp, #4]
    1800:	2b00      	cmp	r3, #0
    1802:	d003      	beq.n	180c <_ZN2GI2IO4readEPb+0x2c>
			*state = true;
    1804:	2301      	movs	r3, #1
    1806:	7023      	strb	r3, [r4, #0]
		else
			*state = false;
		return res;
	}
	return SYS_ERR_NOT_IMPLEMENTED;
}
    1808:	b002      	add	sp, #8
    180a:	bd10      	pop	{r4, pc}
			*state = false;
    180c:	2300      	movs	r3, #0
    180e:	7023      	strb	r3, [r4, #0]
    1810:	e7fa      	b.n	1808 <_ZN2GI2IO4readEPb+0x28>
		return SYS_ERR_NO_REGISTERED_DEVICE;
    1812:	2011      	movs	r0, #17
    1814:	4240      	negs	r0, r0
    1816:	e7f7      	b.n	1808 <_ZN2GI2IO4readEPb+0x28>
    1818:	2011      	movs	r0, #17
    181a:	4240      	negs	r0, r0
    181c:	e7f4      	b.n	1808 <_ZN2GI2IO4readEPb+0x28>
	return SYS_ERR_NOT_IMPLEMENTED;
    181e:	2008      	movs	r0, #8
    1820:	4240      	negs	r0, r0
    1822:	e7f1      	b.n	1808 <_ZN2GI2IO4readEPb+0x28>
    1824:	00001aa5 	.word	0x00001aa5

00001828 <_ZN2GI2IO4readEPcPb>:
	GI::IO tmp_io = GI::IO((char *)path);
	return tmp_io.read(buff, len);
}

SysErr GI::IO::read(char *path, bool *state)/* Bit device */
{
    1828:	b510      	push	{r4, lr}
    182a:	b084      	sub	sp, #16
    182c:	000c      	movs	r4, r1
	GI::IO tmp_io = GI::IO((char *)path);
    182e:	0001      	movs	r1, r0
    1830:	a801      	add	r0, sp, #4
    1832:	4b04      	ldr	r3, [pc, #16]	; (1844 <_ZN2GI2IO4readEPcPb+0x1c>)
    1834:	4798      	blx	r3
	return tmp_io.read(state);
    1836:	0021      	movs	r1, r4
    1838:	a801      	add	r0, sp, #4
    183a:	4b03      	ldr	r3, [pc, #12]	; (1848 <_ZN2GI2IO4readEPcPb+0x20>)
    183c:	4798      	blx	r3
}
    183e:	b004      	add	sp, #16
    1840:	bd10      	pop	{r4, pc}
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	00001705 	.word	0x00001705
    1848:	000017e1 	.word	0x000017e1

0000184c <_ZN2GI3Sys5Timer6enableEb>:
#endif
	enable(true);
}
//#####################################################
void GI::Sys::Timer::enable(bool action)
{
    184c:	b530      	push	{r4, r5, lr}
	if (action)
    184e:	2900      	cmp	r1, #0
    1850:	d105      	bne.n	185e <_ZN2GI3Sys5Timer6enableEb+0x12>
	{
		sTimmerTickValue = (sTimmerInterval + STimerCnt)&(u64)0x7fffffffffffffff;
	}
	else
	{
		sTimmerTickValue = sTimmerTickValue | (u64)(-0x7fffffffffffffff - 1);
    1852:	2380      	movs	r3, #128	; 0x80
    1854:	061b      	lsls	r3, r3, #24
    1856:	68c2      	ldr	r2, [r0, #12]
    1858:	4313      	orrs	r3, r2
    185a:	60c3      	str	r3, [r0, #12]
	}
}
    185c:	bd30      	pop	{r4, r5, pc}
		sTimmerTickValue = (sTimmerInterval + STimerCnt)&(u64)0x7fffffffffffffff;
    185e:	4b06      	ldr	r3, [pc, #24]	; (1878 <_ZN2GI3Sys5Timer6enableEb+0x2c>)
    1860:	681a      	ldr	r2, [r3, #0]
    1862:	685b      	ldr	r3, [r3, #4]
    1864:	6804      	ldr	r4, [r0, #0]
    1866:	6845      	ldr	r5, [r0, #4]
    1868:	1912      	adds	r2, r2, r4
    186a:	416b      	adcs	r3, r5
    186c:	6082      	str	r2, [r0, #8]
    186e:	005b      	lsls	r3, r3, #1
    1870:	085b      	lsrs	r3, r3, #1
    1872:	60c3      	str	r3, [r0, #12]
    1874:	e7f2      	b.n	185c <_ZN2GI3Sys5Timer6enableEb+0x10>
    1876:	46c0      	nop			; (mov r8, r8)
    1878:	200001a8 	.word	0x200001a8

0000187c <_ZN2GI3Sys5TimerC1Ey>:
GI::Sys::Timer::Timer(u64 interval)
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	0004      	movs	r4, r0
    1880:	0016      	movs	r6, r2
    1882:	001d      	movs	r5, r3
	memset(this, 0, sizeof(*this));
    1884:	2210      	movs	r2, #16
    1886:	2100      	movs	r1, #0
    1888:	4b05      	ldr	r3, [pc, #20]	; (18a0 <_ZN2GI3Sys5TimerC1Ey+0x24>)
    188a:	4798      	blx	r3
	sTimmerInterval = interval & (u64)0x7fffffffffffffff;
    188c:	6026      	str	r6, [r4, #0]
    188e:	006d      	lsls	r5, r5, #1
    1890:	086d      	lsrs	r5, r5, #1
    1892:	6065      	str	r5, [r4, #4]
	enable(true);
    1894:	2101      	movs	r1, #1
    1896:	0020      	movs	r0, r4
    1898:	4b02      	ldr	r3, [pc, #8]	; (18a4 <_ZN2GI3Sys5TimerC1Ey+0x28>)
    189a:	4798      	blx	r3
}
    189c:	0020      	movs	r0, r4
    189e:	bd70      	pop	{r4, r5, r6, pc}
    18a0:	00002079 	.word	0x00002079
    18a4:	0000184d 	.word	0x0000184d

000018a8 <_ZN2GI3Sys5Timer8intervalEy>:
{
    18a8:	b510      	push	{r4, lr}
	sTimmerInterval = interval & (u64)0x7fffffffffffffff;
    18aa:	6002      	str	r2, [r0, #0]
    18ac:	005b      	lsls	r3, r3, #1
    18ae:	085b      	lsrs	r3, r3, #1
    18b0:	6043      	str	r3, [r0, #4]
	enable(true);
    18b2:	2101      	movs	r1, #1
    18b4:	4b01      	ldr	r3, [pc, #4]	; (18bc <_ZN2GI3Sys5Timer8intervalEy+0x14>)
    18b6:	4798      	blx	r3
}
    18b8:	bd10      	pop	{r4, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	0000184d 	.word	0x0000184d

000018c0 <_ZN2GI3Sys5Timer4tickEv>:
//#####################################################
bool GI::Sys::Timer::tick()
{
    18c0:	b570      	push	{r4, r5, r6, lr}
	if(!(sTimmerTickValue & (u64)(-0x7fffffffffffffff - 1)))
    18c2:	6881      	ldr	r1, [r0, #8]
    18c4:	68c3      	ldr	r3, [r0, #12]
    18c6:	2b00      	cmp	r3, #0
    18c8:	db13      	blt.n	18f2 <_ZN2GI3Sys5Timer4tickEv+0x32>
	{
		u64 Temp1 = sTimmerTickValue & (u64)0x7fffffffffffffff;
		u64 Temp2 = STimerCnt & (u64)0x7fffffffffffffff;
    18ca:	4a0b      	ldr	r2, [pc, #44]	; (18f8 <_ZN2GI3Sys5Timer4tickEv+0x38>)
    18cc:	6814      	ldr	r4, [r2, #0]
    18ce:	6855      	ldr	r5, [r2, #4]
		u64 Temp1 = sTimmerTickValue & (u64)0x7fffffffffffffff;
    18d0:	005b      	lsls	r3, r3, #1
    18d2:	085b      	lsrs	r3, r3, #1
		u64 Temp2 = STimerCnt & (u64)0x7fffffffffffffff;
    18d4:	006a      	lsls	r2, r5, #1
    18d6:	0852      	lsrs	r2, r2, #1
		//u64 Temp = (Temp1 - Temp2 - 1)& (u64)(-0x7fffffffffffffff - 1);
		if(Temp2 >= Temp1)
    18d8:	4293      	cmp	r3, r2
    18da:	d901      	bls.n	18e0 <_ZN2GI3Sys5Timer4tickEv+0x20>
		{
			enable(true);
			return true;
		}
	}
	return false;
    18dc:	2000      	movs	r0, #0
}
    18de:	bd70      	pop	{r4, r5, r6, pc}
		if(Temp2 >= Temp1)
    18e0:	4293      	cmp	r3, r2
    18e2:	d101      	bne.n	18e8 <_ZN2GI3Sys5Timer4tickEv+0x28>
    18e4:	42a1      	cmp	r1, r4
    18e6:	d8f9      	bhi.n	18dc <_ZN2GI3Sys5Timer4tickEv+0x1c>
			enable(true);
    18e8:	2101      	movs	r1, #1
    18ea:	4b04      	ldr	r3, [pc, #16]	; (18fc <_ZN2GI3Sys5Timer4tickEv+0x3c>)
    18ec:	4798      	blx	r3
			return true;
    18ee:	2001      	movs	r0, #1
    18f0:	e7f5      	b.n	18de <_ZN2GI3Sys5Timer4tickEv+0x1e>
	return false;
    18f2:	2000      	movs	r0, #0
    18f4:	e7f3      	b.n	18de <_ZN2GI3Sys5Timer4tickEv+0x1e>
    18f6:	46c0      	nop			; (mov r8, r8)
    18f8:	200001a8 	.word	0x200001a8
    18fc:	0000184d 	.word	0x0000184d

00001900 <_GLOBAL__sub_I_fs_err_table>:
		errPath->write((char *)fs_err_table[error]);
	else
		errPath->write((char *)"Unknown error");
#endif
	this->errPath->write((unsigned char *)"\n\r");
}
    1900:	b510      	push	{r4, lr}
static GI::stringArray hystoryTable = GI::stringArray();
    1902:	4c05      	ldr	r4, [pc, #20]	; (1918 <_GLOBAL__sub_I_fs_err_table+0x18>)
    1904:	0020      	movs	r0, r4
    1906:	4b05      	ldr	r3, [pc, #20]	; (191c <_GLOBAL__sub_I_fs_err_table+0x1c>)
    1908:	4798      	blx	r3
    190a:	4a05      	ldr	r2, [pc, #20]	; (1920 <_GLOBAL__sub_I_fs_err_table+0x20>)
    190c:	4905      	ldr	r1, [pc, #20]	; (1924 <_GLOBAL__sub_I_fs_err_table+0x24>)
    190e:	0020      	movs	r0, r4
    1910:	4b05      	ldr	r3, [pc, #20]	; (1928 <_GLOBAL__sub_I_fs_err_table+0x28>)
    1912:	4798      	blx	r3
}
    1914:	bd10      	pop	{r4, pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	200001a0 	.word	0x200001a0
    191c:	00001965 	.word	0x00001965
    1920:	20000000 	.word	0x20000000
    1924:	00001989 	.word	0x00001989
    1928:	00001e69 	.word	0x00001e69

0000192c <_Znwj>:
#include <stdio.h>
#include "operators.h"
#include <stdlib.h>

void* operator new(size_t sz) throw()
{
    192c:	b510      	push	{r4, lr}
    192e:	0001      	movs	r1, r0
//    cerr << "allocating " << sz << " bytes\n";
    void* mem = calloc(1, sz);
    1930:	2001      	movs	r0, #1
    1932:	4b01      	ldr	r3, [pc, #4]	; (1938 <_Znwj+0xc>)
    1934:	4798      	blx	r3
    if (mem)
        return mem;
    else
        return NULL;
}
    1936:	bd10      	pop	{r4, pc}
    1938:	00001fed 	.word	0x00001fed

0000193c <_ZdlPv>:


void operator delete(void* ptr) throw()
{
    193c:	b510      	push	{r4, lr}
//    cerr << "deallocating at " << ptr << endl;
    if(ptr)
    193e:	2800      	cmp	r0, #0
    1940:	d001      	beq.n	1946 <_ZdlPv+0xa>
        free(ptr);
    1942:	4b01      	ldr	r3, [pc, #4]	; (1948 <_ZdlPv+0xc>)
    1944:	4798      	blx	r3
}
    1946:	bd10      	pop	{r4, pc}
    1948:	00002065 	.word	0x00002065

0000194c <_ZN2GI6stringD1Ev>:
}




GI::string::~string()
    194c:	b510      	push	{r4, lr}
    194e:	1e04      	subs	r4, r0, #0
{
	if(!this)
    1950:	d004      	beq.n	195c <_ZN2GI6stringD1Ev+0x10>
		return;
	if (buff)
    1952:	6800      	ldr	r0, [r0, #0]
    1954:	2800      	cmp	r0, #0
    1956:	d001      	beq.n	195c <_ZN2GI6stringD1Ev+0x10>
		free((void *) buff);
    1958:	4b01      	ldr	r3, [pc, #4]	; (1960 <_ZN2GI6stringD1Ev+0x14>)
    195a:	4798      	blx	r3
	memset(this, 0, sizeof(*this));
}
    195c:	0020      	movs	r0, r4
    195e:	bd10      	pop	{r4, pc}
    1960:	00002065 	.word	0x00002065

00001964 <_ZN2GI11stringArrayC1Ev>:
	*Return = 0;
	strcpy(Return, buff + position);
	return Return;
}

GI::stringArray::stringArray()
    1964:	b510      	push	{r4, lr}
    1966:	0004      	movs	r4, r0
{
	memset(this, 0, sizeof(*this));
    1968:	2208      	movs	r2, #8
    196a:	2100      	movs	r1, #0
    196c:	4b04      	ldr	r3, [pc, #16]	; (1980 <_ZN2GI11stringArrayC1Ev+0x1c>)
    196e:	4798      	blx	r3
	array = (GI::string **)calloc(1, sizeof(GI::string *));
    1970:	2104      	movs	r1, #4
    1972:	2001      	movs	r0, #1
    1974:	4b03      	ldr	r3, [pc, #12]	; (1984 <_ZN2GI11stringArrayC1Ev+0x20>)
    1976:	4798      	blx	r3
    1978:	6020      	str	r0, [r4, #0]
}
    197a:	0020      	movs	r0, r4
    197c:	bd10      	pop	{r4, pc}
    197e:	46c0      	nop			; (mov r8, r8)
    1980:	00002079 	.word	0x00002079
    1984:	00001fed 	.word	0x00001fed

00001988 <_ZN2GI11stringArrayD1Ev>:

GI::stringArray::~stringArray()
    1988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    198a:	1e04      	subs	r4, r0, #0
{
	if(!this)
    198c:	d01e      	beq.n	19cc <_ZN2GI11stringArrayD1Ev+0x44>
		return;
	if(!array)
    198e:	6803      	ldr	r3, [r0, #0]
    1990:	2b00      	cmp	r3, #0
    1992:	d01b      	beq.n	19cc <_ZN2GI11stringArrayD1Ev+0x44>
		return;
	while(itemsCount)
    1994:	6843      	ldr	r3, [r0, #4]
    1996:	2b00      	cmp	r3, #0
    1998:	d015      	beq.n	19c6 <_ZN2GI11stringArrayD1Ev+0x3e>
	{
		delete array[itemsCount - 1];
    199a:	4f0d      	ldr	r7, [pc, #52]	; (19d0 <_ZN2GI11stringArrayD1Ev+0x48>)
    199c:	4e0d      	ldr	r6, [pc, #52]	; (19d4 <_ZN2GI11stringArrayD1Ev+0x4c>)
    199e:	e004      	b.n	19aa <_ZN2GI11stringArrayD1Ev+0x22>
		itemsCount--;
    19a0:	6863      	ldr	r3, [r4, #4]
    19a2:	3b01      	subs	r3, #1
    19a4:	6063      	str	r3, [r4, #4]
	while(itemsCount)
    19a6:	2b00      	cmp	r3, #0
    19a8:	d00d      	beq.n	19c6 <_ZN2GI11stringArrayD1Ev+0x3e>
		delete array[itemsCount - 1];
    19aa:	4a0b      	ldr	r2, [pc, #44]	; (19d8 <_ZN2GI11stringArrayD1Ev+0x50>)
    19ac:	4694      	mov	ip, r2
    19ae:	4463      	add	r3, ip
    19b0:	009b      	lsls	r3, r3, #2
    19b2:	6822      	ldr	r2, [r4, #0]
    19b4:	589d      	ldr	r5, [r3, r2]
    19b6:	2d00      	cmp	r5, #0
    19b8:	d0f2      	beq.n	19a0 <_ZN2GI11stringArrayD1Ev+0x18>
    19ba:	0028      	movs	r0, r5
    19bc:	47b8      	blx	r7
    19be:	2110      	movs	r1, #16
    19c0:	0028      	movs	r0, r5
    19c2:	47b0      	blx	r6
    19c4:	e7ec      	b.n	19a0 <_ZN2GI11stringArrayD1Ev+0x18>
	}
	free(array);
    19c6:	6820      	ldr	r0, [r4, #0]
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <_ZN2GI11stringArrayD1Ev+0x54>)
    19ca:	4798      	blx	r3
	array = NULL;
}
    19cc:	0020      	movs	r0, r4
    19ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19d0:	0000194d 	.word	0x0000194d
    19d4:	00001e77 	.word	0x00001e77
    19d8:	3fffffff 	.word	0x3fffffff
    19dc:	00002065 	.word	0x00002065

000019e0 <_ZN2GI3Dev4Gpio6setOutEj>:
	setMode(CfgGpio::GPIO_IN_FLOATING, multiPinMask);
}
/*#####################################################*/
SysErr GI::Dev::Gpio::setOut(unsigned int value)
{
	if (!this)
    19e0:	2800      	cmp	r0, #0
    19e2:	d022      	beq.n	1a2a <_ZN2GI3Dev4Gpio6setOutEj+0x4a>
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    19e4:	6843      	ldr	r3, [r0, #4]
    19e6:	691b      	ldr	r3, [r3, #16]
	if (int_cfg->multiPin)
    19e8:	7c9a      	ldrb	r2, [r3, #18]
		unsigned int state = value;
		if (int_cfg->reverse)
			state = (~state) & 0x01;
		port_pin_set_output_level(int_cfg->pin, state);
	}
	return SYS_ERR_OK;
    19ea:	2000      	movs	r0, #0
	if (int_cfg->multiPin)
    19ec:	2a00      	cmp	r2, #0
    19ee:	d112      	bne.n	1a16 <_ZN2GI3Dev4Gpio6setOutEj+0x36>
		if (int_cfg->reverse)
    19f0:	7c1a      	ldrb	r2, [r3, #16]
    19f2:	2a00      	cmp	r2, #0
    19f4:	d002      	beq.n	19fc <_ZN2GI3Dev4Gpio6setOutEj+0x1c>
			state = (~state) & 0x01;
    19f6:	2201      	movs	r2, #1
    19f8:	438a      	bics	r2, r1
    19fa:	0011      	movs	r1, r2
		port_pin_set_output_level(int_cfg->pin, state);
    19fc:	7b1b      	ldrb	r3, [r3, #12]
	if (port_index < PORT_INST_NUM) {
    19fe:	09da      	lsrs	r2, r3, #7
		return NULL;
    1a00:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1a02:	2a00      	cmp	r2, #0
    1a04:	dd08      	ble.n	1a18 <_ZN2GI3Dev4Gpio6setOutEj+0x38>
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a06:	221f      	movs	r2, #31
    1a08:	401a      	ands	r2, r3
    1a0a:	2301      	movs	r3, #1
    1a0c:	4093      	lsls	r3, r2

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1a0e:	2900      	cmp	r1, #0
    1a10:	d108      	bne.n	1a24 <_ZN2GI3Dev4Gpio6setOutEj+0x44>
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a12:	6143      	str	r3, [r0, #20]
	return SYS_ERR_OK;
    1a14:	2000      	movs	r0, #0
}
    1a16:	4770      	bx	lr
		return &(ports[port_index]->Group[group_index]);
    1a18:	0958      	lsrs	r0, r3, #5
    1a1a:	01c0      	lsls	r0, r0, #7
    1a1c:	4a04      	ldr	r2, [pc, #16]	; (1a30 <_ZN2GI3Dev4Gpio6setOutEj+0x50>)
    1a1e:	4694      	mov	ip, r2
    1a20:	4460      	add	r0, ip
    1a22:	e7f0      	b.n	1a06 <_ZN2GI3Dev4Gpio6setOutEj+0x26>
		port_base->OUTSET.reg = pin_mask;
    1a24:	6183      	str	r3, [r0, #24]
	return SYS_ERR_OK;
    1a26:	2000      	movs	r0, #0
    1a28:	e7f5      	b.n	1a16 <_ZN2GI3Dev4Gpio6setOutEj+0x36>
		return SYS_ERR_INVALID_HANDLER;
    1a2a:	2002      	movs	r0, #2
    1a2c:	4240      	negs	r0, r0
    1a2e:	e7f2      	b.n	1a16 <_ZN2GI3Dev4Gpio6setOutEj+0x36>
    1a30:	41004400 	.word	0x41004400

00001a34 <_ZN2GI3Dev4Gpio2inEv>:
/*#####################################################*/
signed int GI::Dev::Gpio::in()
{
	if (!this)
    1a34:	2800      	cmp	r0, #0
    1a36:	d030      	beq.n	1a9a <_ZN2GI3Dev4Gpio2inEv+0x66>
		return false;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1a38:	6843      	ldr	r3, [r0, #4]
    1a3a:	691b      	ldr	r3, [r3, #16]
	if (int_cfg->multiPin)
    1a3c:	7c9a      	ldrb	r2, [r3, #18]
	{
		return false;//BaseAddr->DIR & (int_cfg->pin % 32);
    1a3e:	2000      	movs	r0, #0
	if (int_cfg->multiPin)
    1a40:	2a00      	cmp	r2, #0
    1a42:	d10f      	bne.n	1a64 <_ZN2GI3Dev4Gpio2inEv+0x30>
	}
	else
	{
		if (int_cfg->reverse)
    1a44:	7c1a      	ldrb	r2, [r3, #16]
    1a46:	2a00      	cmp	r2, #0
    1a48:	d013      	beq.n	1a72 <_ZN2GI3Dev4Gpio2inEv+0x3e>
		{
			if(port_pin_get_input_level(int_cfg->pin))
    1a4a:	7b19      	ldrb	r1, [r3, #12]
	if (port_index < PORT_INST_NUM) {
    1a4c:	09ca      	lsrs	r2, r1, #7
		return NULL;
    1a4e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a50:	2a00      	cmp	r2, #0
    1a52:	dd08      	ble.n	1a66 <_ZN2GI3Dev4Gpio2inEv+0x32>
	return (port_base->IN.reg & pin_mask);
    1a54:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a56:	221f      	movs	r2, #31
    1a58:	400a      	ands	r2, r1
    1a5a:	2301      	movs	r3, #1
    1a5c:	4093      	lsls	r3, r2
	return (port_base->IN.reg & pin_mask);
    1a5e:	4018      	ands	r0, r3
		return false;
    1a60:	4243      	negs	r3, r0
    1a62:	4158      	adcs	r0, r3
				return true;
		}
		else
			return port_pin_get_input_level(int_cfg->pin);
	}
}
    1a64:	4770      	bx	lr
		return &(ports[port_index]->Group[group_index]);
    1a66:	094b      	lsrs	r3, r1, #5
    1a68:	01db      	lsls	r3, r3, #7
    1a6a:	4a0d      	ldr	r2, [pc, #52]	; (1aa0 <_ZN2GI3Dev4Gpio2inEv+0x6c>)
    1a6c:	4694      	mov	ip, r2
    1a6e:	4463      	add	r3, ip
    1a70:	e7f0      	b.n	1a54 <_ZN2GI3Dev4Gpio2inEv+0x20>
			return port_pin_get_input_level(int_cfg->pin);
    1a72:	7b19      	ldrb	r1, [r3, #12]
	if (port_index < PORT_INST_NUM) {
    1a74:	09ca      	lsrs	r2, r1, #7
		return NULL;
    1a76:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1a78:	2a00      	cmp	r2, #0
    1a7a:	dd08      	ble.n	1a8e <_ZN2GI3Dev4Gpio2inEv+0x5a>
    1a7c:	6a18      	ldr	r0, [r3, #32]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a7e:	221f      	movs	r2, #31
    1a80:	400a      	ands	r2, r1
    1a82:	2301      	movs	r3, #1
    1a84:	4093      	lsls	r3, r2
	return (port_base->IN.reg & pin_mask);
    1a86:	4018      	ands	r0, r3
    1a88:	1e43      	subs	r3, r0, #1
    1a8a:	4198      	sbcs	r0, r3
    1a8c:	e7ea      	b.n	1a64 <_ZN2GI3Dev4Gpio2inEv+0x30>
		return &(ports[port_index]->Group[group_index]);
    1a8e:	094b      	lsrs	r3, r1, #5
    1a90:	01db      	lsls	r3, r3, #7
    1a92:	4a03      	ldr	r2, [pc, #12]	; (1aa0 <_ZN2GI3Dev4Gpio2inEv+0x6c>)
    1a94:	4694      	mov	ip, r2
    1a96:	4463      	add	r3, ip
    1a98:	e7f0      	b.n	1a7c <_ZN2GI3Dev4Gpio2inEv+0x48>
		return false;
    1a9a:	2000      	movs	r0, #0
    1a9c:	e7e2      	b.n	1a64 <_ZN2GI3Dev4Gpio2inEv+0x30>
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	41004400 	.word	0x41004400

00001aa4 <_ZN2GI3Dev4Gpio5getInEPm>:
/*#####################################################*/
SysErr GI::Dev::Gpio::getIn(unsigned long *value)
{
    1aa4:	b510      	push	{r4, lr}
    1aa6:	000c      	movs	r4, r1
	if (!this)
    1aa8:	2800      	cmp	r0, #0
    1aaa:	d004      	beq.n	1ab6 <_ZN2GI3Dev4Gpio5getInEPm+0x12>
		return SYS_ERR_INVALID_HANDLER;
	*value = (unsigned int)in();
    1aac:	4b03      	ldr	r3, [pc, #12]	; (1abc <_ZN2GI3Dev4Gpio5getInEPm+0x18>)
    1aae:	4798      	blx	r3
    1ab0:	6020      	str	r0, [r4, #0]
	return SYS_ERR_OK;
    1ab2:	2000      	movs	r0, #0
}
    1ab4:	bd10      	pop	{r4, pc}
		return SYS_ERR_INVALID_HANDLER;
    1ab6:	2002      	movs	r0, #2
    1ab8:	4240      	negs	r0, r0
    1aba:	e7fb      	b.n	1ab4 <_ZN2GI3Dev4Gpio5getInEPm+0x10>
    1abc:	00001a35 	.word	0x00001a35

00001ac0 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE>:
/*#####################################################*/
SysErr GI::Dev::Gpio::setMode(CfgGpio::gpioMode_e mode)
{
    1ac0:	b510      	push	{r4, lr}
    1ac2:	b082      	sub	sp, #8
	if (!this)
    1ac4:	2800      	cmp	r0, #0
    1ac6:	d02f      	beq.n	1b28 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x68>
		return SYS_ERR_INVALID_HANDLER;
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1ac8:	6843      	ldr	r3, [r0, #4]
    1aca:	691c      	ldr	r4, [r3, #16]
	if(int_cfg->multiPin)
    1acc:	7ca3      	ldrb	r3, [r4, #18]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d12d      	bne.n	1b2e <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x6e>
		return SYS_ERR_INVALID_COMMAND;
	multiPinMask = 1 << (int_cfg->pin % 32);
    1ad2:	221f      	movs	r2, #31
    1ad4:	68e3      	ldr	r3, [r4, #12]
    1ad6:	401a      	ands	r2, r3
    1ad8:	2301      	movs	r3, #1
    1ada:	4093      	lsls	r3, r2
    1adc:	6103      	str	r3, [r0, #16]
	
	struct port_config config_port_pin;
	switch (mode)
    1ade:	2901      	cmp	r1, #1
    1ae0:	d017      	beq.n	1b12 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x52>
    1ae2:	2900      	cmp	r1, #0
    1ae4:	d01a      	beq.n	1b1c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x5c>
    1ae6:	2902      	cmp	r1, #2
    1ae8:	d00d      	beq.n	1b06 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x46>
    1aea:	2903      	cmp	r1, #3
    1aec:	d122      	bne.n	1b34 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x74>
	{
	case CfgGpio::GPIO_IN_PULL_UP:
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1aee:	ab01      	add	r3, sp, #4
    1af0:	2200      	movs	r2, #0
    1af2:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1af4:	3201      	adds	r2, #1
    1af6:	705a      	strb	r2, [r3, #1]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
		break;
	default:
		return SYS_ERR_INVALID_COMMAND;
	}
	port_pin_set_config(int_cfg->pin, &config_port_pin);
    1af8:	7b20      	ldrb	r0, [r4, #12]
    1afa:	a901      	add	r1, sp, #4
    1afc:	4b0f      	ldr	r3, [pc, #60]	; (1b3c <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x7c>)
    1afe:	4798      	blx	r3
	return SYS_ERR_OK;
    1b00:	2000      	movs	r0, #0
}
    1b02:	b002      	add	sp, #8
    1b04:	bd10      	pop	{r4, pc}
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1b06:	ab01      	add	r3, sp, #4
    1b08:	2200      	movs	r2, #0
    1b0a:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
    1b0c:	3202      	adds	r2, #2
    1b0e:	705a      	strb	r2, [r3, #1]
		break;
    1b10:	e7f2      	b.n	1af8 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x38>
		config_port_pin.direction  = PORT_PIN_DIR_INPUT;
    1b12:	ab01      	add	r3, sp, #4
    1b14:	2200      	movs	r2, #0
    1b16:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    1b18:	705a      	strb	r2, [r3, #1]
		break;
    1b1a:	e7ed      	b.n	1af8 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x38>
		config_port_pin.direction  = PORT_PIN_DIR_OUTPUT_WTH_READBACK;
    1b1c:	ab01      	add	r3, sp, #4
    1b1e:	2202      	movs	r2, #2
    1b20:	701a      	strb	r2, [r3, #0]
		config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    1b22:	2200      	movs	r2, #0
    1b24:	705a      	strb	r2, [r3, #1]
		break;
    1b26:	e7e7      	b.n	1af8 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x38>
		return SYS_ERR_INVALID_HANDLER;
    1b28:	2002      	movs	r0, #2
    1b2a:	4240      	negs	r0, r0
    1b2c:	e7e9      	b.n	1b02 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x42>
		return SYS_ERR_INVALID_COMMAND;
    1b2e:	2005      	movs	r0, #5
    1b30:	4240      	negs	r0, r0
    1b32:	e7e6      	b.n	1b02 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x42>
		return SYS_ERR_INVALID_COMMAND;
    1b34:	2005      	movs	r0, #5
    1b36:	4240      	negs	r0, r0
    1b38:	e7e3      	b.n	1b02 <_ZN2GI3Dev4Gpio7setModeEN7CfgGpio10gpioMode_eE+0x42>
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	000013b9 	.word	0x000013b9

00001b40 <_ZN2GI3Dev4GpioC1EP10ioSettings>:
GI::Dev::Gpio::Gpio(ioSettings *cfg)
    1b40:	b570      	push	{r4, r5, r6, lr}
    1b42:	0004      	movs	r4, r0
    1b44:	000d      	movs	r5, r1
	memset(this, 0, sizeof(*this));
    1b46:	2234      	movs	r2, #52	; 0x34
    1b48:	2100      	movs	r1, #0
    1b4a:	4b09      	ldr	r3, [pc, #36]	; (1b70 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x30>)
    1b4c:	4798      	blx	r3
	if(cfg->info.ioType != ioSettings::info_s::ioType_GPIO)
    1b4e:	782b      	ldrb	r3, [r5, #0]
    1b50:	2b01      	cmp	r3, #1
    1b52:	d001      	beq.n	1b58 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x18>
}
    1b54:	0020      	movs	r0, r4
    1b56:	bd70      	pop	{r4, r5, r6, pc}
	this->cfg = cfg;
    1b58:	6065      	str	r5, [r4, #4]
	CfgGpio *int_cfg = (CfgGpio *)cfg->cfg;
    1b5a:	692d      	ldr	r5, [r5, #16]
	setMode(int_cfg->gpioMode);
    1b5c:	7c69      	ldrb	r1, [r5, #17]
    1b5e:	0020      	movs	r0, r4
    1b60:	4b04      	ldr	r3, [pc, #16]	; (1b74 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x34>)
    1b62:	4798      	blx	r3
	setOut(int_cfg->defValue);
    1b64:	6969      	ldr	r1, [r5, #20]
    1b66:	0020      	movs	r0, r4
    1b68:	4b03      	ldr	r3, [pc, #12]	; (1b78 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x38>)
    1b6a:	4798      	blx	r3
    1b6c:	e7f2      	b.n	1b54 <_ZN2GI3Dev4GpioC1EP10ioSettings+0x14>
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	00002079 	.word	0x00002079
    1b74:	00001ac1 	.word	0x00001ac1
    1b78:	000019e1 	.word	0x000019e1

00001b7c <_ZN2GI3Dev4UartC1EP10ioSettings>:
volatile bool uart_semaphore[UART_INTERFACE_COUNT];
#endif
extern unsigned long FCPU;

/*#####################################################*/
GI::Dev::Uart::Uart(ioSettings *cfg)
    1b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b7e:	b091      	sub	sp, #68	; 0x44
    1b80:	0005      	movs	r5, r0
    1b82:	1e0c      	subs	r4, r1, #0
{
	if (!cfg)
    1b84:	d006      	beq.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		return;
	memset(this, 0, sizeof(*this));
    1b86:	2218      	movs	r2, #24
    1b88:	2100      	movs	r1, #0
    1b8a:	4b6b      	ldr	r3, [pc, #428]	; (1d38 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1bc>)
    1b8c:	4798      	blx	r3
	if(cfg->info.ioType != ioSettings::info_s::ioType_UART)
    1b8e:	7823      	ldrb	r3, [r4, #0]
    1b90:	2b02      	cmp	r3, #2
    1b92:	d002      	beq.n	1b9a <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e>
	if(int_cfg->stopBits == CfgUart::STOP_BITS_TWO)
		usart_conf.stopbits = USART_STOPBITS_2;

	usart_init(uart_module, hw, &usart_conf);
	usart_enable(uart_module);
}
    1b94:	0028      	movs	r0, r5
    1b96:	b011      	add	sp, #68	; 0x44
    1b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(strncmp(cfg->info.name, (char *)"uart-", sizeof("uart-") - 1) && strncmp(cfg->info.name, (char *)"usbcdc-", sizeof("usbcdc-") - 1))
    1b9a:	1c66      	adds	r6, r4, #1
    1b9c:	2205      	movs	r2, #5
    1b9e:	4967      	ldr	r1, [pc, #412]	; (1d3c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c0>)
    1ba0:	0030      	movs	r0, r6
    1ba2:	4b67      	ldr	r3, [pc, #412]	; (1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c4>)
    1ba4:	4798      	blx	r3
    1ba6:	2800      	cmp	r0, #0
    1ba8:	d009      	beq.n	1bbe <_ZN2GI3Dev4UartC1EP10ioSettings+0x42>
    1baa:	2207      	movs	r2, #7
    1bac:	4965      	ldr	r1, [pc, #404]	; (1d44 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c8>)
    1bae:	0030      	movs	r0, r6
    1bb0:	4b63      	ldr	r3, [pc, #396]	; (1d40 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1c4>)
    1bb2:	4798      	blx	r3
    1bb4:	2800      	cmp	r0, #0
    1bb6:	d03c      	beq.n	1c32 <_ZN2GI3Dev4UartC1EP10ioSettings+0xb6>
		err = SYS_ERR_INVALID_PATH;
    1bb8:	23f5      	movs	r3, #245	; 0xf5
    1bba:	702b      	strb	r3, [r5, #0]
		return;
    1bbc:	e7ea      	b.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		unsigned char dev_nr = cfg->info.name[sizeof("uart-") - 1] - '0';
    1bbe:	79a3      	ldrb	r3, [r4, #6]
    1bc0:	3b30      	subs	r3, #48	; 0x30
    1bc2:	b2db      	uxtb	r3, r3
		if(dev_nr >= UART_INTERFACE_COUNT)
    1bc4:	2b05      	cmp	r3, #5
    1bc6:	dd02      	ble.n	1bce <_ZN2GI3Dev4UartC1EP10ioSettings+0x52>
			err = SYS_ERR_INVALID_PATH;
    1bc8:	23f5      	movs	r3, #245	; 0xf5
    1bca:	702b      	strb	r3, [r5, #0]
			return;
    1bcc:	e7e2      	b.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		unitNr = dev_nr;
    1bce:	746b      	strb	r3, [r5, #17]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1bd0:	2280      	movs	r2, #128	; 0x80
    1bd2:	05d2      	lsls	r2, r2, #23
    1bd4:	9200      	str	r2, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1bd6:	2200      	movs	r2, #0
    1bd8:	9201      	str	r2, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1bda:	21ff      	movs	r1, #255	; 0xff
    1bdc:	4668      	mov	r0, sp
    1bde:	8101      	strh	r1, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    1be0:	2100      	movs	r1, #0
    1be2:	7282      	strb	r2, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1be4:	72c2      	strb	r2, [r0, #11]
	config->baudrate         = 9600;
    1be6:	2096      	movs	r0, #150	; 0x96
    1be8:	0180      	lsls	r0, r0, #6
    1bea:	9008      	str	r0, [sp, #32]
	config->receiver_enable  = true;
    1bec:	2001      	movs	r0, #1
    1bee:	2624      	movs	r6, #36	; 0x24
    1bf0:	466f      	mov	r7, sp
    1bf2:	55b8      	strb	r0, [r7, r6]
	config->transmitter_enable = true;
    1bf4:	3601      	adds	r6, #1
    1bf6:	55b8      	strb	r0, [r7, r6]
	config->clock_polarity_inverted = false;
    1bf8:	3025      	adds	r0, #37	; 0x25
    1bfa:	543a      	strb	r2, [r7, r0]
	config->use_external_clock = false;
    1bfc:	3001      	adds	r0, #1
    1bfe:	543a      	strb	r2, [r7, r0]
	config->ext_clock_freq   = 0;
    1c00:	920a      	str	r2, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    1c02:	2088      	movs	r0, #136	; 0x88
    1c04:	0340      	lsls	r0, r0, #13
    1c06:	9003      	str	r0, [sp, #12]
	config->run_in_standby   = false;
    1c08:	202c      	movs	r0, #44	; 0x2c
    1c0a:	543a      	strb	r2, [r7, r0]
	config->generator_source = GCLK_GENERATOR_0;
    1c0c:	3001      	adds	r0, #1
    1c0e:	543a      	strb	r2, [r7, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
    1c10:	920e      	str	r2, [sp, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    1c12:	920f      	str	r2, [sp, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1c14:	9205      	str	r2, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1c16:	823a      	strh	r2, [r7, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1c18:	76fa      	strb	r2, [r7, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    1c1a:	7639      	strb	r1, [r7, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    1c1c:	7739      	strb	r1, [r7, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    1c1e:	7679      	strb	r1, [r7, #25]
	config->receive_pulse_length                        = 19;
    1c20:	2213      	movs	r2, #19
    1c22:	76ba      	strb	r2, [r7, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    1c24:	7779      	strb	r1, [r7, #29]
	switch (unitNr)
    1c26:	2b05      	cmp	r3, #5
    1c28:	d861      	bhi.n	1cee <_ZN2GI3Dev4UartC1EP10ioSettings+0x172>
    1c2a:	009b      	lsls	r3, r3, #2
    1c2c:	4a46      	ldr	r2, [pc, #280]	; (1d48 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1cc>)
    1c2e:	58d3      	ldr	r3, [r2, r3]
    1c30:	469f      	mov	pc, r3
		err = SYS_ERR_INVALID_PARAM;
    1c32:	23fa      	movs	r3, #250	; 0xfa
    1c34:	702b      	strb	r3, [r5, #0]
		return;
    1c36:	e7ad      	b.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		usart_conf.pinmux_pad0 = SERCOM0_PAD0_DEFAULT;
    1c38:	4b44      	ldr	r3, [pc, #272]	; (1d4c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1d0>)
    1c3a:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM0_PAD1_DEFAULT;
    1c3c:	4b44      	ldr	r3, [pc, #272]	; (1d50 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1d4>)
    1c3e:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM0;
    1c40:	4f44      	ldr	r7, [pc, #272]	; (1d54 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1d8>)
	struct usart_module *uart_module = (struct usart_module *)calloc(1, sizeof(struct usart_module));
    1c42:	2134      	movs	r1, #52	; 0x34
    1c44:	2001      	movs	r0, #1
    1c46:	4b44      	ldr	r3, [pc, #272]	; (1d58 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1dc>)
    1c48:	4798      	blx	r3
    1c4a:	1e06      	subs	r6, r0, #0
	if(!uart_module)
    1c4c:	d052      	beq.n	1cf4 <_ZN2GI3Dev4UartC1EP10ioSettings+0x178>
	this->cfg = cfg;
    1c4e:	606c      	str	r4, [r5, #4]
	CfgUart *int_cfg = (CfgUart *)cfg->cfg;
    1c50:	6923      	ldr	r3, [r4, #16]
	udata = (void *)uart_module;
    1c52:	60e8      	str	r0, [r5, #12]
	usart_conf.mux_setting = USART_RX_1_TX_0_XCK_1;
    1c54:	2280      	movs	r2, #128	; 0x80
    1c56:	0352      	lsls	r2, r2, #13
    1c58:	9203      	str	r2, [sp, #12]
	usart_conf.pinmux_pad2 = PINMUX_UNUSED;
    1c5a:	2201      	movs	r2, #1
    1c5c:	4252      	negs	r2, r2
    1c5e:	920e      	str	r2, [sp, #56]	; 0x38
	usart_conf.pinmux_pad3 = PINMUX_UNUSED;
    1c60:	920f      	str	r2, [sp, #60]	; 0x3c
	usart_conf.baudrate    = int_cfg->speed;
    1c62:	695a      	ldr	r2, [r3, #20]
    1c64:	9208      	str	r2, [sp, #32]
	if( int_cfg->parity == CfgUart::PAR_EVEN)
    1c66:	7e9a      	ldrb	r2, [r3, #26]
    1c68:	2a02      	cmp	r2, #2
    1c6a:	d046      	beq.n	1cfa <_ZN2GI3Dev4UartC1EP10ioSettings+0x17e>
	else if( int_cfg->parity == CfgUart::PAR_ODD)
    1c6c:	2a01      	cmp	r2, #1
    1c6e:	d048      	beq.n	1d02 <_ZN2GI3Dev4UartC1EP10ioSettings+0x186>
	if(int_cfg->wordLen == CfgUart::WORD_LEN_5)
    1c70:	7e1a      	ldrb	r2, [r3, #24]
    1c72:	2a00      	cmp	r2, #0
    1c74:	d14a      	bne.n	1d0c <_ZN2GI3Dev4UartC1EP10ioSettings+0x190>
		usart_conf.character_size = USART_CHARACTER_SIZE_5BIT;
    1c76:	3205      	adds	r2, #5
    1c78:	4669      	mov	r1, sp
    1c7a:	72ca      	strb	r2, [r1, #11]
	if(int_cfg->stopBits == CfgUart::STOP_BITS_TWO)
    1c7c:	7e5b      	ldrb	r3, [r3, #25]
    1c7e:	2b01      	cmp	r3, #1
    1c80:	d056      	beq.n	1d30 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1b4>
	usart_init(uart_module, hw, &usart_conf);
    1c82:	466a      	mov	r2, sp
    1c84:	0039      	movs	r1, r7
    1c86:	0030      	movs	r0, r6
    1c88:	4b34      	ldr	r3, [pc, #208]	; (1d5c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e0>)
    1c8a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c8c:	6834      	ldr	r4, [r6, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1c8e:	0020      	movs	r0, r4
    1c90:	4b33      	ldr	r3, [pc, #204]	; (1d60 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e4>)
    1c92:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c94:	231f      	movs	r3, #31
    1c96:	4018      	ands	r0, r3
    1c98:	3b1e      	subs	r3, #30
    1c9a:	4083      	lsls	r3, r0
    1c9c:	4a31      	ldr	r2, [pc, #196]	; (1d64 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1e8>)
    1c9e:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ca0:	6832      	ldr	r2, [r6, #0]
	return (usart_hw->SYNCBUSY.reg);
    1ca2:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d1fc      	bne.n	1ca2 <_ZN2GI3Dev4UartC1EP10ioSettings+0x126>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1ca8:	6823      	ldr	r3, [r4, #0]
    1caa:	2202      	movs	r2, #2
    1cac:	4313      	orrs	r3, r2
    1cae:	6023      	str	r3, [r4, #0]
    1cb0:	e770      	b.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		usart_conf.pinmux_pad0 = SERCOM1_PAD0_DEFAULT;
    1cb2:	2303      	movs	r3, #3
    1cb4:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM1_PAD1_DEFAULT;
    1cb6:	4b2c      	ldr	r3, [pc, #176]	; (1d68 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1ec>)
    1cb8:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM1;
    1cba:	4f2c      	ldr	r7, [pc, #176]	; (1d6c <_ZN2GI3Dev4UartC1EP10ioSettings+0x1f0>)
		break;
    1cbc:	e7c1      	b.n	1c42 <_ZN2GI3Dev4UartC1EP10ioSettings+0xc6>
		usart_conf.pinmux_pad0 = SERCOM2_PAD0_DEFAULT;
    1cbe:	4b2c      	ldr	r3, [pc, #176]	; (1d70 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1f4>)
    1cc0:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM2_PAD1_DEFAULT;
    1cc2:	4b2c      	ldr	r3, [pc, #176]	; (1d74 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1f8>)
    1cc4:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM2;
    1cc6:	4f2c      	ldr	r7, [pc, #176]	; (1d78 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1fc>)
		break;
    1cc8:	e7bb      	b.n	1c42 <_ZN2GI3Dev4UartC1EP10ioSettings+0xc6>
		usart_conf.pinmux_pad0 = SERCOM3_PAD0_DEFAULT;
    1cca:	4b2c      	ldr	r3, [pc, #176]	; (1d7c <_ZN2GI3Dev4UartC1EP10ioSettings+0x200>)
    1ccc:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM3_PAD1_DEFAULT;
    1cce:	4b2c      	ldr	r3, [pc, #176]	; (1d80 <_ZN2GI3Dev4UartC1EP10ioSettings+0x204>)
    1cd0:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM3;
    1cd2:	4f2c      	ldr	r7, [pc, #176]	; (1d84 <_ZN2GI3Dev4UartC1EP10ioSettings+0x208>)
		break;
    1cd4:	e7b5      	b.n	1c42 <_ZN2GI3Dev4UartC1EP10ioSettings+0xc6>
		usart_conf.pinmux_pad0 = SERCOM4_PAD0_DEFAULT;
    1cd6:	4b2c      	ldr	r3, [pc, #176]	; (1d88 <_ZN2GI3Dev4UartC1EP10ioSettings+0x20c>)
    1cd8:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM4_PAD1_DEFAULT;
    1cda:	4b2c      	ldr	r3, [pc, #176]	; (1d8c <_ZN2GI3Dev4UartC1EP10ioSettings+0x210>)
    1cdc:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM4;
    1cde:	4f2c      	ldr	r7, [pc, #176]	; (1d90 <_ZN2GI3Dev4UartC1EP10ioSettings+0x214>)
		break;
    1ce0:	e7af      	b.n	1c42 <_ZN2GI3Dev4UartC1EP10ioSettings+0xc6>
		usart_conf.pinmux_pad0 = SERCOM5_PAD0_DEFAULT;
    1ce2:	4b2c      	ldr	r3, [pc, #176]	; (1d94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x218>)
    1ce4:	930c      	str	r3, [sp, #48]	; 0x30
		usart_conf.pinmux_pad1 = SERCOM5_PAD1_DEFAULT;
    1ce6:	4b2c      	ldr	r3, [pc, #176]	; (1d98 <_ZN2GI3Dev4UartC1EP10ioSettings+0x21c>)
    1ce8:	930d      	str	r3, [sp, #52]	; 0x34
		hw = SERCOM5;
    1cea:	4f2c      	ldr	r7, [pc, #176]	; (1d9c <_ZN2GI3Dev4UartC1EP10ioSettings+0x220>)
		break;
    1cec:	e7a9      	b.n	1c42 <_ZN2GI3Dev4UartC1EP10ioSettings+0xc6>
		err = SYS_ERR_DEVICE_NOT_FOUND;
    1cee:	23ea      	movs	r3, #234	; 0xea
    1cf0:	702b      	strb	r3, [r5, #0]
		return;
    1cf2:	e74f      	b.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		err = SYS_ERR_OUT_OF_MEMORY;
    1cf4:	23fd      	movs	r3, #253	; 0xfd
    1cf6:	702b      	strb	r3, [r5, #0]
		return;
    1cf8:	e74c      	b.n	1b94 <_ZN2GI3Dev4UartC1EP10ioSettings+0x18>
		usart_conf.parity = USART_PARITY_EVEN;
    1cfa:	2200      	movs	r2, #0
    1cfc:	4669      	mov	r1, sp
    1cfe:	810a      	strh	r2, [r1, #8]
    1d00:	e7b6      	b.n	1c70 <_ZN2GI3Dev4UartC1EP10ioSettings+0xf4>
		usart_conf.parity = USART_PARITY_ODD;
    1d02:	2280      	movs	r2, #128	; 0x80
    1d04:	0192      	lsls	r2, r2, #6
    1d06:	4669      	mov	r1, sp
    1d08:	810a      	strh	r2, [r1, #8]
    1d0a:	e7b1      	b.n	1c70 <_ZN2GI3Dev4UartC1EP10ioSettings+0xf4>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_6)
    1d0c:	2a01      	cmp	r2, #1
    1d0e:	d007      	beq.n	1d20 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1a4>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_7)
    1d10:	2a02      	cmp	r2, #2
    1d12:	d009      	beq.n	1d28 <_ZN2GI3Dev4UartC1EP10ioSettings+0x1ac>
	else if(int_cfg->wordLen == CfgUart::WORD_LEN_9)
    1d14:	2a04      	cmp	r2, #4
    1d16:	d1b1      	bne.n	1c7c <_ZN2GI3Dev4UartC1EP10ioSettings+0x100>
		usart_conf.character_size = USART_CHARACTER_SIZE_9BIT;
    1d18:	3a03      	subs	r2, #3
    1d1a:	4669      	mov	r1, sp
    1d1c:	72ca      	strb	r2, [r1, #11]
    1d1e:	e7ad      	b.n	1c7c <_ZN2GI3Dev4UartC1EP10ioSettings+0x100>
		usart_conf.character_size = USART_CHARACTER_SIZE_6BIT;
    1d20:	3205      	adds	r2, #5
    1d22:	4669      	mov	r1, sp
    1d24:	72ca      	strb	r2, [r1, #11]
    1d26:	e7a9      	b.n	1c7c <_ZN2GI3Dev4UartC1EP10ioSettings+0x100>
		usart_conf.character_size = USART_CHARACTER_SIZE_7BIT;
    1d28:	3205      	adds	r2, #5
    1d2a:	4669      	mov	r1, sp
    1d2c:	72ca      	strb	r2, [r1, #11]
    1d2e:	e7a5      	b.n	1c7c <_ZN2GI3Dev4UartC1EP10ioSettings+0x100>
		usart_conf.stopbits = USART_STOPBITS_2;
    1d30:	333f      	adds	r3, #63	; 0x3f
    1d32:	466a      	mov	r2, sp
    1d34:	7293      	strb	r3, [r2, #10]
    1d36:	e7a4      	b.n	1c82 <_ZN2GI3Dev4UartC1EP10ioSettings+0x106>
    1d38:	00002079 	.word	0x00002079
    1d3c:	000022d4 	.word	0x000022d4
    1d40:	0000222d 	.word	0x0000222d
    1d44:	000022dc 	.word	0x000022dc
    1d48:	000022bc 	.word	0x000022bc
    1d4c:	00040003 	.word	0x00040003
    1d50:	00050003 	.word	0x00050003
    1d54:	42000800 	.word	0x42000800
    1d58:	00001fed 	.word	0x00001fed
    1d5c:	00000ec5 	.word	0x00000ec5
    1d60:	00000e35 	.word	0x00000e35
    1d64:	e000e100 	.word	0xe000e100
    1d68:	00010003 	.word	0x00010003
    1d6c:	42000c00 	.word	0x42000c00
    1d70:	00080003 	.word	0x00080003
    1d74:	00090003 	.word	0x00090003
    1d78:	42001000 	.word	0x42001000
    1d7c:	00100003 	.word	0x00100003
    1d80:	00110003 	.word	0x00110003
    1d84:	42001400 	.word	0x42001400
    1d88:	000c0003 	.word	0x000c0003
    1d8c:	000d0003 	.word	0x000d0003
    1d90:	42001800 	.word	0x42001800
    1d94:	00160003 	.word	0x00160003
    1d98:	00170003 	.word	0x00170003
    1d9c:	42001c00 	.word	0x42001c00

00001da0 <_ZN2GI3Sys5ClockC1Ev>:

/**********************************************************************************************
* Global functions
**********************************************************************************************/

GI::Sys::Clock::Clock()
    1da0:	b510      	push	{r4, lr}
    1da2:	0004      	movs	r4, r0
{
	setClk(FCPU);

	system_init();
    1da4:	4b01      	ldr	r3, [pc, #4]	; (1dac <_ZN2GI3Sys5ClockC1Ev+0xc>)
    1da6:	4798      	blx	r3
}
    1da8:	0020      	movs	r0, r4
    1daa:	bd10      	pop	{r4, pc}
    1dac:	00000985 	.word	0x00000985

00001db0 <_ZN2GI3Sys5ClockD1Ev>:

GI::Sys::Clock::~Clock()
{
	//SystemClock_Config(HSI_VALUE, 0, 0);
}
    1db0:	4770      	bx	lr
	...

00001db4 <SysTick_Handler>:
//#####################################################
#ifdef __cplusplus
extern "C" {
#endif
	void SysTick_Handler(void)
	{
    1db4:	b530      	push	{r4, r5, lr}
		STimerCnt++;
    1db6:	4905      	ldr	r1, [pc, #20]	; (1dcc <SysTick_Handler+0x18>)
    1db8:	680a      	ldr	r2, [r1, #0]
    1dba:	684b      	ldr	r3, [r1, #4]
    1dbc:	2401      	movs	r4, #1
    1dbe:	2500      	movs	r5, #0
    1dc0:	1912      	adds	r2, r2, r4
    1dc2:	416b      	adcs	r3, r5
    1dc4:	600a      	str	r2, [r1, #0]
    1dc6:	604b      	str	r3, [r1, #4]
	}
    1dc8:	bd30      	pop	{r4, r5, pc}
    1dca:	46c0      	nop			; (mov r8, r8)
    1dcc:	200001a8 	.word	0x200001a8

00001dd0 <_ZN2GI3Sys7SystimeD1Ev>:
}

GI::Sys::Systime::~Systime()
{
	//RTC.CTRL = RTC_PRESCALER_OFF_gc;
}
    1dd0:	4770      	bx	lr
	...

00001dd4 <_ZN2GI3Sys7SystimeC1Ev>:
GI::Sys::Systime::Systime()
    1dd4:	b530      	push	{r4, r5, lr}
    1dd6:	b085      	sub	sp, #20
    1dd8:	0005      	movs	r5, r0
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    1dda:	2300      	movs	r3, #0
    1ddc:	466a      	mov	r2, sp
    1dde:	70d3      	strb	r3, [r2, #3]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    1de0:	9302      	str	r3, [sp, #8]
    1de2:	9303      	str	r3, [sp, #12]
	config_rtc_count.prescaler           = RTC_COUNT_PRESCALER_DIV_1;
    1de4:	8013      	strh	r3, [r2, #0]
	config_rtc_count.mode                = RTC_COUNT_MODE_16BIT;
    1de6:	7093      	strb	r3, [r2, #2]
	config_rtc_count.continuously_update = true;
    1de8:	2301      	movs	r3, #1
    1dea:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &config_rtc_count);
    1dec:	4c0b      	ldr	r4, [pc, #44]	; (1e1c <_ZN2GI3Sys7SystimeC1Ev+0x48>)
    1dee:	490c      	ldr	r1, [pc, #48]	; (1e20 <_ZN2GI3Sys7SystimeC1Ev+0x4c>)
    1df0:	0020      	movs	r0, r4
    1df2:	4b0c      	ldr	r3, [pc, #48]	; (1e24 <_ZN2GI3Sys7SystimeC1Ev+0x50>)
    1df4:	4798      	blx	r3
	rtc_count_enable(&rtc_instance);
    1df6:	0020      	movs	r0, r4
    1df8:	4b0b      	ldr	r3, [pc, #44]	; (1e28 <_ZN2GI3Sys7SystimeC1Ev+0x54>)
    1dfa:	4798      	blx	r3
	&rtc_instance, SysTick_Handler, RTC_COUNT_CALLBACK_OVERFLOW);
    1dfc:	2202      	movs	r2, #2
    1dfe:	490b      	ldr	r1, [pc, #44]	; (1e2c <_ZN2GI3Sys7SystimeC1Ev+0x58>)
    1e00:	0020      	movs	r0, r4
    1e02:	4b0b      	ldr	r3, [pc, #44]	; (1e30 <_ZN2GI3Sys7SystimeC1Ev+0x5c>)
    1e04:	4798      	blx	r3
	rtc_count_enable_callback(&rtc_instance, RTC_COUNT_CALLBACK_OVERFLOW);
    1e06:	2102      	movs	r1, #2
    1e08:	0020      	movs	r0, r4
    1e0a:	4b0a      	ldr	r3, [pc, #40]	; (1e34 <_ZN2GI3Sys7SystimeC1Ev+0x60>)
    1e0c:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 32);
    1e0e:	2120      	movs	r1, #32
    1e10:	0020      	movs	r0, r4
    1e12:	4b09      	ldr	r3, [pc, #36]	; (1e38 <_ZN2GI3Sys7SystimeC1Ev+0x64>)
    1e14:	4798      	blx	r3
}
    1e16:	0028      	movs	r0, r5
    1e18:	b005      	add	sp, #20
    1e1a:	bd30      	pop	{r4, r5, pc}
    1e1c:	200001b0 	.word	0x200001b0
    1e20:	40001400 	.word	0x40001400
    1e24:	000001f9 	.word	0x000001f9
    1e28:	0000011d 	.word	0x0000011d
    1e2c:	00001db5 	.word	0x00001db5
    1e30:	000002fd 	.word	0x000002fd
    1e34:	00000335 	.word	0x00000335
    1e38:	000002d9 	.word	0x000002d9

00001e3c <_GLOBAL__sub_I_time>:
{
	TimerTimeoutValue = STimerCnt + (unsigned long long)milliSec;
	while(1) {
		if(TimerTimeoutValue < STimerCnt) break;
	}
}
    1e3c:	b510      	push	{r4, lr}
GI::Sys::Systime time = GI::Sys::Systime();
    1e3e:	4c05      	ldr	r4, [pc, #20]	; (1e54 <_GLOBAL__sub_I_time+0x18>)
    1e40:	0020      	movs	r0, r4
    1e42:	4b05      	ldr	r3, [pc, #20]	; (1e58 <_GLOBAL__sub_I_time+0x1c>)
    1e44:	4798      	blx	r3
    1e46:	4a05      	ldr	r2, [pc, #20]	; (1e5c <_GLOBAL__sub_I_time+0x20>)
    1e48:	4905      	ldr	r1, [pc, #20]	; (1e60 <_GLOBAL__sub_I_time+0x24>)
    1e4a:	0020      	movs	r0, r4
    1e4c:	4b05      	ldr	r3, [pc, #20]	; (1e64 <_GLOBAL__sub_I_time+0x28>)
    1e4e:	4798      	blx	r3
}
    1e50:	bd10      	pop	{r4, pc}
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	200001c8 	.word	0x200001c8
    1e58:	00001dd5 	.word	0x00001dd5
    1e5c:	20000000 	.word	0x20000000
    1e60:	00001dd1 	.word	0x00001dd1
    1e64:	00001e69 	.word	0x00001e69

00001e68 <__aeabi_atexit>:
    1e68:	000b      	movs	r3, r1
    1e6a:	b510      	push	{r4, lr}
    1e6c:	0001      	movs	r1, r0
    1e6e:	0018      	movs	r0, r3
    1e70:	f000 f8c6 	bl	2000 <__cxa_atexit>
    1e74:	bd10      	pop	{r4, pc}

00001e76 <_ZdlPvj>:
    1e76:	b510      	push	{r4, lr}
    1e78:	f7ff fd60 	bl	193c <_ZdlPv>
    1e7c:	bd10      	pop	{r4, pc}
	...

00001e80 <__udivsi3>:
    1e80:	2200      	movs	r2, #0
    1e82:	0843      	lsrs	r3, r0, #1
    1e84:	428b      	cmp	r3, r1
    1e86:	d374      	bcc.n	1f72 <__udivsi3+0xf2>
    1e88:	0903      	lsrs	r3, r0, #4
    1e8a:	428b      	cmp	r3, r1
    1e8c:	d35f      	bcc.n	1f4e <__udivsi3+0xce>
    1e8e:	0a03      	lsrs	r3, r0, #8
    1e90:	428b      	cmp	r3, r1
    1e92:	d344      	bcc.n	1f1e <__udivsi3+0x9e>
    1e94:	0b03      	lsrs	r3, r0, #12
    1e96:	428b      	cmp	r3, r1
    1e98:	d328      	bcc.n	1eec <__udivsi3+0x6c>
    1e9a:	0c03      	lsrs	r3, r0, #16
    1e9c:	428b      	cmp	r3, r1
    1e9e:	d30d      	bcc.n	1ebc <__udivsi3+0x3c>
    1ea0:	22ff      	movs	r2, #255	; 0xff
    1ea2:	0209      	lsls	r1, r1, #8
    1ea4:	ba12      	rev	r2, r2
    1ea6:	0c03      	lsrs	r3, r0, #16
    1ea8:	428b      	cmp	r3, r1
    1eaa:	d302      	bcc.n	1eb2 <__udivsi3+0x32>
    1eac:	1212      	asrs	r2, r2, #8
    1eae:	0209      	lsls	r1, r1, #8
    1eb0:	d065      	beq.n	1f7e <__udivsi3+0xfe>
    1eb2:	0b03      	lsrs	r3, r0, #12
    1eb4:	428b      	cmp	r3, r1
    1eb6:	d319      	bcc.n	1eec <__udivsi3+0x6c>
    1eb8:	e000      	b.n	1ebc <__udivsi3+0x3c>
    1eba:	0a09      	lsrs	r1, r1, #8
    1ebc:	0bc3      	lsrs	r3, r0, #15
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d301      	bcc.n	1ec6 <__udivsi3+0x46>
    1ec2:	03cb      	lsls	r3, r1, #15
    1ec4:	1ac0      	subs	r0, r0, r3
    1ec6:	4152      	adcs	r2, r2
    1ec8:	0b83      	lsrs	r3, r0, #14
    1eca:	428b      	cmp	r3, r1
    1ecc:	d301      	bcc.n	1ed2 <__udivsi3+0x52>
    1ece:	038b      	lsls	r3, r1, #14
    1ed0:	1ac0      	subs	r0, r0, r3
    1ed2:	4152      	adcs	r2, r2
    1ed4:	0b43      	lsrs	r3, r0, #13
    1ed6:	428b      	cmp	r3, r1
    1ed8:	d301      	bcc.n	1ede <__udivsi3+0x5e>
    1eda:	034b      	lsls	r3, r1, #13
    1edc:	1ac0      	subs	r0, r0, r3
    1ede:	4152      	adcs	r2, r2
    1ee0:	0b03      	lsrs	r3, r0, #12
    1ee2:	428b      	cmp	r3, r1
    1ee4:	d301      	bcc.n	1eea <__udivsi3+0x6a>
    1ee6:	030b      	lsls	r3, r1, #12
    1ee8:	1ac0      	subs	r0, r0, r3
    1eea:	4152      	adcs	r2, r2
    1eec:	0ac3      	lsrs	r3, r0, #11
    1eee:	428b      	cmp	r3, r1
    1ef0:	d301      	bcc.n	1ef6 <__udivsi3+0x76>
    1ef2:	02cb      	lsls	r3, r1, #11
    1ef4:	1ac0      	subs	r0, r0, r3
    1ef6:	4152      	adcs	r2, r2
    1ef8:	0a83      	lsrs	r3, r0, #10
    1efa:	428b      	cmp	r3, r1
    1efc:	d301      	bcc.n	1f02 <__udivsi3+0x82>
    1efe:	028b      	lsls	r3, r1, #10
    1f00:	1ac0      	subs	r0, r0, r3
    1f02:	4152      	adcs	r2, r2
    1f04:	0a43      	lsrs	r3, r0, #9
    1f06:	428b      	cmp	r3, r1
    1f08:	d301      	bcc.n	1f0e <__udivsi3+0x8e>
    1f0a:	024b      	lsls	r3, r1, #9
    1f0c:	1ac0      	subs	r0, r0, r3
    1f0e:	4152      	adcs	r2, r2
    1f10:	0a03      	lsrs	r3, r0, #8
    1f12:	428b      	cmp	r3, r1
    1f14:	d301      	bcc.n	1f1a <__udivsi3+0x9a>
    1f16:	020b      	lsls	r3, r1, #8
    1f18:	1ac0      	subs	r0, r0, r3
    1f1a:	4152      	adcs	r2, r2
    1f1c:	d2cd      	bcs.n	1eba <__udivsi3+0x3a>
    1f1e:	09c3      	lsrs	r3, r0, #7
    1f20:	428b      	cmp	r3, r1
    1f22:	d301      	bcc.n	1f28 <__udivsi3+0xa8>
    1f24:	01cb      	lsls	r3, r1, #7
    1f26:	1ac0      	subs	r0, r0, r3
    1f28:	4152      	adcs	r2, r2
    1f2a:	0983      	lsrs	r3, r0, #6
    1f2c:	428b      	cmp	r3, r1
    1f2e:	d301      	bcc.n	1f34 <__udivsi3+0xb4>
    1f30:	018b      	lsls	r3, r1, #6
    1f32:	1ac0      	subs	r0, r0, r3
    1f34:	4152      	adcs	r2, r2
    1f36:	0943      	lsrs	r3, r0, #5
    1f38:	428b      	cmp	r3, r1
    1f3a:	d301      	bcc.n	1f40 <__udivsi3+0xc0>
    1f3c:	014b      	lsls	r3, r1, #5
    1f3e:	1ac0      	subs	r0, r0, r3
    1f40:	4152      	adcs	r2, r2
    1f42:	0903      	lsrs	r3, r0, #4
    1f44:	428b      	cmp	r3, r1
    1f46:	d301      	bcc.n	1f4c <__udivsi3+0xcc>
    1f48:	010b      	lsls	r3, r1, #4
    1f4a:	1ac0      	subs	r0, r0, r3
    1f4c:	4152      	adcs	r2, r2
    1f4e:	08c3      	lsrs	r3, r0, #3
    1f50:	428b      	cmp	r3, r1
    1f52:	d301      	bcc.n	1f58 <__udivsi3+0xd8>
    1f54:	00cb      	lsls	r3, r1, #3
    1f56:	1ac0      	subs	r0, r0, r3
    1f58:	4152      	adcs	r2, r2
    1f5a:	0883      	lsrs	r3, r0, #2
    1f5c:	428b      	cmp	r3, r1
    1f5e:	d301      	bcc.n	1f64 <__udivsi3+0xe4>
    1f60:	008b      	lsls	r3, r1, #2
    1f62:	1ac0      	subs	r0, r0, r3
    1f64:	4152      	adcs	r2, r2
    1f66:	0843      	lsrs	r3, r0, #1
    1f68:	428b      	cmp	r3, r1
    1f6a:	d301      	bcc.n	1f70 <__udivsi3+0xf0>
    1f6c:	004b      	lsls	r3, r1, #1
    1f6e:	1ac0      	subs	r0, r0, r3
    1f70:	4152      	adcs	r2, r2
    1f72:	1a41      	subs	r1, r0, r1
    1f74:	d200      	bcs.n	1f78 <__udivsi3+0xf8>
    1f76:	4601      	mov	r1, r0
    1f78:	4152      	adcs	r2, r2
    1f7a:	4610      	mov	r0, r2
    1f7c:	4770      	bx	lr
    1f7e:	e7ff      	b.n	1f80 <__udivsi3+0x100>
    1f80:	b501      	push	{r0, lr}
    1f82:	2000      	movs	r0, #0
    1f84:	f000 f806 	bl	1f94 <__aeabi_idiv0>
    1f88:	bd02      	pop	{r1, pc}
    1f8a:	46c0      	nop			; (mov r8, r8)

00001f8c <__aeabi_uidivmod>:
    1f8c:	2900      	cmp	r1, #0
    1f8e:	d0f7      	beq.n	1f80 <__udivsi3+0x100>
    1f90:	e776      	b.n	1e80 <__udivsi3>
    1f92:	4770      	bx	lr

00001f94 <__aeabi_idiv0>:
    1f94:	4770      	bx	lr
    1f96:	46c0      	nop			; (mov r8, r8)

00001f98 <__aeabi_lmul>:
    1f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f9a:	46ce      	mov	lr, r9
    1f9c:	4647      	mov	r7, r8
    1f9e:	0415      	lsls	r5, r2, #16
    1fa0:	0c2d      	lsrs	r5, r5, #16
    1fa2:	002e      	movs	r6, r5
    1fa4:	b580      	push	{r7, lr}
    1fa6:	0407      	lsls	r7, r0, #16
    1fa8:	0c14      	lsrs	r4, r2, #16
    1faa:	0c3f      	lsrs	r7, r7, #16
    1fac:	4699      	mov	r9, r3
    1fae:	0c03      	lsrs	r3, r0, #16
    1fb0:	437e      	muls	r6, r7
    1fb2:	435d      	muls	r5, r3
    1fb4:	4367      	muls	r7, r4
    1fb6:	4363      	muls	r3, r4
    1fb8:	197f      	adds	r7, r7, r5
    1fba:	0c34      	lsrs	r4, r6, #16
    1fbc:	19e4      	adds	r4, r4, r7
    1fbe:	469c      	mov	ip, r3
    1fc0:	42a5      	cmp	r5, r4
    1fc2:	d903      	bls.n	1fcc <__aeabi_lmul+0x34>
    1fc4:	2380      	movs	r3, #128	; 0x80
    1fc6:	025b      	lsls	r3, r3, #9
    1fc8:	4698      	mov	r8, r3
    1fca:	44c4      	add	ip, r8
    1fcc:	464b      	mov	r3, r9
    1fce:	4351      	muls	r1, r2
    1fd0:	4343      	muls	r3, r0
    1fd2:	0436      	lsls	r6, r6, #16
    1fd4:	0c36      	lsrs	r6, r6, #16
    1fd6:	0c25      	lsrs	r5, r4, #16
    1fd8:	0424      	lsls	r4, r4, #16
    1fda:	4465      	add	r5, ip
    1fdc:	19a4      	adds	r4, r4, r6
    1fde:	1859      	adds	r1, r3, r1
    1fe0:	1949      	adds	r1, r1, r5
    1fe2:	0020      	movs	r0, r4
    1fe4:	bc0c      	pop	{r2, r3}
    1fe6:	4690      	mov	r8, r2
    1fe8:	4699      	mov	r9, r3
    1fea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001fec <calloc>:
    1fec:	b510      	push	{r4, lr}
    1fee:	4b03      	ldr	r3, [pc, #12]	; (1ffc <calloc+0x10>)
    1ff0:	000a      	movs	r2, r1
    1ff2:	0001      	movs	r1, r0
    1ff4:	6818      	ldr	r0, [r3, #0]
    1ff6:	f000 f847 	bl	2088 <_calloc_r>
    1ffa:	bd10      	pop	{r4, pc}
    1ffc:	200000c8 	.word	0x200000c8

00002000 <__cxa_atexit>:
    2000:	b570      	push	{r4, r5, r6, lr}
    2002:	4c05      	ldr	r4, [pc, #20]	; (2018 <__cxa_atexit+0x18>)
    2004:	0005      	movs	r5, r0
    2006:	0013      	movs	r3, r2
    2008:	1e20      	subs	r0, r4, #0
    200a:	d004      	beq.n	2016 <__cxa_atexit+0x16>
    200c:	000a      	movs	r2, r1
    200e:	2002      	movs	r0, #2
    2010:	0029      	movs	r1, r5
    2012:	e000      	b.n	2016 <__cxa_atexit+0x16>
    2014:	bf00      	nop
    2016:	bd70      	pop	{r4, r5, r6, pc}
    2018:	00000000 	.word	0x00000000

0000201c <__libc_init_array>:
    201c:	b570      	push	{r4, r5, r6, lr}
    201e:	2600      	movs	r6, #0
    2020:	4d0c      	ldr	r5, [pc, #48]	; (2054 <__libc_init_array+0x38>)
    2022:	4c0d      	ldr	r4, [pc, #52]	; (2058 <__libc_init_array+0x3c>)
    2024:	1b64      	subs	r4, r4, r5
    2026:	10a4      	asrs	r4, r4, #2
    2028:	42a6      	cmp	r6, r4
    202a:	d109      	bne.n	2040 <__libc_init_array+0x24>
    202c:	2600      	movs	r6, #0
    202e:	f000 f989 	bl	2344 <_init>
    2032:	4d0a      	ldr	r5, [pc, #40]	; (205c <__libc_init_array+0x40>)
    2034:	4c0a      	ldr	r4, [pc, #40]	; (2060 <__libc_init_array+0x44>)
    2036:	1b64      	subs	r4, r4, r5
    2038:	10a4      	asrs	r4, r4, #2
    203a:	42a6      	cmp	r6, r4
    203c:	d105      	bne.n	204a <__libc_init_array+0x2e>
    203e:	bd70      	pop	{r4, r5, r6, pc}
    2040:	00b3      	lsls	r3, r6, #2
    2042:	58eb      	ldr	r3, [r5, r3]
    2044:	4798      	blx	r3
    2046:	3601      	adds	r6, #1
    2048:	e7ee      	b.n	2028 <__libc_init_array+0xc>
    204a:	00b3      	lsls	r3, r6, #2
    204c:	58eb      	ldr	r3, [r5, r3]
    204e:	4798      	blx	r3
    2050:	3601      	adds	r6, #1
    2052:	e7f2      	b.n	203a <__libc_init_array+0x1e>
    2054:	00002350 	.word	0x00002350
    2058:	00002350 	.word	0x00002350
    205c:	00002350 	.word	0x00002350
    2060:	00002360 	.word	0x00002360

00002064 <free>:
    2064:	b510      	push	{r4, lr}
    2066:	4b03      	ldr	r3, [pc, #12]	; (2074 <free+0x10>)
    2068:	0001      	movs	r1, r0
    206a:	6818      	ldr	r0, [r3, #0]
    206c:	f000 f81a 	bl	20a4 <_free_r>
    2070:	bd10      	pop	{r4, pc}
    2072:	46c0      	nop			; (mov r8, r8)
    2074:	200000c8 	.word	0x200000c8

00002078 <memset>:
    2078:	0003      	movs	r3, r0
    207a:	1882      	adds	r2, r0, r2
    207c:	4293      	cmp	r3, r2
    207e:	d100      	bne.n	2082 <memset+0xa>
    2080:	4770      	bx	lr
    2082:	7019      	strb	r1, [r3, #0]
    2084:	3301      	adds	r3, #1
    2086:	e7f9      	b.n	207c <memset+0x4>

00002088 <_calloc_r>:
    2088:	434a      	muls	r2, r1
    208a:	b570      	push	{r4, r5, r6, lr}
    208c:	0011      	movs	r1, r2
    208e:	0014      	movs	r4, r2
    2090:	f000 f852 	bl	2138 <_malloc_r>
    2094:	1e05      	subs	r5, r0, #0
    2096:	d003      	beq.n	20a0 <_calloc_r+0x18>
    2098:	0022      	movs	r2, r4
    209a:	2100      	movs	r1, #0
    209c:	f7ff ffec 	bl	2078 <memset>
    20a0:	0028      	movs	r0, r5
    20a2:	bd70      	pop	{r4, r5, r6, pc}

000020a4 <_free_r>:
    20a4:	b570      	push	{r4, r5, r6, lr}
    20a6:	0005      	movs	r5, r0
    20a8:	2900      	cmp	r1, #0
    20aa:	d010      	beq.n	20ce <_free_r+0x2a>
    20ac:	1f0c      	subs	r4, r1, #4
    20ae:	6823      	ldr	r3, [r4, #0]
    20b0:	2b00      	cmp	r3, #0
    20b2:	da00      	bge.n	20b6 <_free_r+0x12>
    20b4:	18e4      	adds	r4, r4, r3
    20b6:	0028      	movs	r0, r5
    20b8:	f000 f8c9 	bl	224e <__malloc_lock>
    20bc:	4a1d      	ldr	r2, [pc, #116]	; (2134 <_free_r+0x90>)
    20be:	6813      	ldr	r3, [r2, #0]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d105      	bne.n	20d0 <_free_r+0x2c>
    20c4:	6063      	str	r3, [r4, #4]
    20c6:	6014      	str	r4, [r2, #0]
    20c8:	0028      	movs	r0, r5
    20ca:	f000 f8c1 	bl	2250 <__malloc_unlock>
    20ce:	bd70      	pop	{r4, r5, r6, pc}
    20d0:	42a3      	cmp	r3, r4
    20d2:	d909      	bls.n	20e8 <_free_r+0x44>
    20d4:	6821      	ldr	r1, [r4, #0]
    20d6:	1860      	adds	r0, r4, r1
    20d8:	4283      	cmp	r3, r0
    20da:	d1f3      	bne.n	20c4 <_free_r+0x20>
    20dc:	6818      	ldr	r0, [r3, #0]
    20de:	685b      	ldr	r3, [r3, #4]
    20e0:	1841      	adds	r1, r0, r1
    20e2:	6021      	str	r1, [r4, #0]
    20e4:	e7ee      	b.n	20c4 <_free_r+0x20>
    20e6:	0013      	movs	r3, r2
    20e8:	685a      	ldr	r2, [r3, #4]
    20ea:	2a00      	cmp	r2, #0
    20ec:	d001      	beq.n	20f2 <_free_r+0x4e>
    20ee:	42a2      	cmp	r2, r4
    20f0:	d9f9      	bls.n	20e6 <_free_r+0x42>
    20f2:	6819      	ldr	r1, [r3, #0]
    20f4:	1858      	adds	r0, r3, r1
    20f6:	42a0      	cmp	r0, r4
    20f8:	d10b      	bne.n	2112 <_free_r+0x6e>
    20fa:	6820      	ldr	r0, [r4, #0]
    20fc:	1809      	adds	r1, r1, r0
    20fe:	1858      	adds	r0, r3, r1
    2100:	6019      	str	r1, [r3, #0]
    2102:	4282      	cmp	r2, r0
    2104:	d1e0      	bne.n	20c8 <_free_r+0x24>
    2106:	6810      	ldr	r0, [r2, #0]
    2108:	6852      	ldr	r2, [r2, #4]
    210a:	1841      	adds	r1, r0, r1
    210c:	6019      	str	r1, [r3, #0]
    210e:	605a      	str	r2, [r3, #4]
    2110:	e7da      	b.n	20c8 <_free_r+0x24>
    2112:	42a0      	cmp	r0, r4
    2114:	d902      	bls.n	211c <_free_r+0x78>
    2116:	230c      	movs	r3, #12
    2118:	602b      	str	r3, [r5, #0]
    211a:	e7d5      	b.n	20c8 <_free_r+0x24>
    211c:	6821      	ldr	r1, [r4, #0]
    211e:	1860      	adds	r0, r4, r1
    2120:	4282      	cmp	r2, r0
    2122:	d103      	bne.n	212c <_free_r+0x88>
    2124:	6810      	ldr	r0, [r2, #0]
    2126:	6852      	ldr	r2, [r2, #4]
    2128:	1841      	adds	r1, r0, r1
    212a:	6021      	str	r1, [r4, #0]
    212c:	6062      	str	r2, [r4, #4]
    212e:	605c      	str	r4, [r3, #4]
    2130:	e7ca      	b.n	20c8 <_free_r+0x24>
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	200001cc 	.word	0x200001cc

00002138 <_malloc_r>:
    2138:	2303      	movs	r3, #3
    213a:	b570      	push	{r4, r5, r6, lr}
    213c:	1ccd      	adds	r5, r1, #3
    213e:	439d      	bics	r5, r3
    2140:	3508      	adds	r5, #8
    2142:	0006      	movs	r6, r0
    2144:	2d0c      	cmp	r5, #12
    2146:	d21e      	bcs.n	2186 <_malloc_r+0x4e>
    2148:	250c      	movs	r5, #12
    214a:	42a9      	cmp	r1, r5
    214c:	d81d      	bhi.n	218a <_malloc_r+0x52>
    214e:	0030      	movs	r0, r6
    2150:	f000 f87d 	bl	224e <__malloc_lock>
    2154:	4a25      	ldr	r2, [pc, #148]	; (21ec <_malloc_r+0xb4>)
    2156:	6814      	ldr	r4, [r2, #0]
    2158:	0021      	movs	r1, r4
    215a:	2900      	cmp	r1, #0
    215c:	d119      	bne.n	2192 <_malloc_r+0x5a>
    215e:	4c24      	ldr	r4, [pc, #144]	; (21f0 <_malloc_r+0xb8>)
    2160:	6823      	ldr	r3, [r4, #0]
    2162:	2b00      	cmp	r3, #0
    2164:	d103      	bne.n	216e <_malloc_r+0x36>
    2166:	0030      	movs	r0, r6
    2168:	f000 f844 	bl	21f4 <_sbrk_r>
    216c:	6020      	str	r0, [r4, #0]
    216e:	0029      	movs	r1, r5
    2170:	0030      	movs	r0, r6
    2172:	f000 f83f 	bl	21f4 <_sbrk_r>
    2176:	1c43      	adds	r3, r0, #1
    2178:	d12c      	bne.n	21d4 <_malloc_r+0x9c>
    217a:	230c      	movs	r3, #12
    217c:	0030      	movs	r0, r6
    217e:	6033      	str	r3, [r6, #0]
    2180:	f000 f866 	bl	2250 <__malloc_unlock>
    2184:	e003      	b.n	218e <_malloc_r+0x56>
    2186:	2d00      	cmp	r5, #0
    2188:	dadf      	bge.n	214a <_malloc_r+0x12>
    218a:	230c      	movs	r3, #12
    218c:	6033      	str	r3, [r6, #0]
    218e:	2000      	movs	r0, #0
    2190:	bd70      	pop	{r4, r5, r6, pc}
    2192:	680b      	ldr	r3, [r1, #0]
    2194:	1b5b      	subs	r3, r3, r5
    2196:	d41a      	bmi.n	21ce <_malloc_r+0x96>
    2198:	2b0b      	cmp	r3, #11
    219a:	d903      	bls.n	21a4 <_malloc_r+0x6c>
    219c:	600b      	str	r3, [r1, #0]
    219e:	18cc      	adds	r4, r1, r3
    21a0:	6025      	str	r5, [r4, #0]
    21a2:	e003      	b.n	21ac <_malloc_r+0x74>
    21a4:	428c      	cmp	r4, r1
    21a6:	d10e      	bne.n	21c6 <_malloc_r+0x8e>
    21a8:	6863      	ldr	r3, [r4, #4]
    21aa:	6013      	str	r3, [r2, #0]
    21ac:	0030      	movs	r0, r6
    21ae:	f000 f84f 	bl	2250 <__malloc_unlock>
    21b2:	0020      	movs	r0, r4
    21b4:	2207      	movs	r2, #7
    21b6:	300b      	adds	r0, #11
    21b8:	1d23      	adds	r3, r4, #4
    21ba:	4390      	bics	r0, r2
    21bc:	1ac3      	subs	r3, r0, r3
    21be:	d0e7      	beq.n	2190 <_malloc_r+0x58>
    21c0:	425a      	negs	r2, r3
    21c2:	50e2      	str	r2, [r4, r3]
    21c4:	e7e4      	b.n	2190 <_malloc_r+0x58>
    21c6:	684b      	ldr	r3, [r1, #4]
    21c8:	6063      	str	r3, [r4, #4]
    21ca:	000c      	movs	r4, r1
    21cc:	e7ee      	b.n	21ac <_malloc_r+0x74>
    21ce:	000c      	movs	r4, r1
    21d0:	6849      	ldr	r1, [r1, #4]
    21d2:	e7c2      	b.n	215a <_malloc_r+0x22>
    21d4:	2303      	movs	r3, #3
    21d6:	1cc4      	adds	r4, r0, #3
    21d8:	439c      	bics	r4, r3
    21da:	42a0      	cmp	r0, r4
    21dc:	d0e0      	beq.n	21a0 <_malloc_r+0x68>
    21de:	1a21      	subs	r1, r4, r0
    21e0:	0030      	movs	r0, r6
    21e2:	f000 f807 	bl	21f4 <_sbrk_r>
    21e6:	1c43      	adds	r3, r0, #1
    21e8:	d1da      	bne.n	21a0 <_malloc_r+0x68>
    21ea:	e7c6      	b.n	217a <_malloc_r+0x42>
    21ec:	200001cc 	.word	0x200001cc
    21f0:	200001d0 	.word	0x200001d0

000021f4 <_sbrk_r>:
    21f4:	2300      	movs	r3, #0
    21f6:	b570      	push	{r4, r5, r6, lr}
    21f8:	4c06      	ldr	r4, [pc, #24]	; (2214 <_sbrk_r+0x20>)
    21fa:	0005      	movs	r5, r0
    21fc:	0008      	movs	r0, r1
    21fe:	6023      	str	r3, [r4, #0]
    2200:	f7ff f8ec 	bl	13dc <_sbrk>
    2204:	1c43      	adds	r3, r0, #1
    2206:	d103      	bne.n	2210 <_sbrk_r+0x1c>
    2208:	6823      	ldr	r3, [r4, #0]
    220a:	2b00      	cmp	r3, #0
    220c:	d000      	beq.n	2210 <_sbrk_r+0x1c>
    220e:	602b      	str	r3, [r5, #0]
    2210:	bd70      	pop	{r4, r5, r6, pc}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	200001f0 	.word	0x200001f0

00002218 <strcmp>:
    2218:	7802      	ldrb	r2, [r0, #0]
    221a:	780b      	ldrb	r3, [r1, #0]
    221c:	2a00      	cmp	r2, #0
    221e:	d003      	beq.n	2228 <strcmp+0x10>
    2220:	3001      	adds	r0, #1
    2222:	3101      	adds	r1, #1
    2224:	429a      	cmp	r2, r3
    2226:	d0f7      	beq.n	2218 <strcmp>
    2228:	1ad0      	subs	r0, r2, r3
    222a:	4770      	bx	lr

0000222c <strncmp>:
    222c:	2300      	movs	r3, #0
    222e:	b530      	push	{r4, r5, lr}
    2230:	429a      	cmp	r2, r3
    2232:	d00a      	beq.n	224a <strncmp+0x1e>
    2234:	3a01      	subs	r2, #1
    2236:	5cc4      	ldrb	r4, [r0, r3]
    2238:	5ccd      	ldrb	r5, [r1, r3]
    223a:	42ac      	cmp	r4, r5
    223c:	d104      	bne.n	2248 <strncmp+0x1c>
    223e:	429a      	cmp	r2, r3
    2240:	d002      	beq.n	2248 <strncmp+0x1c>
    2242:	3301      	adds	r3, #1
    2244:	2c00      	cmp	r4, #0
    2246:	d1f6      	bne.n	2236 <strncmp+0xa>
    2248:	1b63      	subs	r3, r4, r5
    224a:	0018      	movs	r0, r3
    224c:	bd30      	pop	{r4, r5, pc}

0000224e <__malloc_lock>:
    224e:	4770      	bx	lr

00002250 <__malloc_unlock>:
    2250:	4770      	bx	lr
    2252:	0000      	movs	r0, r0
    2254:	000004ac 	.word	0x000004ac
    2258:	000004a8 	.word	0x000004a8
    225c:	000004a8 	.word	0x000004a8
    2260:	000004d8 	.word	0x000004d8
    2264:	000004d8 	.word	0x000004d8
    2268:	000004c0 	.word	0x000004c0
    226c:	000004b2 	.word	0x000004b2
    2270:	000004c6 	.word	0x000004c6
    2274:	00000558 	.word	0x00000558
    2278:	00000538 	.word	0x00000538
    227c:	00000538 	.word	0x00000538
    2280:	00000584 	.word	0x00000584
    2284:	0000054a 	.word	0x0000054a
    2288:	00000566 	.word	0x00000566
    228c:	0000053c 	.word	0x0000053c
    2290:	00000574 	.word	0x00000574
    2294:	42000800 	.word	0x42000800
    2298:	42000c00 	.word	0x42000c00
    229c:	42001000 	.word	0x42001000
    22a0:	42001400 	.word	0x42001400
    22a4:	42001800 	.word	0x42001800
    22a8:	42001c00 	.word	0x42001c00
    22ac:	74726175 	.word	0x74726175
    22b0:	0000352d 	.word	0x0000352d
    22b4:	2d64656c 	.word	0x2d64656c
    22b8:	00000030 	.word	0x00000030
    22bc:	00001c38 	.word	0x00001c38
    22c0:	00001cb2 	.word	0x00001cb2
    22c4:	00001cbe 	.word	0x00001cbe
    22c8:	00001cca 	.word	0x00001cca
    22cc:	00001cd6 	.word	0x00001cd6
    22d0:	00001ce2 	.word	0x00001ce2
    22d4:	74726175 	.word	0x74726175
    22d8:	0000002d 	.word	0x0000002d
    22dc:	63627375 	.word	0x63627375
    22e0:	002d6364 	.word	0x002d6364

000022e4 <__sf_fake_stderr>:
	...

00002304 <__sf_fake_stdin>:
	...

00002324 <__sf_fake_stdout>:
	...

00002344 <_init>:
    2344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2346:	46c0      	nop			; (mov r8, r8)
    2348:	bcf8      	pop	{r3, r4, r5, r6, r7}
    234a:	bc08      	pop	{r3}
    234c:	469e      	mov	lr, r3
    234e:	4770      	bx	lr

00002350 <__init_array_start>:
    2350:	000000dd 	.word	0x000000dd
    2354:	000016bd 	.word	0x000016bd
    2358:	00001901 	.word	0x00001901
    235c:	00001e3d 	.word	0x00001e3d

00002360 <_fini>:
    2360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2362:	46c0      	nop			; (mov r8, r8)
    2364:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2366:	bc08      	pop	{r3}
    2368:	469e      	mov	lr, r3
    236a:	4770      	bx	lr

0000236c <__fini_array_start>:
    236c:	000000b5 	.word	0x000000b5
